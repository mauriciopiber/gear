<?php
namespace SchemaModuleTest\RepositoryTest;

use GearBaseTest\AbstractTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group SchemaModule
 * @group My
 * @group Repository
 */
class MyRepositoryTest extends AbstractTestCase
{
    protected $my;

    public function getMy()
    {
        if (!isset($this->my)) {
            $this->my =
                $this->bootstrap->getServiceLocator()->get('SchemaModule\Repository\MyRepository');
        }
        return $this->my;
    }

    public function testServiceLocator()
    {
        $serviceLocator = $this->getMy()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    public function testCallUsingServiceLocator()
    {
        $my = $this->getMy();
        $this->assertInstanceOf('SchemaModule\Repository\MyRepository', $my);
    }


    public function testSelectAll()
    {
        $resultSet = $this->getMy()->selectAll();
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
    }


    public function testSelectAllWithBasicFilter()
    {
        $resultSet = $this->getMy()->selectAll(array('likeField' => ''));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
    }

    public function testSelectAllWithBasicFilterFoundNone()
    {
        $resultSet = $this->getMy()->selectAll(array('likeField' => 'abcdefAhauhsdfguagdfaf'));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(0, count($resultSet));
    }

    public function testSelectByIdReturnEntity()
    {
        $resultSet = $this->getMy()->selectById(1);
        $this->assertNotNull($resultSet);
        $this->assertInstanceOf('SchemaModule\Entity\My', $resultSet);

        $this->assertEquals(1, $resultSet->getIdMy());
    }

    public function testSelectByIdReturnNull()
    {
        $resultSet = $this->getMy()->selectById(60000);
        $this->assertNull($resultSet);
    }

    public function testDeleteNoExistData()
    {
        $this->mockIdentity();
        $resultSet = $this->getMy()->delete(6000);
        $this->assertFalse($resultSet);
    }





    public function testCreateNewData()
    {
        $this->mockIdentity();
        $data = array(
        );
        $resultSet = $this->getMy()->insert($data);
        $this->bootstrap->getEntityManager()->refresh($resultSet);
        $this->assertInstanceOf('SchemaModule\Entity\My', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(is_null($resultSet->getUpdated()));
        return $resultSet;
    }

    /**
     * @depends testCreateNewData
     */
    public function testUpdateExistData($entityToUpdate)
    {
        $this->mockIdentity();
        $data = array(
        );

        $resultSet = $this->getMy()
          ->update($entityToUpdate->getIdMy(), $data);

        $this->bootstrap->getEntityManager()->refresh($resultSet);
        $this->assertInstanceOf('SchemaModule\Entity\My', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(!is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(!is_null($resultSet->getUpdated()));
        return $resultSet;
    }


    /**
     * @depends testUpdateExistData
     */
    public function testDeleteExistData($entityToDelete)
    {
        $entity = $this->getMy()
          ->selectById($entityToDelete->getIdMy());

        $this->mockIdentity();
        $resultSet = $this->getMy()->delete($entity);
        $this->assertTrue($resultSet);
    }
}

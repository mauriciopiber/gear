<?php
namespace SchemaModuleTest\ServiceTest;

use GearBaseTest\AbstractTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group Service
 */
class MyServiceTest extends AbstractTestCase
{
    protected $myService;

    public function getMyService()
    {
        if (!isset($this->myService)) {
            $this->myService =
                $this->bootstrap->getServiceLocator()->get(
                    'SchemaModule\Service\MyService'
                );
        }
        return $this->myService;
    }

    /**
     * @group SchemaModule
     * @group MyService
     */
    public function testServiceLocator()
    {
        $serviceLocator = $this->getMyService()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    /**
     * @group SchemaModule
     * @group MyService
    */
    public function testCallUsingServiceLocator()
    {
        $myService = $this->getMyService();
        $this->assertInstanceOf('SchemaModule\Service\MyService', $myService);
    }
    /**
     * @group MyService
     */
    public function testSetMyRepositoryRepository()
    {
        $mock = $this->getMockBuilder('\Repository\MyRepositoryRepository')
          ->disableOriginalConstructor()
          ->getMock();
        $myService = $this->getMyService();
        $myService->setMyRepositoryRepository($mock);
        $this->assertInstanceOf('\Repository\MyRepositoryRepository', $mock);
        return $this;
    }

    /**
     * @group MyService
     */
    public function testGetMyRepositoryRepository()
    {
        $myService = $this->getMyService();
        $myRepositoryRepos = $myService->getMyRepositoryRepository();
        $this->assertInstanceOf('\Repository\MyRepositoryRepository', $myRepositoryRepos);

    }


    public function testSetSelectAllCache()
    {
        $this->mockIdentity();

        $this->getMyService()->setSessionName('testing');

        $cache = $this->bootstrap->getServiceLocator()->get('memcached');

        if ($cache->hasItem('testingResult')) {
            $cache->removeItem('testingResult');
        }

        $data = $this->getMyService()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
        $data = $this->getMyService()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
    }

    public function testSelectAllCacheWithCache()
    {
        $this->mockIdentity();

        $this->getMyService()->setRouteMatch($this->getRouteMatch(1, 'id.My', 'DESC'));

        $this->assertEquals('id.My', $this->getMyService()->getOrderBy());
        $this->assertEquals('DESC', $this->getMyService()->getOrder());

        $resultSet = $this->getMyService()->selectAll();
        $resultSet = $this->getMyService()->selectAll();

        $this->getMyService()->setRouteMatch($this->getRouteMatch(1, 'id.My', 'ASC'));

        $this->assertEquals('id.My', $this->getMyService()->getOrderBy());
        $this->assertEquals('ASC', $this->getMyService()->getOrder());

        $cache = $this->bootstrap->getServiceLocator()->get('memcached');

        if ($cache->hasItem($this->getMyService()->getSessionName())) {
            $cache->removeItem($this->getMyService()->getSessionName());
        }

        $this->getMyService()->setRouteMatch(
            $this->getRouteMatch(1, 'idMy', 'DESC')
        );

        $this->assertEquals(
            'idMy',
            $this->getMyService()->getOrderBy()
        );
        $this->assertEquals('DESC', $this->getMyService()->getOrder());
    }

    public function testSelectById()
    {
        $myService = $this->getMyService();

        $resultSet = $myService->selectById(1);
        $this->assertInstanceOf('SchemaModule\Entity\My', $resultSet);
        $this->assertEquals(1, $resultSet->getIdMy());
    }


    /**
     * @group Service.Create
     */
    public function testCreate()
    {
        $this->mockIdentity();
        $data = array(
        );
        $resultSet = $this->getMyService()->create($data);
        $this->bootstrap->getEntityManager()->refresh($resultSet);
        $this->assertInstanceOf('SchemaModule\Entity\My', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(is_null($resultSet->getUpdated()));
        return $resultSet;
    }

    /**
     * @depends testCreate
     */
    public function testUpdate($entityToUpdate)
    {
        $this->mockIdentity();
        $data = array(
        );
        $resultSet = $this->getMyService()
            ->update($entityToUpdate->getIdMy(), $data);

        $this->bootstrap->getEntityManager()->refresh($resultSet);
        $this->assertInstanceOf('SchemaModule\Entity\My', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(!is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(!is_null($resultSet->getUpdated()));
        return $resultSet;
    }

    /**
     * @depends testUpdate
     */
    public function testDelete($entityToDelete)
    {

        $myService = $this->getMyService();

        $resultSet = $myService->delete($entityToDelete->getIdMy());
        $this->assertTrue($resultSet);
    }

    public function getRouteMatch($page, $orderBy = 'idMy', $order = 'DESC')
    {
        $routeMatch = new \Zend\Mvc\Router\Http\RouteMatch(array(
            'controller' => 'SchemaModule\Controller\My',
            'action'     => 'list',
            'page' => $page,
            'orderBy' => $orderBy,
            'order' => $order
        ));

        $routeMatch->setMatchedRouteName('schema-module/my');
        return $routeMatch;
    }
}

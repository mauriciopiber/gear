<?php
namespace SchemaModuleTest\RepositoryTest;

use GearBaseTest\AbstractTestCase;
use SchemaModule\Repository\MyRepositoryMultiDependencyTrait;

/**
 * @group Repository
 */
class MyRepositoryMultiDependencyTest extends AbstractTestCase
{
    use MyRepositoryMultiDependencyTrait;

    /**
     * @group SchemaModule
     * @group MyRepositoryMultiDependency
     */
    public function testServiceLocator()
    {
        $serviceLocator = $this->getMyRepositoryMultiDependency()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    /**
     * @group SchemaModule
     * @group MyRepositoryMultiDependency
    */
    public function testGet()
    {
        $myRepositoryMulti = $this->getMyRepositoryMultiDependency();
        $this->assertInstanceOf('SchemaModule\Repository\MyRepositoryMultiDependency', $myRepositoryMulti);
    }

    /**
     * @group SchemaModule
     * @group MyRepositoryMultiDependency
    */
    public function testSet()
    {
        $mockMyRepository = $this->getMockSingleClass(
            'SchemaModule\Repository\MyRepositoryMultiDependency'
        );
        $this->setMyRepositoryMultiDependency($mockMyRepository);
        $this->assertEquals($mockMyRepository, $this->getMyRepositoryMultiDependency());
    }
    public function testSetOtherService()
    {
        $mockOtherService = $this->getMockSingleClass('SchemaModule\Service\OtherService');
        $this->getMyRepositoryMultiDependency()->setOtherService($mockOtherService);
        $this->assertEquals($mockOtherService, $this->getMyRepositoryMultiDependency()->getOtherService());
    }

    public function testGetOtherService()
    {
        $this->assertInstanceOf(
            'SchemaModule\Service\OtherService',
            $this->getMyRepositoryMultiDependency()->getOtherService()
        );
    }
    public function testSetAnotherService()
    {
        $mockAnotherService = $this->getMockSingleClass('SchemaModule\Service\AnotherService');
        $this->getMyRepositoryMultiDependency()->setAnotherService($mockAnotherService);
        $this->assertEquals($mockAnotherService, $this->getMyRepositoryMultiDependency()->getAnotherService());
    }

    public function testGetAnotherService()
    {
        $this->assertInstanceOf(
            'SchemaModule\Service\AnotherService',
            $this->getMyRepositoryMultiDependency()->getAnotherService()
        );
    }
    public function testSetOtherRepository()
    {
        $mockOtherRepository = $this->getMockSingleClass('SchemaModule\Repository\OtherRepository');
        $this->getMyRepositoryMultiDependency()->setOtherRepository($mockOtherRepository);
        $this->assertEquals($mockOtherRepository, $this->getMyRepositoryMultiDependency()->getOtherRepository());
    }

    public function testGetOtherRepository()
    {
        $this->assertInstanceOf(
            'SchemaModule\Repository\OtherRepository',
            $this->getMyRepositoryMultiDependency()->getOtherRepository()
        );
    }
}

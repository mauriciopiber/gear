<?php
namespace SchemaModuleTest\ServiceTest;

use GearBaseTest\AbstractTestCase;
use SchemaModule\Service\MyServiceMultiDependencyTrait;

/**
 * @group Service
 */
class MyServiceMultiDependencyTest extends AbstractTestCase
{
    use MyServiceMultiDependencyTrait;

    /**
     * @group SchemaModule
     * @group MyServiceMultiDependency
     */
    public function testServiceLocator()
    {
        $serviceLocator = $this->getMyServiceMultiDependency()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    /**
     * @group SchemaModule
     * @group MyServiceMultiDependency
    */
    public function testGet()
    {
        $myServiceMulti = $this->getMyServiceMultiDependency();
        $this->assertInstanceOf('SchemaModule\Service\MyServiceMultiDependency', $myServiceMulti);
    }

    /**
     * @group SchemaModule
     * @group MyServiceMultiDependency
    */
    public function testSet()
    {
        $mockMyService = $this->getMockSingleClass(
            'SchemaModule\Service\MyServiceMultiDependency'
        );
        $this->setMyServiceMultiDependency($mockMyService);
        $this->assertEquals($mockMyService, $this->getMyServiceMultiDependency());
    }
    public function testSetOtherService()
    {
        $mockOtherService = $this->getMockSingleClass('SchemaModule\Service\OtherService');
        $this->getMyServiceMultiDependency()->setOtherService($mockOtherService);
        $this->assertEquals($mockOtherService, $this->getMyServiceMultiDependency()->getOtherService());
    }

    public function testGetOtherService()
    {
        $this->assertInstanceOf(
            'SchemaModule\Service\OtherService',
            $this->getMyServiceMultiDependency()->getOtherService()
        );
    }
    public function testSetAnotherService()
    {
        $mockAnotherService = $this->getMockSingleClass('SchemaModule\Service\AnotherService');
        $this->getMyServiceMultiDependency()->setAnotherService($mockAnotherService);
        $this->assertEquals($mockAnotherService, $this->getMyServiceMultiDependency()->getAnotherService());
    }

    public function testGetAnotherService()
    {
        $this->assertInstanceOf(
            'SchemaModule\Service\AnotherService',
            $this->getMyServiceMultiDependency()->getAnotherService()
        );
    }
    public function testSetOtherRepository()
    {
        $mockOtherRepository = $this->getMockSingleClass('SchemaModule\Repository\OtherRepository');
        $this->getMyServiceMultiDependency()->setOtherRepository($mockOtherRepository);
        $this->assertEquals($mockOtherRepository, $this->getMyServiceMultiDependency()->getOtherRepository());
    }

    public function testGetOtherRepository()
    {
        $this->assertInstanceOf(
            'SchemaModule\Service\OtherRepository',
            $this->getMyServiceMultiDependency()->getOtherRepository()
        );
    }
}

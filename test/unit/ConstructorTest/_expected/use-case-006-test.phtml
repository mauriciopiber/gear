<?php
namespace CatalogTest;

use PHPUnit\Framework\TestCase;
use Catalog\ProductTrait;

class ProductTest extends TestCase
{
    use ProductTrait;

    public function testSetProduct()
    {
        $mockProduct = $this->getMockSingleClass('Catalog\Product');
        $this->setProduct($mockProduct);
        $this->assertEquals($mockProduct, $this->getProduct());
    }

    public function testGetProduct()
    {
        $this->assertInstanceOf(
            'Catalog\Product',
            $this->getProduct()
        );
    }

    public function testGetCategory()
    {
        $this->assertInstanceOf(
            'Catalog\Category',
            $this->getProduct()->getCategory()
        );
    }

    public function testSetCategory()
    {
        $mockProduct = $this->getMockSingleClass('Catalog\Category');
        $this->getProduct()->setCategory($mockProduct);
        $this->assertEquals($mockProduct, $this->getProduct()->getCategory());
    }

    public function testGetLabel()
    {
        $this->assertInstanceOf(
            'Catalog\Label',
            $this->getProduct()->getLabel()
        );
    }

    public function testSetLabel()
    {
        $mockProduct = $this->getMockSingleClass('Catalog\Label');
        $this->getProduct()->setLabel($mockProduct);
        $this->assertEquals($mockProduct, $this->getProduct()->getLabel());
    }

    public function testGetSazon()
    {
        $this->assertInstanceOf(
            'Catalog\Sazon',
            $this->getProduct()->getSazon()
        );
    }

    public function testSetSazon()
    {
        $mockProduct = $this->getMockSingleClass('Catalog\Sazon');
        $this->getProduct()->setSazon($mockProduct);
        $this->assertEquals($mockProduct, $this->getProduct()->getSazon());
    }
}

<?php
namespace MyModuleTest\FormTest;

use PHPUnit\Framework\TestCase;
use Interop\Container\ContainerInterface;
use MyModule\Form\MyTableFormFactory;
use MyModule\Form\MyTableForm;
use MyModule\Filter\MyTableFilter;
use Zend\Db\Adapter\Adapter;
use Zend\Mvc\I18n\Translator;
use Doctrine\ORM\EntityManager;
use Zend\Http\Request;
use Zend\Uri\Uri;

/**
 * @group MyModule
 * @group MyTableForm
 * @group Form
 */
class MyTableFormFactoryTest extends TestCase
{
    public function setUp() : void
    {
        parent::setUp();

        $this->container = $this->prophesize(ContainerInterface::class);
        $this->entityManager = $this->prophesize(EntityManager::class);
        $this->filter = $this->prophesize(MyTableFilter::class);
        $this->request = $this->prophesize(Request::class);
        $this->translator = $this->prophesize(Translator::class);
        $this->uri = $this->prophesize(Uri::class);
        $this->adapter = $this->prophesize(Adapter::class);
    }

    public function testMyTableFormFactory()
    {
        $this->uri->getPath()->willReturn('my-module/my-table/edit/30');
        $this->request->getUri()->willReturn($this->uri->reveal());

        $this->filter->setAdapter($this->adapter->reveal())->shouldNotBeCalled();
        $this->filter->getInputFilter(30)->willReturn($this->filter->reveal());

        $this->container->get('doctrine.entitymanager.orm_default')
          ->willReturn($this->entityManager->reveal())
          ->shouldBeCalled();

        $this->container->get(MyTableFilter::class)
          ->willReturn($this->filter->reveal())
          ->shouldBeCalled();

        $this->container->get(Adapter::class)->willReturn($this->adapter->reveal());
        $this->container->get('Request')->willReturn($this->request->reveal())->shouldBeCalled();
        $this->container->get('Translator')->willReturn($this->translator->reveal())->shouldBeCalled();

        $factory = new MyTableFormFactory();

        $instance = $factory->__invoke($this->container->reveal(), null);

        $this->assertInstanceOf(MyTableForm::class, $instance);
    }
}

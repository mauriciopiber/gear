<?php
namespace MyModuleTest\ControllerTest;

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase as TestCase;
use MyModule\Controller\SingleDbTableController;
use Zend\Http\Request;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;

/**
 * @group MyModule
 * @group SingleDbTable
 * @group Controller
 */
class SingleDbTableControllerTest extends TestCase
{

    public function setUp()
    {
        $this->setApplicationConfig(
            include \GearBase\Module::getProjectFolder().'/config/application.config.php'
        );
        parent::setUp();

        $this->controller = new SingleDbTableController();
        $this->request    = new Request();
        $this->routeMatch = new RouteMatch(array('controller' => 'SingleDbTableController'));
        $this->event      = new MvcEvent();

        $this->event->setRouteMatch($this->routeMatch);
        $this->controller->setEvent($this->event);

        $this->singleDbTableForm = $this->prophesize('MyModule\Form\SingleDbTableForm');
        $this->singleDbTableSearchForm = $this->prophesize('MyModule\Form\Search\SingleDbTableSearchForm');
        $this->singleDbTableService = $this->prophesize('MyModule\Service\SingleDbTableService');

        $requestPlugin = new \GearBase\Controller\Plugin\RequestPlugin();
        $this->controller->getPluginManager()->setService('getRequestPlugin', $requestPlugin);

        $this->url = $this->prophesize('Zend\Mvc\Controller\Plugin\Url');
        $this->controller->getPluginManager()->setService('url', $this->url->reveal());

        $this->controller->setSingleDbTableForm($this->singleDbTableForm->reveal());
        $this->controller->setSingleDbTableService($this->singleDbTableService->reveal());
        $this->controller->setSingleDbTableSearchForm($this->singleDbTableSearchForm->reveal());
    }

    protected function tearDown()
    {
        $refl = new \ReflectionObject($this);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() && 0 !== strpos($prop->getDeclaringClass()->getName(), 'PHPUnit_')) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
    }

    /**
     * @group controller.create
     */
    public function testEnterCreatePage()
    {
        $this->routeMatch->setParam('action', 'create');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
    public function testSendPostToCreatePageRedirectToGet()
    {
        $this->url->fromRoute(SingleDbTableController::CREATE)->willReturn(SingleDbTableController::CREATE);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(303, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.create
     */
    public function testSendPostToCreateShowValidation()
    {
        $this->url->fromRoute(SingleDbTableController::CREATE)->willReturn(SingleDbTableController::CREATE);
        $this->url->setController($this->controller)->shouldBeCalled();

        $prg = $this->prophesize('Zend\Mvc\Controller\Plugin\PostRedirectGet');
        $prg->setController($this->controller)->shouldBeCalled();
        $prg->__invoke('my-module/single-db-table/create', true)->willReturn([***REMOVED***);

        $this->controller->getPluginManager()->setService('postredirectget', $prg->reveal());

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }
    /**
     * @group controller.create
     */
    public function testCreateSuccessful()
    {
        $this->url->fromRoute(SingleDbTableController::CREATE)->willReturn(SingleDbTableController::CREATE);
        $this->url->fromRoute("my-module/single-db-table/edit", ["id" => 31, "success" => 1***REMOVED***, [***REMOVED***, false)
          ->willReturn(SingleDbTableController::EDIT.'/31/1');

        $this->url->setController($this->controller)->shouldBeCalled();

        $data = array(
        );

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\PostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();

        $this->prg->__invoke('my-module/single-db-table/create', true)->willReturn($data);

        $this->controller->getPluginManager()->setService('postredirectget', $this->prg->reveal());

        $this->entity = $this->prophesize('MyModule\Entity\SingleDbTable');
        $this->entity->getIdSingleDbTable()->willReturn(31)->shouldBeCalled();

        $this->singleDbTableForm->setData($data)->shouldBeCalled();
        $this->singleDbTableForm->isValid()->willReturn(true)->shouldBeCalled();
        $this->singleDbTableForm->getData()->willReturn($data)->shouldBeCalled();
        $this->singleDbTableService->create($data)->willReturn($this->entity)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditDisplaySuccessful()
    {
        $this->url->fromRoute(SingleDbTableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(SingleDbTableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'edit');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditRedirectWithInvalidIdToListing()
    {
        $this->url->fromRoute(SingleDbTableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(SingleDbTableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->singleDbTableService->selectById(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 6000);
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testDisplayEditSuccessful()
    {
        $this->entity = $this->prophesize('MyModule\Entity\SingleDbTable');

        $this->singleDbTableService->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    public function testWhenListDisplaySuccessful()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('MyModule\Service\SingleDbTableService');
        $this->dispatch('/my-module/single-db-table/listar');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('list');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/list');
    }


    public function testWhenFilterWithoutData()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('MyModule\Service\SingleDbTableService');
        $this->dispatch('/my-module/single-db-table/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('list');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/list');
    }


    public function testWhenFilterWithoutDataWithPRG()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('MyModule\Service\SingleDbTableService');
        $this->dispatch('/my-module/single-db-table/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('list');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/list');
    }


    public function testDeleteSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/my-module/single-db-table/excluir/6000');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('delete');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/delete');
    }


    public function testWhenDeleteDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/my-module/single-db-table/excluir');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('delete');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/delete');
    }


    public function testViewSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/my-module/single-db-table/visualizar/6000');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertRedirectTo('/my-module/single-db-table/listar/page//orderBy');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('view');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/view');
    }

    public function testWhenViewDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/my-module/single-db-table/visualizar');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('view');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/view');
    }

   /**
     * @depends testCreateSuccess
     */
    public function testWhenListDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();

        $this->dispatch(
            '/my-module/single-db-table/editar/'.$resultSet->getIdSingleDbTable()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('edit');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/edit');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenViewDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/my-module/single-db-table/visualizar/'.$resultSet->getIdSingleDbTable()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('view');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/view');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenListRedirectSuccessfulPRGWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/my-module/single-db-table/editar/'.$resultSet->getIdSingleDbTable(),
            'POST'
        );

        $this->assertResponseStatusCode(303);
        $this->assertRedirectTo(
            '/my-module/single-db-table/editar/'.$resultSet->getIdSingleDbTable()
        );
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('edit');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/edit');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testEditAfterCreateOk($resultSet)
    {

        $newData = array(
            'singleDbColumn' => '58Single Db Column',
        );
        $this->mockUser();
        $this->mockPluginPostRedirectGet($newData);
        $this->dispatch(
            '/my-module/single-db-table/editar/'.$resultSet->getIdSingleDbTable(),
            'POST',
            $newData
        );
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('edit');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/edit');

        $this->assertRedirectTo(
            sprintf(
                '/my-module/single-db-table/editar/%d/1',
                $resultSet->getIdSingleDbTable()
            )
        );
    }
     /**
     * @depends testCreateSuccess
     */
    public function testDeleteAfterEditOk($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            sprintf(
                '/my-module/single-db-table/excluir/%d',
                $resultSet->getIdSingleDbTable()
            )
        );
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\SingleDbTable');
        $this->assertActionName('delete');
        $this->assertControllerClass('SingleDbTableController');
        $this->assertMatchedRouteName('my-module/single-db-table/delete');
    }
}

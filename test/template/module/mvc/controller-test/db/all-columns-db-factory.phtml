<?php
namespace MyModuleTest\ControllerTest;

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase as TestCase;
use MyModule\Controller\TableController;
use Zend\Http\Request;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;
use GearBaseTest\Assertions\AclAssertTrait;

/**
 * @group MyModule
 * @group Table
 * @group Controller
 * @group TableController
 */
class TableControllerTest extends TestCase
{
    use AclAssertTrait;

    public function mockUploadImage()
    {
        $maker = new \GearBaseTest\UploadImageMock();
        return $maker->mockUploadFile(\MyModule\Module::getLocation());
    }

    public function mockTestUploadImageFactory($columns)
    {
        $this->getApplication()
        ->getServiceManager()
        ->setAllowOverride(true);

        $mockFilter = $this->getMockSingleClass('MyModule\Filter\TableFilter', array('isValid'));
        $mockFilter->expects($this->any())->method('isValid')->willReturn(true);


        $factory = $this->getApplication()
        ->getServiceManager()
        ->get('ServiceManager')->get('MyModule\Form\TableForm');

        $factory->setUseInputFilterDefaults(false);

        $filter = $factory->getInputFilter();

        foreach ($columns as $column) {
            $mockFileInput = $this->getMockSingleClass('Zend\InputFilter\FileInput', array('isValid', 'getName'));
            $mockFileInput->expects($this->any())->method('isValid')->willReturn(true);
            $mockFileInput->expects($this->any())->method('getName')->willReturn($column);
            $filter->getInputFilter()->remove($column)->add($mockFileInput);
        }

        $factory->setInputFilter($filter);

        $this->getApplication()
        ->getServiceManager()
        ->get('ServiceManager')->setService('MyModule\Form\TableForm', $factory);
    }

    public function setUp()
    {
        $this->setApplicationConfig(
            include \GearBase\Module::getProjectFolder().'/config/application.config.php'
        );
        parent::setUp();

        $this->tableService = $this->prophesize('MyModule\Service\TableService');
        $this->tableForm = $this->prophesize('MyModule\Form\TableForm');
        $this->tableSearchForm = $this->prophesize('MyModule\Form\Search\TableSearchForm');
        $this->imageService = $this->prophesize('GearImage\Service\ImageService');

        $this->controller = new TableController(
            $this->tableService->reveal(),
            $this->tableForm->reveal(),
            $this->tableSearchForm->reveal(),
            $this->imageService->reveal()
        );

        $this->request    = new Request();
        $this->routeMatch = new RouteMatch(array('controller' => 'TableController'));
        $this->event      = new MvcEvent();

        $this->event->setRouteMatch($this->routeMatch);
        $this->controller->setEvent($this->event);

        $requestPlugin = new \GearBase\Controller\Plugin\RequestPlugin();
        $this->controller->getPluginManager()->setService('getRequestPlugin', $requestPlugin);

        $this->url = $this->prophesize('Zend\Mvc\Controller\Plugin\Url');
        $this->controller->getPluginManager()->setService('url', $this->url->reveal());

        $this->schema = (new \MyModule\Module())->getLocation().'/../../schema/module.json';
    }

    protected function tearDown()
    {
        $refl = new \ReflectionObject($this);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() && 0 !== strpos($prop->getDeclaringClass()->getName(), 'PHPUnit_')) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
    }

    /**
     * @group controller.create
     */
    public function testEnterCreatePage()
    {
        $this->assertAcl($this->schema, 'MyModule', 'TableController', 'Create');

        $this->routeMatch->setParam('action', 'create');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
    public function testSendPostToCreatePageRedirectToGet()
    {
        $this->url->fromRoute(TableController::CREATE)->willReturn(TableController::CREATE);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();
        $this->response = $this->prophesize('Zend\Http\PhpEnvironment\Response');
        $this->response->getStatusCode()->willReturn(303);
        $this->prg->__invoke($this->tableForm, 'my-module/table/create', true)->willReturn($this->response->reveal());
        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());
        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
        $this->assertEquals(303, $result->getStatusCode());
    }

    /**
     * @group controller.create
     */
    public function testSendPostToCreateShowValidation()
    {
        $this->url->fromRoute(TableController::CREATE)->willReturn(TableController::CREATE);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();
        $this->prg->__invoke($this->tableForm, 'my-module/table/create', true)->willReturn([***REMOVED***);
        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
    public function testCreateSuccessful()
    {
        $this->url->fromRoute(TableController::CREATE)->willReturn(TableController::CREATE);
        $this->url->fromRoute("my-module/table/edit", ["id" => 31, "success" => 1***REMOVED***, [***REMOVED***, false)
          ->willReturn(TableController::EDIT.'/31/1');

        $this->url->setController($this->controller)->shouldBeCalled();

        $data = array(
        );

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();

        $this->prg->__invoke($this->tableForm, 'my-module/table/create', true)->willReturn($data);

        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());

        $this->entity = $this->prophesize('MyModule\Entity\Table');
        $this->entity->getIdTable()->willReturn(31)->shouldBeCalled();

        $this->tableForm->setData($data)->shouldBeCalled();
        $this->tableForm->isValid()->willReturn(true)->shouldBeCalled();
        $this->tableForm->getData()->willReturn($data)->shouldBeCalled();
        $this->tableService->create($data)->willReturn($this->entity)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditDisplaySuccessful()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'edit');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditRedirectWithInvalidIdToListing()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->tableService->selectById(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 6000);
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testDisplayEditSuccessful()
    {
        $this->assertAcl($this->schema, 'MyModule', 'TableController', 'Edit');

        $this->entity = $this->prophesize('MyModule\Entity\Table');

        $this->tableService->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenListRedirectSuccessfulPRGWithValidId()
    {
        $this->url->fromRoute(TableController::EDIT, ['id' => 31***REMOVED***)->willReturn(TableController::EDIT);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->entity = $this->prophesize('MyModule\Entity\Table');

        $this->tableService->selectById(31)->willReturn($this->entity);


        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();
        $this->response = $this->prophesize('Zend\Http\PhpEnvironment\Response');
        $this->response->getStatusCode()->willReturn(303);
        $this->prg->__invoke($this->tableForm, 'my-module/table/edit', true)->willReturn($this->response->reveal());
        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());


        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $this->request->setMethod('POST');

        $result = $this->controller->dispatch($this->request);

        $this->assertEquals(303, $result->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);

    }

    /**
     * @group controller.edit
     */
    public function testWhenListRedirectSuccessfulPRGWithValidIdReturnValidation()
    {
        $this->url->fromRoute(TableController::EDIT, ['id' => 31***REMOVED***)->willReturn(TableController::EDIT.'/31');
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->entity = $this->prophesize('MyModule\Entity\Table');

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();
        $this->prg->__invoke($this->tableForm, 'my-module/table/edit/31', true)->willReturn([***REMOVED***);
        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());

        $this->tableService->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $this->request->setMethod('POST');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.edit
     */
    public function testEditSuccessfull()
    {
        $this->url->fromRoute(TableController::EDIT, ['id' => 31***REMOVED***)->willReturn(TableController::EDIT);
        $this->url->fromRoute("my-module/table/edit", ["id" => 31, "success" => 1***REMOVED***, [***REMOVED***, false)->willReturn(TableController::EDIT.'/31/1');
        $this->url->setController($this->controller)->shouldBeCalled();

        $data = array(
        );

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();
        $this->prg->__invoke($this->tableForm, 'my-module/table/edit', true)->willReturn([***REMOVED***);
        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());

        $this->entity = $this->prophesize('MyModule\Entity\Table');
        $this->entity->getIdTable()->willReturn(31)->shouldBeCalled();

        $this->tableForm->setData($data)->shouldBeCalled();
        $this->tableForm->isValid()->willReturn(true)->shouldBeCalled();
        $this->tableForm->getData()->willReturn($data)->shouldBeCalled();
        $this->tableService->update(31, $data)->willReturn($this->entity)->shouldBeCalled();
        $this->tableService->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $this->request->setMethod('POST');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.list
     */
    public function testWhenListDisplaySuccessful()
    {
        $this->assertAcl($this->schema, 'MyModule', 'TableController', 'List');

        $this->tableService->selectAll()->willReturn([***REMOVED***)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'list');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.view
     */
    public function testWhenViewDisplaySuccessfulWithValidId()
    {
        $this->assertAcl($this->schema, 'MyModule', 'TableController', 'View');

        $this->entity = $this->prophesize('MyModule\Entity\Table');
        //$this->entity->getIdTable()->willReturn(31)->shouldBeCalled();

        $this->tableService->selectById(31)->willReturn($this->entity->reveal());
        $this->tableService->extract($this->entity->reveal())->willReturn([***REMOVED***);

        $this->routeMatch->setParam('action', 'view');
        $this->routeMatch->setParam('id', 31);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.view
     */
    public function testViewSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->tableService->selectById(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'view');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.view
     */
    public function testWhenViewDisplaySuccessful()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'view');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.delete
     */
    public function testDeleteSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->assertAcl($this->schema, 'MyModule', 'TableController', 'Delete');

        $this->tableService->delete(6000)->willReturn(['success' => false, 'error' => 'EntityNotFound'***REMOVED***);

        $this->routeMatch->setParam('action', 'delete');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $result);
    }

    /**
     * @group controller.delete
     */
    public function testDeleteSucessfullAndRedirectToListWithSuccessful()
    {
        $this->tableService->delete(6000)->willReturn(['success' => true***REMOVED***);

        $this->routeMatch->setParam('action', 'delete');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $result);
    }

    /**
     * @group controller.delete
     */
    public function testWhenDeleteDisplaySuccessful()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'delete');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.upload-image
     */
    public function testAccessUploadImageWithoutIdReturnToList()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'upload-image');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.upload-image
     */
    public function testAccessUploadImageWithInvalidIdReturnToList()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->tableService->selectById(6000)->willReturn(null)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'upload-image');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.upload-image
     */
    public function testPostUploadImageReturnPRGPlugin()
    {
        $this->url->fromRoute(TableController::IMAGE, ['id' => 31***REMOVED***)->willReturn(TableController::IMAGE.'/31');
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->entity = $this->prophesize('MyModule\Entity\Table');

        $this->tableService->selectById(31)->willReturn($this->entity)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'upload-image');
        $this->routeMatch->setParam('id', 31);
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(303, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.upload-image
     */
    public function testPostUploadImageProcessSuccess()
    {
        $this->url->fromRoute(TableController::IMAGE, ['id' => 31***REMOVED***)->willReturn(TableController::IMAGE.'/31');
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->entity = $this->prophesize('MyModule\Entity\Table');

        $this->tableService->selectById(31)->willReturn($this->entity)->shouldBeCalled();

        $this->imageService->appendPlugin()->shouldBeCalled();
        $this->imageService->updateImages('table', 31)->willReturn(true)->shouldBeCalled();
        $this->imageService->updatePosition([***REMOVED***)->willReturn(true)->shouldBeCalled();
        $this->imageService->clearCache()->shouldBeCalled();

        $prg = $this->prophesize('Zend\Mvc\Controller\Plugin\PostRedirectGet');
        $prg->setController($this->controller)->shouldBeCalled();
        $prg->__invoke('my-module/table/upload-image/31', true)->willReturn([***REMOVED***);

        $this->controller->getPluginManager()->setService('postredirectget', $prg->reveal());

        $this->routeMatch->setParam('action', 'upload-image');
        $this->routeMatch->setParam('id', 31);

        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }
}

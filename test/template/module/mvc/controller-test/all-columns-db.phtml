<?php
namespace MyModuleTest\ControllerTest;

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase as TestCase;
use MyModule\Controller\TableController;
use Zend\Http\Request;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;

/**
 * @group MyModule
 * @group Table
 * @group Controller
 */
class TableControllerTest extends TestCase
{

    public function mockUploadImage()
    {
        $maker = new \GearBaseTest\UploadImageMock();
        return $maker->mockUploadFile(\MyModule\Module::getLocation());
    }

    public function mockTestUploadImageFactory($columns)
    {
        $this->getApplication()
        ->getServiceManager()
        ->setAllowOverride(true);

        $mockFilter = $this->getMockSingleClass('MyModule\Filter\TableFilter', array('isValid'));
        $mockFilter->expects($this->any())->method('isValid')->willReturn(true);


        $factory = $this->getApplication()
        ->getServiceManager()
        ->get('ServiceManager')->get('MyModule\Form\TableForm');

        $factory->setUseInputFilterDefaults(false);

        $filter = $factory->getInputFilter();

        foreach ($columns as $column) {
            $mockFileInput = $this->getMockSingleClass('Zend\InputFilter\FileInput', array('isValid', 'getName'));
            $mockFileInput->expects($this->any())->method('isValid')->willReturn(true);
            $mockFileInput->expects($this->any())->method('getName')->willReturn($column);
            $filter->getInputFilter()->remove($column)->add($mockFileInput);
        }

        $factory->setInputFilter($filter);

        $this->getApplication()
        ->getServiceManager()
        ->get('ServiceManager')->setService('MyModule\Form\TableForm', $factory);
    }

    public function setUp()
    {
        $this->setApplicationConfig(
            include \GearBase\Module::getProjectFolder().'/config/application.config.php'
        );
        parent::setUp();

        $this->controller = new TableController();
        $this->request    = new Request();
        $this->routeMatch = new RouteMatch(array('controller' => 'TableController'));
        $this->event      = new MvcEvent();

        $this->event->setRouteMatch($this->routeMatch);
        $this->controller->setEvent($this->event);

        $this->tableForm = $this->prophesize('MyModule\Form\TableForm');
        $this->imageService = $this->prophesize('GearImage\Service\ImageService');
        $this->controller->setImageService($this->imageService->reveal());
        $this->tableSearchForm = $this->prophesize('MyModule\Form\Search\TableSearchForm');
        $this->tableService = $this->prophesize('MyModule\Service\TableService');

        $requestPlugin = new \GearBase\Controller\Plugin\RequestPlugin();
        $this->controller->getPluginManager()->setService('getRequestPlugin', $requestPlugin);

        $this->url = $this->prophesize('Zend\Mvc\Controller\Plugin\Url');
        $this->controller->getPluginManager()->setService('url', $this->url->reveal());

        $this->controller->setTableForm($this->tableForm->reveal());
        $this->controller->setTableService($this->tableService->reveal());
        $this->controller->setTableSearchForm($this->tableSearchForm->reveal());
    }

    protected function tearDown()
    {
        $refl = new \ReflectionObject($this);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() && 0 !== strpos($prop->getDeclaringClass()->getName(), 'PHPUnit_')) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
    }

    /**
     * @group controller.create
     */
    public function testEnterCreatePage()
    {
        $this->routeMatch->setParam('action', 'create');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
    public function testSendPostToCreatePageRedirectToGet()
    {
        $this->url->fromRoute(TableController::CREATE)->willReturn(TableController::CREATE);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();
        $this->response = $this->prophesize('Zend\Http\PhpEnvironment\Response');
        $this->response->getStatusCode()->willReturn(303);
        $this->prg->__invoke($this->tableForm, 'my-module/table/create', true)->willReturn($this->response->reveal());
        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());
        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
        $this->assertEquals(303, $result->getStatusCode());
    }

    /**
     * @group controller.create
     */
    public function testSendPostToCreateShowValidation()
    {
        $this->url->fromRoute(TableController::CREATE)->willReturn(TableController::CREATE);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();
        $this->prg->__invoke($this->tableForm, 'my-module/table/create', true)->willReturn([***REMOVED***);
        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
    public function testCreateSuccessful()
    {
        $this->url->fromRoute(TableController::CREATE)->willReturn(TableController::CREATE);
        $this->url->fromRoute("my-module/table/edit", ["id" => 31, "success" => 1***REMOVED***, [***REMOVED***, false)
          ->willReturn(TableController::EDIT.'/31/1');

        $this->url->setController($this->controller)->shouldBeCalled();

        $data = array(
        );

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\FilePostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();

        $this->prg->__invoke($this->tableForm, 'my-module/table/create', true)->willReturn($data);

        $this->controller->getPluginManager()->setService('filepostredirectget', $this->prg->reveal());

        $this->entity = $this->prophesize('MyModule\Entity\Table');
        $this->entity->getIdTable()->willReturn(31)->shouldBeCalled();

        $this->tableForm->setData($data)->shouldBeCalled();
        $this->tableForm->isValid()->willReturn(true)->shouldBeCalled();
        $this->tableForm->getData()->willReturn($data)->shouldBeCalled();
        $this->tableService->create($data)->willReturn($this->entity)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditDisplaySuccessful()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'edit');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditRedirectWithInvalidIdToListing()
    {
        $this->url->fromRoute(TableController::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(TableController::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->tableService->selectById(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 6000);
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    public function testWhenListDisplaySuccessful()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('MyModule\Service\TableService');
        $this->dispatch('/my-module/table/listar');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('list');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/list');
    }


    public function testWhenFilterWithoutData()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('MyModule\Service\TableService');
        $this->dispatch('/my-module/table/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('list');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/list');
    }


    public function testWhenFilterWithoutDataWithPRG()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('MyModule\Service\TableService');
        $this->dispatch('/my-module/table/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('list');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/list');
    }


    public function testDeleteSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/my-module/table/excluir/6000');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('delete');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/delete');
    }


    public function testWhenDeleteDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/my-module/table/excluir');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('delete');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/delete');
    }


    public function testViewSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/my-module/table/visualizar/6000');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertRedirectTo('/my-module/table/listar/page//orderBy');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('view');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/view');
    }

    public function testWhenViewDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/my-module/table/visualizar');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('view');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/view');
    }

   /**
     * @depends testCreateSuccess
     */
    public function testWhenListDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();

        $this->dispatch(
            '/my-module/table/editar/'.$resultSet->getIdTable()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('edit');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/edit');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenViewDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/my-module/table/visualizar/'.$resultSet->getIdTable()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('view');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/view');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenListRedirectSuccessfulPRGWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/my-module/table/editar/'.$resultSet->getIdTable(),
            'POST'
        );

        $this->assertResponseStatusCode(303);
        $this->assertRedirectTo(
            '/my-module/table/editar/'.$resultSet->getIdTable()
        );
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('edit');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/edit');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testEditAfterCreateOk($resultSet)
    {

        $newData = array(
            'dateColumn' => '2012-10-28',
            'datePtBrColumn' => '28/10/2012',
            'datetimeColumn' => '2012-10-28 10:00:58',
            'datetimePtBrColumn' => '28/10/2012 10:00:58',
            'timeColumn' => '10:00:58',
            'decimalColumn' => '58.58',
            'moneyPtBrColumn' => 'R$ 58,58',
            'checkboxColumn' => '0',
            'idForeignKeyColumn' => '28',
            'intColumn' => '58',
            'htmlColumn' => '58Html Column',
            'textColumn' => '58Text Column',
            'tinyintColumn' => '0',
            'checkboxColumn' => '0',
            'emailColumn' => 'email.column58@gmail.com',
            'passwordVerifyColumn' => '58PasswordVerifyColu',
            'passwordVerifyColumnVerify' => '58PasswordVerifyColu',
            'telephoneColumn' => '(51) 9999-9958',
            'uploadImageColumn' => array(
                'error' => 0,
                'name' => 'uploadImageColumn58insert.gif',
                'tmp_name' => $this->mockUploadImage(),
                'type'      =>  'image/gif',
                'size'      =>  42,
            ),
            'urlColumn' => 'url.column58.com.br',
            'varcharColumn' => '58Varchar Column',
        );
        $this->mockUser();
        $this->mockPluginPostRedirectGet($newData);
        $this->mockPluginFilePostRedirectGet($newData);
        $this->mockTestUploadImageFactory(array('uploadImageColumn'));
        $this->dispatch(
            '/my-module/table/editar/'.$resultSet->getIdTable(),
            'POST',
            $newData
        );
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('edit');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/edit');

        $this->assertRedirectTo(
            sprintf(
                '/my-module/table/editar/%d/1',
                $resultSet->getIdTable()
            )
        );
    }
    public function testCantCreateWithWrongImage()
    {
        $newData = array(

        );
        $this->mockUser();
        $this->mockPluginPostRedirectGet($newData);
        $this->mockPluginFilePostRedirectGet($newData);
        $this->dispatch('/my-module/table/criar', 'POST', $newData);
        $this->assertResponseStatusCode(200);

        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('create');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/create');
    }

    /**
     * @group UploadImage
     */
    public function testAccessUploadImageWithoutIdReturnToList()
    {
        $this->mockUser();
        $this->dispatch('/my-module/table/upload-image');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/my-module/table/listar/page//orderBy');
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('upload-image');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/upload-image');
    }

    /**
     * @group UploadImage
     */
    public function testAccessUploadImageWithInvalidIdReturnToList()
    {
        $this->mockUser();
        $this->dispatch('/my-module/table/upload-image/6000');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/my-module/table/listar/page//orderBy');

        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('upload-image');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/upload-image');
    }

    /**
     * @depends testCreateSuccess
     * @group UploadImage
     */
    public function testPostUploadImageReturnPRGPlugin($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/my-module/table/upload-image/'.$resultSet->getIdTable(),
            'POST',
            array()
        );

        $this->assertResponseStatusCode(303);
        $this->assertRedirectTo(
            '/my-module/table/upload-image/'.$resultSet->getIdTable()
        );

        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('upload-image');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/upload-image');
    }

    /**
     * @depends testCreateSuccess
     * @group UploadImage
     */
    public function testPostUploadImageProcessSuccess($resultSet)
    {

        $this->mockUser();
        $this->mockPluginPostRedirectGet(array());
        $this->dispatch(
            '/my-module/table/upload-image/'.$resultSet->getIdTable(),
            'POST',
            array()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('upload-image');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/upload-image');
    }
     /**
     * @depends testCreateSuccess
     */
    public function testDeleteAfterEditOk($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            sprintf(
                '/my-module/table/excluir/%d',
                $resultSet->getIdTable()
            )
        );
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MyModule');
        $this->assertControllerName('MyModule\Controller\Table');
        $this->assertActionName('delete');
        $this->assertControllerClass('TableController');
        $this->assertMatchedRouteName('my-module/table/delete');
    }
}

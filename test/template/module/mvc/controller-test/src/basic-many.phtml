<?php
namespace MyModuleTest\ControllerTest;

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase as TestCase;
use MyModule\Controller\BasicManyAction;
use Zend\Http\Request;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;
use GearBaseTest\Assertions\AclAssertTrait;

/**
 * @group BasicManyAction
 * @group Controller
 */
class BasicManyActionTest extends TestCase
{
    use AclAssertTrait;

    protected $controller;
    protected $request;
    protected $response;
    protected $routeMatch;
    protected $event;

    public function setUp()
    {
        $this->setApplicationConfig(
            include \GearBase\Module::getProjectFolder().'/config/application.config.php'
        );

        parent::setUp();

        $this->controller = new BasicManyAction();
        $this->request    = new Request();
        $this->routeMatch = new RouteMatch(array('controller' => 'BasicManyAction'));
        $this->event      = new MvcEvent();
        $this->event->setRouteMatch($this->routeMatch);
        $this->controller->setEvent($this->event);

        $this->schema = (new \MyModule\Module())->getLocation().'/../../schema/module.json';
    }

    public function test404()
    {
        $this->routeMatch->setParam('action', 'action-that-doesnt-exist');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(404, $response->getStatusCode());
    }

    public function testFirstActionAction()
    {
        $this->assertAcl($this->schema, 'MyModule', 'BasicManyAction', 'FirstAction');

        $this->routeMatch->setParam('action', 'first-action');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    public function testSecondActionAction()
    {
        $this->assertAcl($this->schema, 'MyModule', 'BasicManyAction', 'SecondAction');

        $this->routeMatch->setParam('action', 'second-action');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    public function testThirdActionAction()
    {
        $this->assertAcl($this->schema, 'MyModule', 'BasicManyAction', 'ThirdAction');

        $this->routeMatch->setParam('action', 'third-action');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    public function testFourActionAction()
    {
        $this->assertAcl($this->schema, 'MyModule', 'BasicManyAction', 'FourAction');

        $this->routeMatch->setParam('action', 'four-action');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    public function testFiveActionAction()
    {
        $this->assertAcl($this->schema, 'MyModule', 'BasicManyAction', 'FiveAction');

        $this->routeMatch->setParam('action', 'five-action');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }
}

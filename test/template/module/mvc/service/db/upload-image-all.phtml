<?php
namespace MyModule\MyTableAll;

use GearBase\Service\AbstractService;
use MyModule\Entity\MyTableAll;
use MyModule\MyTableAll\MyTableAllRepositoryTrait;
use GearImage\Service\ImageServiceTrait;
use MyModule\MyTableAll\MyTableAllRepository;
use Zend\Cache\Storage\Adapter\Memcached;
use Zend\Authentication\AuthenticationService;
use GearImage\Service\ImageService;

/**
 * Interaction between MyTableAllController and Services
 *
 * PHP Version 5
 *
 * @category Service
 * @package MyModule/MyTableAll
 * @author Mauricio Piber <mauriciopiber@gmail.com>
 * @license GPL3-0 http://www.gnu.org/licenses/gpl-3.0.en.html
 * @link http://pibernetwork.com
 */
class MyTableAllService extends AbstractService
{
    use MyTableAllRepositoryTrait;

    use ImageServiceTrait;

    protected $sessionName;

    protected $authService;

    const IMAGES = [
        'myImageOne',
        'myImageTwo'
    ***REMOVED***;

    /**
     * Constructor
     *
     * @param MyTableAllRepository  $myTableAllRepository My Table All Repository
     * @param Memcached             $cache                Memcached
     * @param AuthenticationService $zfcuserAuthService   Authentication Service
     * @param ImageService          $imageService         Image Service
     *
     * @return MyTableAllService
     */
    public function __construct(
        MyTableAllRepository $myTableAllRepository,
        Memcached $cache,
        AuthenticationService $zfcuserAuthService,
        ImageService $imageService
    ) {
        $this->myTableAllRepository = $myTableAllRepository;
        $this->cache = $cache;
        $this->zfcuserAuthService = $zfcuserAuthService;
        $this->imageService = $imageService;

        return $this;
    }

    /**
     * Get the values used to generate Html Table on List Action.
     *
     * @return array
     */
    public function getTableHead()
    {
        $map = $this->getMyTableAllRepository()->getMapReferences();
        return $this->getTableHeadFromMap($map);
    }

    /**
     * Get the Service session name.
     *
     * @return string
     */
    public function getSessionName()
    {
        if (!isset($this->sessionName)) {
            $this->sessionName = 'myTableAllSession';
        }
        return $this->sessionName;
    }

    /**
     * Select one row based on criteria.
     *
     * @param array $data Criteria
     *
     * @return null|MyModule\Entity\MyTableAll
     */
    public function selectOneBy(array $data)
    {
        return $this->getMyTableAllRepository()->selectOneBy($data);
    }

    /**
     * Select All Rows from My Table All table.
     *
     * Use cache to store data until change.
     *
     * @param array $select Criteria
     *
     * @return array
     */
    public function selectAll($select = [***REMOVED***)
    {
        $this->cache      = $this->getCache();
        $this->repository = $this->getMyTableAllRepository();

        return parent::selectAll($select);
    }

    /**
     * Create a new My Table All on database.
     *
     * Apply additional logic and then send forward to Repository. Clear Service Cache if successful created.
     *
     * @param array $data Valid $_POST
     *
     * @return null|MyModule\Entity\MyTableAll
     */
    public function create($data)
    {
        $repository = $this->getMyTableAllRepository();

        $images = $this->getImageService()->replaceDataForm(
            $data,
            'my-table-all',
            self::IMAGES
        );

        $myTableAll = $repository->insert($data);
        if ($myTableAll) {
            $this->getImageService()->saveImageColumns(
                $images,
                'my-table-all'
            );
            $this->clearCache();
        }
        return $myTableAll;
    }

    /**
     * Update a existing My Table All on database.
     *
     * Apply additional logic and then send forward to Repository. Clear Service Cache if successful updated.
     *
     * @param integer $idTable Id
     * @param array   $data    Valid $_POST
     *
     * @return null|MyModule\Entity\MyTableAll
     */
    public function update($idTable, $data = [***REMOVED***)
    {
        $repository = $this->getMyTableAllRepository();

        $images = $this->getImageService()->replaceDataForm(
            $data,
            'my-table-all',
            self::IMAGES
        );

        $myTableAll = $repository->update($idTable, $data);
        if ($myTableAll) {
            $this->getImageService()->saveImageColumns(
                $images,
                'my-table-all'
            );
            $this->clearCache();
        }
        return $myTableAll;
    }

    /**
     * Delete a existing My Table All by Id.
     *
     * @param integer $idTable Id
     *
     * @return array
     */
    public function delete($idTable)
    {
        $entity = $this->selectById($idTable);

        if (!$entity) {
            return ['success' => false, 'error' => 'EntityNotFound'***REMOVED***;
        }

        $repository = $this->getMyTableAllRepository();
        $myTableAll = $repository->deleteSafe($entity);


        if ($myTableAll) {
            $this->getImageService()->deleteImages($idTable, 'myTableAll');
            $this->getImageService()->deleteImagesTableColumn(
                $entity,
                self::IMAGES,
                'my-table-all'
            );
            $this->clearCache();
        }
        return $myTableAll;
    }

    /**
     * Convert Entity to Array.
     *
     * @param MyTableAll $data My Table All Entity
     *
     * @return array
     */
    public function extract(MyTableAll $data)
    {
        $repository = $this->getMyTableAllRepository();
        return $repository->extract($data);
    }

    /**
     * Select one My Table All by Id.
     *
     * @param array $idToSelect Id
     *
     * @return null|MyModule\Entity\MyTableAll
     */
    public function selectById($idToSelect)
    {
        $repository = $this->getMyTableAllRepository();
        return $repository->selectById($idToSelect);
    }
}

<?php
namespace MyModuleTest\ServiceTest;

use GearBaseTest\AbstractTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group MyModule
 * @group MyService
 * @group Service
 */
class MyServiceTest extends AbstractTestCase
{
    protected $myService;

    public function setUp()
    {
        parent::setUp();
        $this->cache = $this->prophesize('Zend\Cache\Storage\Adapter\Memcached');
    }

    public function getMyService()
    {
        if (!isset($this->myService)) {
            $this->myService =
                $this->bootstrap->getServiceLocator()->get(
                    'MyModule\Service\MyService'
                );
        }
        return $this->myService;
    }

    /**
     * @group MyModule
     * @group MyService
     */
    public function testServiceLocator()
    {
        $serviceLocator = $this->getMyService()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    /**
     * @group MyModule
     * @group MyService
    */
    public function testCallUsingServiceLocator()
    {
        $myService = $this->getMyService();
        $this->assertInstanceOf('MyModule\Service\MyService', $myService);
    }


    public function testSetSelectAllCache()
    {
        $this->getMyService()->setSessionName('testing');

        $cache = $this->bootstrap->getServiceLocator()->get('memcached');

        if ($cache->hasItem('testingResult')) {
            $cache->removeItem('testingResult');
        }

        $data = $this->getMyService()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
        $data = $this->getMyService()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
    }

    public function testSelectAllCacheWithCache()
    {
        $this->getMyService()->setRouteMatch($this->getRouteMatch(1, 'idMyController', 'DESC'));

        $this->assertEquals('idMyController', $this->getMyService()->getOrderBy());
        $this->assertEquals('DESC', $this->getMyService()->getOrder());

        $this->getMyService()->selectAll();

        $this->getMyService()->setRouteMatch($this->getRouteMatch(1, 'idMyController', 'ASC'));

        $this->assertEquals('idMyController', $this->getMyService()->getOrderBy());
        $this->assertEquals('ASC', $this->getMyService()->getOrder());

        $cache = $this->bootstrap->getServiceLocator()->get('memcached');

        if ($cache->hasItem($this->getMyService()->getSessionName())) {
            $cache->removeItem($this->getMyService()->getSessionName());
        }

        $this->getMyService()->setRouteMatch(
            $this->getRouteMatch(1, 'idMy', 'DESC')
        );

        $this->assertEquals(
            'idMy',
            $this->getMyService()->getOrderBy()
        );
        $this->assertEquals('DESC', $this->getMyService()->getOrder());
    }

    public function testGetMappingInfo()
    {
        $myService = $this->getMyService();
        $resultSet = $myService->getTableHead();
        $this->assertTrue(is_array($resultSet));
    }

    public function testSelectById()
    {
        $myService = $this->getMyService();

        $resultSet = $myService->selectById(1);
        $this->assertInstanceOf('MyModule\Entity\My', $resultSet);
        $this->assertEquals(1, $resultSet->getIdMy());
    }

    public function testSelectOneByIdMyController()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'idMyController' =>
                    15
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            15,
            $resultSet->getIdMyController()
        );
    }
    public function testSelectOneByHtmlColumn()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'htmlColumn' =>
                    '15Html Column'
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            '15Html Column',
            $resultSet->getHtmlColumn()
        );
    }
    public function testSelectOneByTextColumn()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'textColumn' =>
                    '15Text Column'
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            '15Text Column',
            $resultSet->getTextColumn()
        );
    }
    public function testSelectOneByEmailColumn()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'emailColumn' =>
                    'email.column15@gmail.com'
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            'email.column15@gmail.com',
            $resultSet->getEmailColumn()
        );
    }
    public function testSelectOneByTelephoneColumn()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'telephoneColumn' =>
                    '(51) 9999-9915'
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            '(51) 9999-9915',
            $resultSet->getTelephoneColumn()
        );
    }
    public function testSelectOneByUploadImageColumn()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'uploadImageColumn' =>
                    '/upload/table-uploadImageColumn/%s15uploadImageColumn.gif'
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            '/upload/table-uploadImageColumn/%s15uploadImageColumn.gif',
            $resultSet->getUploadImageColumn()
        );
    }
    public function testSelectOneByUrlColumn()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'urlColumn' =>
                    'url.column15.com.br'
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            'url.column15.com.br',
            $resultSet->getUrlColumn()
        );
    }
    public function testSelectOneByVarcharColumn()
    {
        $resultSet = $this->getMyServiceService()->selectOneBy(
            array(
                'varcharColumn' =>
                    '15Varchar Column'
            )
        );
        $this->assertInstanceOf('MyModule\Entity\MyService', $resultSet);
        $this->assertEquals(
            '15Varchar Column',
            $resultSet->getVarcharColumn()
        );
    }

    /**
     * @group service.create
     */
    public function testCreate()
    {
        $entity = $this->prophesize('MyModule\Entity\My');
        $entity->getIdMy()->willReturn(31);

        $data = array(
        );

        $this->repository = $this->prophesize('MyModule\Repository\MyRepository');
        $this->repository->insert($data)->willReturn($entity)->shouldBeCalled();

        $this->getMyService()->setMyRepository($this->repository->reveal());

        $this->imageService = $this->prophesize('GearImage\Service\ImageService');
        $this->getMyService()->setImageService($this->imageService->reveal());

        $resultSet = $this->getMyService()->create($data);

        $this->assertInstanceOf('MyModule\Entity\My', $resultSet);
        $this->assertEquals(31, $resultSet->getIdMy());

        return $resultSet;
    }

    /**
     * @group service.update
     */
    public function testUpdate()
    {
        $entity = $this->prophesize('MyModule\Entity\My');
        $entity->getIdMy()->willReturn(31);

        $data = array(
        );

        $this->repository = $this->prophesize('MyModule\Repository\MyRepository');
        $this->repository->update(31, $data)->willReturn($entity)->shouldBeCalled();

        $this->getMyService()->setMyRepository($this->repository->reveal());

        $this->getMyService()->setCache($this->cache->reveal());

        $this->imageService = $this->prophesize('GearImage\Service\ImageService');
        $this->getMyService()->setImageService($this->imageService->reveal());

        $resultSet = $this->getMyService()
            ->update(31, $data);


        $this->assertInstanceOf('MyModule\Entity\My', $resultSet);
        $this->assertEquals(31, $resultSet->getIdMy());

        return $resultSet;
    }

    /**
     * @group service.delete
     */
    public function testDelete()
    {
        $entity = $this->prophesize('MyModule\Entity\My');
        $entity->getIdMy()->willReturn(31);

        $this->repository = $this->prophesize('MyModule\Repository\MyRepository');
        $this->repository->selectById(31)->willReturn($entity->reveal())->shouldBeCalled();
        $this->repository->deleteSafe($entity->reveal())->willReturn(true)->shouldBeCalled();

        $this->getMyService()->setCache($this->cache->reveal());
        $this->getMyService()->setMyRepository($this->repository->reveal());

        $myService = $this->getMyService();

        $resultSet = $myService->delete(31);
        $this->assertTrue($resultSet);
    }

    /**
     * @group service.delete
     */
    public function testDeleteWithoutExistingData()
    {

        $this->repository = $this->prophesize('MyModule\Repository\MyRepository');
        $this->repository->selectById(31)->willReturn(false)->shouldBeCalled();

        $this->getMyService()->setMyRepository($this->repository->reveal());

        $myService = $this->getMyService();

        $resultSet = $myService->delete(31);
        $this->assertFalse($resultSet['success'***REMOVED***);
        $this->assertEquals('EntityNotFound', $resultSet['error'***REMOVED***);
    }

    /**
     * @group service.extract
     */
    public function testExtract()
    {
        $entity = $this->prophesize('MyModule\Entity\My');
        $entity->getIdMy()->willReturn(31);

        $data = ['idMyService' => 31***REMOVED***;
        $this->repository = $this->prophesize('MyModule\Repository\MyRepository');
        $this->repository->extract($entity)->willReturn($data)->shouldBeCalled();


        $this->getMyService()->setMyRepository($this->repository->reveal());

        $myService = $this->getMyService();

        $resultSet = $myService->extract($entity->reveal());
        $this->assertEquals($data, $resultSet);
    }

    public function getRouteMatch($page, $orderBy = 'idMy', $order = 'DESC')
    {
        $routeMatch = new \Zend\Mvc\Router\Http\RouteMatch(array(
            'controller' => 'MyModule\Controller\My',
            'action'     => 'list',
            'page' => $page,
            'orderBy' => $orderBy,
            'order' => $order
        ));

        $routeMatch->setMatchedRouteName('my-module/my');
        return $routeMatch;
    }
}

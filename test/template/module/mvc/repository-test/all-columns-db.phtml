<?php
namespace MyModuleTest\RepositoryTest;

use GearBaseTest\AbstractTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group MyModule
 * @group Table
 * @group Repository
 */
class TableRepositoryTest extends AbstractTestCase
{
    protected $table;

    public function getTable()
    {
        if (!isset($this->table)) {
            $this->table =
                $this->bootstrap->getServiceLocator()->get('MyModule\Repository\TableRepository');
        }
        return $this->table;
    }

    public function testServiceLocator()
    {
        $serviceLocator = $this->getTable()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    public function testCallUsingServiceLocator()
    {
        $table = $this->getTable();
        $this->assertInstanceOf('MyModule\Repository\TableRepository', $table);
    }


    public function testSelectAll()
    {
        $resultSet = $this->getTable()->selectAll();
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
    }


    public function testSelectAllWithBasicFilter()
    {
        $resultSet = $this->getTable()->selectAll(array('likeField' => ''));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
    }

    public function testSelectAllWithBasicFilterFoundNone()
    {
        $resultSet = $this->getTable()->selectAll(array('likeField' => 'abcdefAhauhsdfguagdfaf'));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(0, count($resultSet));
    }

    public function testSelectByIdReturnEntity()
    {
        $resultSet = $this->getTable()->selectById(1);
        $this->assertNotNull($resultSet);
        $this->assertInstanceOf('MyModule\Entity\Table', $resultSet);

        $this->assertEquals(1, $resultSet->getIdTable());
    }

    public function testSelectByIdReturnNull()
    {
        $resultSet = $this->getTable()->selectById(60000);
        $this->assertNull($resultSet);
    }

    public function testSelectOneByIdMyController()
    {
        $resultSet = $this->getTable()->selectOneBy(
            array(
                'idMyController' =>
                    15
            )
        );
        $this->assertInstanceOf('MyModule\Entity\Table', $resultSet);
        $this->assertEquals(
            15,
            $resultSet->getIdMyController()
        );
    }

    public function testSelectAllOrderByIdMyControllerASC()
    {
        $resultSet = $this->getTable()->selectAll(
            array(),
            'idMyController',
            'ASC'
        );
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
        $data = array_shift($resultSet);
        $this->assertEquals(
            '1',
            $data['idMyController'***REMOVED***
        );
    }

    public function testSelectAllOrderByIdMyControllerDESC()
    {
        $resultSet = $this->getTable()->selectAll(
            array(),
            'idMyController',
            'DESC'
        );
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
        $data = array_shift($resultSet);
        $this->assertEquals(
            '30',
            $data['idMyController'***REMOVED***
        );
    }

    public function testCreateNewData()
    {
        $entity = new \MyModule\Entity\Table;

        $data = array();

        $entityManager = $this->prophesize('Doctrine\ORM\EntityManager');

        $hydrator = $this->prophesize('GearBase\Hydrator\DateHydrator');
        $hydrator->hydrate($data, $entity)->willReturn($entity);

        $this->getTable()->setGearAdminHydrator($hydrator->reveal());
        $this->getTable()->setEntityManager($entityManager->reveal());

        $resultSet = $this->getTable()->insert($data);

        $this->assertInstanceOf('MyModule\Entity\Table', $resultSet);
        $this->assertEquals(null, $resultSet->getIdTable());
    }

    public function testUpdateExistData()
    {
        $entity = $this->getMockBuilder('MyModule\Entity\Table', ['getIdTable'***REMOVED***)->getMock();
        $entity->expects($this->any())->method('getIdTable')->willReturn(31);

        $data = array(
        );

        $entityManager = $this->prophesize('Doctrine\ORM\EntityManager');
        $entityManager->persist($entity)->willReturn(true);
        $entityManager->flush()->willReturn(true);
        $this->getTable()->setEntityManager($entityManager->reveal());

        $hydrator = $this->prophesize('GearBase\Hydrator\DateHydrator');
        $hydrator->hydrate($data, $entity)->willReturn($entity);
        $this->getTable()->setGearAdminHydrator($hydrator->reveal());


        $entityRepository = $this->prophesize('Doctrine\\ORM\\EntityRepository');
        $entityRepository->findOneBy(['idTable' => 31***REMOVED***)->willReturn($entity);
        $this->getTable()->setRepository($entityRepository->reveal());


        $resultSet = $this->getTable()->update(31, $data);

        $this->assertInstanceOf('MyModule\Entity\Table', $resultSet);
        $this->assertEquals(31, $resultSet->getIdTable());
    }

    public function testDeleteNoExistData()
    {
        $entityRepository = $this->prophesize('Doctrine\ORM\EntityRepository');
        $entityRepository->findOneBy(['idTable' => 6000***REMOVED***)->willReturn(null);

        $this->getTable()->setRepository($entityRepository->reveal());

        $resultSet = $this->getTable()->delete(6000);
        $this->assertFalse($resultSet);
    }

    public function testDeleteExistData()
    {
        $data = [***REMOVED***;

        $entity = $this->prophesize('MyModule\Entity\Table');
        $entity->getIdTable()->willReturn(31);

        $entityRepository = $this->prophesize('Doctrine\ORM\EntityRepository');
        $entityRepository->findOneBy(['idTable' => 31***REMOVED***)->willReturn($entity->reveal());

        $this->getTable()->setRepository($entityRepository->reveal());

        $entityManager = $this->prophesize('Doctrine\ORM\EntityManager');
        $entityManager->remove($entity)->willReturn(true);
        $entityManager->flush()->willReturn(true);

        $this->getTable()->setEntityManager($entityManager->reveal());

        $resultSet = $this->getTable()->delete($entity);
        $this->assertTrue($resultSet);
    }
}

<?php
namespace MyModule\Form;

use Zend\ServiceManager\ServiceLocatorInterface;
use GearBase\Hydrator\DateHydrator;
use GearBase\Factory\AbstractFactory;

/**
 * PHP Version 5
 *
 * @category Factory
 * @package MyModule/Form
 * @author Mauricio Piber <mauriciopiber@gmail.com>
 * @license GPL3-0 http://www.gnu.org/licenses/gpl-3.0.en.html
 * @link http://pibernetwork.com
 */
class MyTableFormFactory extends AbstractFactory
{

    /**
     * Create MyTableForm
     *
     * @param ServiceLocatorInterface $serviceLocator ServiceManager instance
     *
     * @return \MyModule\Form\MyTableForm     */
    public function createService(ServiceLocatorInterface $serviceLocator)
    {
        $form = new \MyModule\Form\MyTableForm(
            $serviceLocator->get('doctrine.entitymanager.orm_default')
        );

        $idMyTable = null;
        $request = $serviceLocator->get('Request');
        $translate = $serviceLocator->get('Translator');
        if ($request instanceof \Zend\Http\Request
            && preg_match('/'.$translate->translate('edit').'/', $request->getUri()->getPath())
        ) {
            if (preg_match('/[0-9***REMOVED****$/', $request->getUri()->getPath(), $match)) {
                $idMyTable = $match[0***REMOVED***;
            }
        }

        $filter = $serviceLocator->get('MyModule\Filter\MyTableFilter');
        $form->setInputFilter($filter->getInputFilter($idMyTable));

        $entityManager = $serviceLocator->get('doctrine.entitymanager.orm_default');
        $hydrator = new DateHydrator($entityManager, 'MyModule\Entity\MyTable');

        $form->setHydrator($hydrator);

        return $form;
    }
}

<?php
namespace MyModule\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Zend\Stdlib\ResponseInterface as Response;
use Zend\View\Model\JsonModel;
use GearImage\Service\ImageServiceTrait;

class TableController extends AbstractActionController
{
    const CREATE = 'my-module/table/create';
    const EDIT   = 'my-module/table/edit';
    const LISTS  = 'my-module/table/list';
    const IMAGE  = 'my-module/table/upload-image';

    use ImageServiceTrait;


    public function createAction()
    {
        $this->error = false;
        $this->getImageService()->dropUploadImageSession();

        $this->form    = $this->getTableForm();
        $this->service = $this->getTableService();
        $this->url     = self::CREATE;

        $create = $this->getRequestPlugin()->fileCreate();

        if ($create instanceof Response) {
            return $create;
        }

        if ($create) {
            $this->getImageService()->dropUploadImageSession();
            return $this->redirect()->toRoute(
                self::EDIT,
                array('id' => $create->getIdTable(), 'success' => 1)
            );
        }

        $this->getImageService()->verifyErrors($this->form, 'uploadImageColumn');
        $uploadImageColumn = $this->getImageService()->getTempUpload('uploadImageColumn');

        return new ViewModel(
            array(
                'error' => $this->error,
                'uploadImageColumn' => $uploadImageColumn,
                'form' => $this->form,
            )
        );
    }

    public function editAction()
    {
        $this->error = false;

        $idTable = $this->getEvent()->getRouteMatch()->getParam('id', null);

        if (!$idTable) {
            return $this->redirect()->toRoute(self::LISTS);
        }

        $this->data = $this->getTableService()->selectById($idTable);

        if (!$this->data) {
            return $this->redirect()->toRoute(self::LISTS);
        }

        $this->form      = $this->getTableForm();
        $this->service   = $this->getTableService();
        $this->url       = self::EDIT;
        $this->requestId = $idTable;

        $update = $this->getRequestPlugin()->fileUpdate();
        if ($update instanceof Response) {
            return $update;
        }

        if ($update) {
            $this->getImageService()->clearCache();
            return $this->redirect()->toRoute(
                self::EDIT,
                array('id' => $update->getIdTable(), 'success' => 1)
            );
        }

        $this->data = $this->getTableService()->selectById($idTable);
        $this->data->setPasswordVerifyColumn('');
        $this->form->bind($this->data);

        $uploadImageColumn = $this->getImageService()->getUploadImagePath($this->data, 'getUploadImageColumn');

        $sucesso = $this->getEvent()->getRouteMatch()->getParam('success', null);

        return new ViewModel(
            array(
                'form' => $this->form,
                'error' => $this->error,
                'success' => $sucesso,
                'uploadImageColumn' => $uploadImageColumn,
                'contexto' => 'table',
                'idTable' => $idTable
            )
        );
    }

    public function viewAction()
    {
        $idTable = $this->getEvent()->getRouteMatch()->getParam('id', null);

        if (!$idTable) {
            return $this->redirect()->toRoute(self::LISTS);
        }

        $data = $this->getTableService()->selectById($idTable);
        $images = $this->getImagemService()->query('table', array(), $idTable);

        if (!$data) {
            return $this->redirect()->toRoute(self::LISTS);
        }

        return new ViewModel(
            array_merge(
                array(
                    'id' => $data->getIdTable(),
                    'images' => $images,                ),
                $this->getTableService()->extract($data)
            )
        );
    }

    public function deleteAction()
    {
        $identifier = $this->getEvent()->getRouteMatch()->getParam('id', null);

        if (!$identifier) {
            return $this->redirect()->toRoute(self::LISTS);
        }

        $table = $this->getTableService();

        $delete = $table->delete($identifier);

        return new JsonModel(array_merge($delete, ['id' => $identifier***REMOVED***));
    }

    public function uploadImageAction()
    {
        $this->getImagemService()->appendPlugin();

        $idTable = $this->getEvent()->getRouteMatch()->getParam('id', null);

        if (!$idTable) {
            return $this->redirect()->toRoute(self::LISTS);
        }

        $data = $this->getTableService()->selectById($idTable);

        if (!$data) {
            return $this->redirect()->toRoute(self::LISTS);
        }

        $redirectUrl = $this->url()->fromRoute(self::IMAGE, array('id' => $idTable));
        $prg = $this->prg($redirectUrl, true);

        $success = 0;

        if ($prg instanceof Response) {
            return $prg;
        } elseif ($prg !== false) {
            $post = $prg;
            $imagemService = $this->getImagemService();
            $imagemService->updateImages('table', $idTable);
            $success = $imagemService->updatePosition($post);
            $this->getImagemService()->clearCache();
        }

        return new ViewModel(
            array(
                'idTable' => $idTable,
                'contexto' => 'table',
                'success' => $success
            )
        );
    }

    public function listAction()
    {
        $data = $this->getRequestPlugin()->prepareJson(
            $this->getTableService()->selectAll()
        );

        return new ViewModel(
            array(
                'search'    => $this->getTableSearchForm(),
                'tableService' => $this->getTableService(),
                'data'      => $data,
            )
        );
    }
}

#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require __DIR__.'/generate-functions';
require __DIR__.'/generate-columns';


function MvcDependency()
{
    return [
        'Entity' => null,
        'Fixture' => ['Entity'***REMOVED***,
        'Repository' => ['Entity'***REMOVED***,
        'Service' => ['Entity', 'Repository'***REMOVED***,
        'Filter' => ['Entity'***REMOVED***,
        'Form' => ['Filter', 'Entity'***REMOVED***,
        'SearchForm' => ['Entity'***REMOVED***,
        'Controller' => ['Entity', 'Fixture', 'Repository', 'Service', 'Filter', 'Form', 'SearchForm'***REMOVED***
    ***REMOVED***;
}

function runSrcMvcSuite($types, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    
    $string = new GearBase\Util\String\StringService();
    
    $superType = [***REMOVED***;
    
    $srcMajorSuite = new Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite(
        $suiteColumns,
        $suiteUserTypes,
        $suiteConstraints,
        $suiteTables
    );
    
    foreach ($types as $type) {
        
        
        $srcMvcMinor = new Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite($type);
    
        $superType[***REMOVED*** = generateSrcMvc($srcMajorSuite, $srcMvcMinor);
    }
}


function generateSrcMvc(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
) {
    //config first
    //execute the creating later
    


    createSrcMvcGearfile($srcMvcMajor, $srcMvcMinor);
    
    if ($srcMvcMinor->getType() == 'Entity') {
        createSrcMvcMigrationFile($srcMvcMajor, $srcMvcMinor);
    }
    
    createSrcMvcTestFile($srcMvcMajor, $srcMvcMinor);
}

function createSrcMvcMigrationFile(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
){

    $migrationConfig = [***REMOVED***;
    $migrationConfig = array_merge($migrationConfig, createMigrationTable($mvcMinorSuite));
    
    if (!empty($mvcMinorSuite->getForeignKeys())) { 
        foreach ($mvcMinorSuite->getForeignKeys() as $foreignKey) {        
            $migrationConfig = array_merge($migrationConfig, createForeignKeyMigration($foreignKey));
        }
    }
    
    $resolveNames = createResolveNames();
    
    $migrationsTables = [***REMOVED***;
    
    foreach ($srcMvcMajor->getColumns() as $column) {
        foreach ($srcMvcMajor->getUserTypes() as $usertype) {
            foreach ($srcMvcMajor->getConstraints() as $constraint) {
                foreach ($srcMvcMajor->getTableAssocs() as $tables) {
                
                    $majorTitle = 'src-mvc';
                    $srcMvcMinor = new Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite(
                        $srcMvcMinor->getType(),
                        $majorTitle,
                        $column, 
                        $usertype, 
                        $constraint, 
                        $tables
                    );
                    
                    $columnsSuffix = $resolveNames->createTableUrl($srcMvcMinor);

                    $srcMvcMinor->setTableName($resolveNames->createTableName('SrcMvc', $srcMvcMinor));
                    $srcMvcMinor->setLocationKey($resolveNames->createLocationKey($majorTitle, $srcMvcMinor));
                    $srcMvcMinor->setForeignKeys(getForeignKeys($srcMvcMinor->getColumnType()));
                    $srcMvcMinor->setColumns(getColumns($srcMvcMinor->getColumnType(), $columnsSuffix));    
                    
     
                     $migrationConfig = array_merge($migrationConfig, createMigrationTable($mvcMinorSuite));
    
                    if (!empty($mvcMinorSuite->getForeignKeys())) { 
                        foreach ($mvcMinorSuite->getForeignKeys() as $foreignKey) {        
                            $migrationConfig = array_merge($migrationConfig, createForeignKeyMigration($foreignKey));
                        }
                    }               
                    
                    
                }
            }
        }
    }
    var_dump($migrationsTables);
   
    
    //return createMigrationComponent($mvcMinorSuite, $migrationConfig);
}

function createSrcMvcGearFile(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
) {

}

function createSrcMvcTestFile(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
) {
    
}


runSrcMvcSuite(
    ['Service', 'Repository', 'Form', 'Filter', 'SearchForm', 'Entity', 'Fixture'***REMOVED***,
    [
        'complete',
        'basic',
    ***REMOVED***,    
    ['all', 'low-strict', 'strict'***REMOVED***,
    [null, ['unique'***REMOVED***, ['nullable'***REMOVED***, ['unique', 'nullable'***REMOVED******REMOVED***,
    [null, 'upload_image'***REMOVED***        
);




#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require __DIR__.'/generate-functions';
require __DIR__.'/generate-columns';


function MvcDependency()
{
    return [
        'Entity' => null,
        'Fixture' => ['Entity'***REMOVED***,
        'Repository' => ['Entity'***REMOVED***,
        'Service' => ['Entity', 'Repository'***REMOVED***,
        'Filter' => ['Entity'***REMOVED***,
        'Form' => ['Filter', 'Entity'***REMOVED***,
        'SearchForm' => ['Entity'***REMOVED***,
        'Controller' => ['Entity', 'Fixture', 'Repository', 'Service', 'Filter', 'Form', 'SearchForm'***REMOVED***
    ***REMOVED***;
}

function runSrcMvcSuite($types, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    
    $string = new GearBase\Util\String\StringService();
    
    $superType = [***REMOVED***;
    
    $srcMvcMajor = new Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite(
        null,
        $suiteColumns,
        $suiteUserTypes,
        $suiteConstraints,
        $suiteTables
    );
    
    foreach ($types as $type) {
        
        
        $srcMvcMinor = new Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite($srcMvcMajor, $type);
    
        $superType[***REMOVED*** = generateSrcMvc($srcMvcMajor, $srcMvcMinor);
    }
}


function generateSrcMvc(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
) {
    //config first
    //execute the creating later
    


    createSrcMvcGearfile($srcMvcMajor, $srcMvcMinor);
    
    if ($srcMvcMinor->getType() == 'Entity') {
        createSrcMvcMigrationFile($srcMvcMajor, $srcMvcMinor);
    }
    
    createSrcMvcTestFile($srcMvcMajor, $srcMvcMinor);
}

function createSrcMvcMigrationFile(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
){

    $string = new GearBase\Util\String\StringService();
    $location = new Gear\Integration\Util\Location\Location();
    $persist = new Gear\Integration\Util\Persist\Persist($location);

    $arrayService = new Gear\Util\Vector\ArrayService();
    
    $migration = new Gear\Integration\Component\MigrationFile\MigrationFile(
        $persist,
        $string,
        $arrayService    
    );
    
    $columnUtil = new Gear\Integration\Util\Columns\Columns();
    
    $migrationsTables = [***REMOVED***;
    /*
    
    $migrationsTables = array_merge($migrationsTables, $migration->createMigrationTable($mvcMinorSuite));
    
    
    if (!empty($mvcMinorSuite->getForeignKeys())) { 
        foreach ($mvcMinorSuite->getForeignKeys() as $foreignKey) {        
            $migrationsTables = array_merge($migrationsTables, $migration->createForeignKeyMigration($foreignKey));
        }
    }
    */
    
    $resolveNames = createResolveNames();
    
    $migrationsTables = [***REMOVED***;
    
    foreach ($srcMvcMajor->getColumns() as $column) {
        foreach ($srcMvcMajor->getUserTypes() as $usertype) {
            foreach ($srcMvcMajor->getConstraints() as $constraint) {
                foreach ($srcMvcMajor->getTableAssocs() as $tables) {
                
                    $majorTitle = 'src-mvc';
                    $srcMvcMinor = new Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite(
                        $srcMvcMinor->getMajorSuite(),
                        $majorTitle,
                        $column, 
                        $usertype, 
                        $constraint, 
                        $tables
                    );
                    
                    $columnsSuffix = $resolveNames->createTableUrl($srcMvcMinor);

                    $srcMvcMinor->setTableName($resolveNames->createTableName('SrcMvc', $srcMvcMinor));
                    $srcMvcMinor->setLocationKey($resolveNames->createLocationKey($majorTitle, $srcMvcMinor));
                    $srcMvcMinor->setForeignKeys($columnUtil->getForeignKeys($srcMvcMinor->getColumnType()));
                    $srcMvcMinor->setColumns($columnUtil->getColumns($srcMvcMinor->getColumnType(), $columnsSuffix));    
                    
     
                     $migrationsTables = array_merge($migrationsTables, $migration->createMigrationTable($srcMvcMinor));
    
                    if (!empty($srcMvcMinor->getForeignKeys())) { 
                        foreach ($srcMvcMinor->getForeignKeys() as $foreignKey) {        
                            $migrationsTables = array_merge($migrationsTables, $migration->createForeignKeyMigration($foreignKey));
                        }
                    }               
                    
                    
                }
            }
        }
    }
    var_dump($migrationsTables);
    var_dump(count($migrationsTables));
   
    
    //return createMigrationComponent($mvcMinorSuite, $migrationsTables);
}

function createSrcMvcGearFile(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
) {

}

function createSrcMvcTestFile(
    Gear\Integration\Suite\SrcMvc\SrcMvcMajorSuite $srcMvcMajor,
    Gear\Integration\Suite\SrcMvc\SrcMvcMinorSuite $srcMvcMinor
) {
    
}

$string = new GearBase\Util\String\StringService();
$column = new Gear\Integration\Util\Columns\Columns();
$names = new Gear\Integration\Util\ResolveNames\ResolveNames($string);

$location = new Gear\Integration\Util\Location\Location();
$persist = new Gear\Integration\Util\Persist\Persist($location);

$arrayService = new Gear\Util\Vector\ArrayService();
    
$migrationFile = new Gear\Integration\Component\MigrationFile\MigrationFile(
    $persist,
    $string,
    $arrayService    
);

$gearfile = new Gear\Integration\Component\GearFile\GearFile(
    $persist,
    $string
);
        
$testFile = new Gear\Integration\Component\TestFile\TestFile($persist, $string);

$superTestFile = new Gear\Integration\Component\SuperTestFile\SuperTestFile($persist, $string);
 
$srcMvcGenerator = new Gear\Integration\Suite\SrcMvc\SrcMvcGenerator\SrcMvcGenerator(
    $gearfile, 
    $testFile, 
    $migrationFile, 
    $names, 
    $column
);

$srcMvcSuite = new Gear\Integration\Suite\SrcMvc\SrcMvcSuite\SrcMvcSuite($srcMvcGenerator, $superTestFile);


$srcMvcSuite->runSrcMvcSuite(
    ['Service', 'Repository', 'Form', 'Filter', 'SearchForm', 'Entity', 'Fixture'***REMOVED***,
    [
        'complete',
        'basic',
    ***REMOVED***,    
    ['all', 'low-strict', 'strict'***REMOVED***,
    [null, ['unique'***REMOVED***, ['nullable'***REMOVED***, ['unique', 'nullable'***REMOVED******REMOVED***,
    [null, 'upload_image'***REMOVED***        
);




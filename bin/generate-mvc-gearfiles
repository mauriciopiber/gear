#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}


require __DIR__.'/generate-functions';
require __DIR__.'/generate-columns';

function getMigrationName($name)
{
    $string = new GearBase\Util\String\StringService();
    $name = $string->str('uline', $name);
    return sprintf(
        '%s.php', 
        $name
    );
}

 
function runMvcSuite($suiteName, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    $expectedColumns = [
        $suiteName => $suiteColumns,
    ***REMOVED***;
    
    $configColumns = [
        'usertype' => $suiteUserTypes, 
        'constraints' => $suiteConstraints,
        'tables' => $suiteTables
    ***REMOVED***;
    
    $string = new GearBase\Util\String\StringService();
    $location = new Gear\Integration\Util\Location\Location();
    $persist = new Gear\Integration\Util\Persist\Persist($location);
    $superTestFile = new Gear\Integration\Component\SuperTestFile\SuperTestFile($persist, $string);
    
    $migrations = [***REMOVED***;
    
    $mvcMajor = new Gear\Integration\Suite\Mvc\MvcMajorSuite($suiteName);
    
    foreach ($expectedColumns as $superType => $columnType) {
        
        foreach ($columnType as $column) {
        
            foreach ($configColumns['usertype'***REMOVED*** as $userType) {
                foreach ($configColumns['constraints'***REMOVED*** as $constraint) {
                
                    foreach ($configColumns['tables'***REMOVED*** as $tables) {
                    
                        $mvcSuite = new Gear\Integration\Suite\Mvc\MvcMinorSuite(
                            $mvcMajor,
                            $column, 
                            $userType, 
                            $constraint, 
                            $tables
                        );
                        $migrations[$column***REMOVED*** = generateMvc($mvcSuite);
                    }                
                }
            }
            
        }
    
        $superTestFile->updateSuperTestFile($mvcMajor, $migrations); 
   
    }
}


function generateMvc(Gear\Integration\Suite\Mvc\MvcMinorSuite $mvcMinorSuite)
{
    $columnUtil = new Gear\Integration\Util\Columns\Columns();
    $string = new GearBase\Util\String\StringService();
    $location = new Gear\Integration\Util\Location\Location();
    $persist = new Gear\Integration\Util\Persist\Persist($location);

    
    $mvcMajor = $mvcMinorSuite->getMajorSuite()->getSuperType();
    
    $resolveNames = createResolveNames();
    
    $columnsSuffix = $resolveNames->createTableUrl($mvcMinorSuite);

    $mvcMinorSuite->setTableName($resolveNames->createTableName('Mvc', $mvcMinorSuite));
    $mvcMinorSuite->setLocationKey($resolveNames->createLocationKey($mvcMajor, $mvcMinorSuite));
    $mvcMinorSuite->setForeignKeys($columnUtil->getForeignKeys($mvcMinorSuite->getColumnType()));
    $mvcMinorSuite->setColumns($columnUtil->getColumns($mvcMinorSuite->getColumnType(), $columnsSuffix));

    $mvcMinorSuite->setGearFile(runMvcSuiteGearfile($mvcMinorSuite));
    $mvcMinorSuite->setMigrationFile(createMvcMigrationFile($mvcMinorSuite));
        
    $testFile = new Gear\Integration\Component\TestFile\TestFile($persist, $string);
    $testFile->updateTestFile($mvcMinorSuite);
        

    return $mvcMinorSuite;
}

function runMvcSuiteGearfile(Gear\Integration\Suite\Mvc\MvcMinorSuite $mvcMinorSuite)
{
    $db = [
        'table' => $mvcMinorSuite->getTableName(),
        'user' => $mvcMinorSuite->getUserType(),
        'namespace' => $mvcMinorSuite->getTableName(),
        'service' => 'factories',
        'columns' => factoryGearfileColumns($mvcMinorSuite->getColumns())
    ***REMOVED***;
    
    $src = [***REMOVED***;
    
    if (!empty($mvcMinorSuite->getForeignKeys())) { 
        foreach ($mvcMinorSuite->getForeignKeys() as $foreignKey) { 
            $src = array_merge($src, createForeignKeyGearfile($foreignKey));
        }
    }
    
    if (!empty($mvcMinorSuite->getTableAssoc())) {
        $src = array_merge($src, createForeignKeyGearfile($mvcMinorSuite->getTableAssoc()));
    }
       
    return createGearfileComponent($mvcMinorSuite, ['db' => [$db***REMOVED***, 'src' => $src***REMOVED***);
}

function createForeignKeyGearfile($tableId)
{
    $string = new GearBase\Util\String\StringService();
    $table = $string->str('class', str_replace('id_', '', $tableId));
    
    return [
        [
            'name' => $table,
            'type' => 'Entity',
            'db' => $table,
        ***REMOVED***,
        [
            'name' => sprintf('%sFixture', $table),
            'type' => 'Fixture',
            'db' => $table,
        ***REMOVED***,        
    ***REMOVED***;
}


function updateSuperTestFile($superType, $migrations)
{
   
}


function createForeignKeyMigration($tableId)
{
    $string = new GearBase\Util\String\StringService();
    $table = $string->str('uline', str_replace('id_', '', $tableId));
    
    return [
        $table => [
            'nullable' => true,
            'unique' => false,
            'columns' => [
                sprintf('%s_name', $string->str('uline', $table)) => ['type' => 'string'***REMOVED***
            ***REMOVED***,
            'table' => [***REMOVED***
        ***REMOVED***,
    ***REMOVED***;
}

function createMigrationTable(Gear\Integration\Suite\AbstractMinorSuite $mvcMinorSuite)
{
    $string = new GearBase\Util\String\StringService();
    $date = null;
    
    $unique = false;
    $nullable = false;

    if (is_array($mvcMinorSuite->getConstraints())) {
        foreach($mvcMinorSuite->getConstraints() as $const) {
        
            if ($const == 'nullable') {
                $nullable = true;
            }
            
            if ($const == 'unique') {
                $unique = true;
            }
        }
    }
   
    $tables = (!empty($mvcMinorSuite->getTableAssoc()) ? [$mvcMinorSuite->getTableAssoc()***REMOVED*** : [***REMOVED***);
    $columns = factoryMigrationColumns($mvcMinorSuite->getColumns());
    
    return [
        $string->str('uline', $mvcMinorSuite->getTableName()) => [
            'nullable' => $nullable,
            'unique' => $unique,
            'referenced_assoc' => $tables,
            'columns' => $columns
        ***REMOVED***
    ***REMOVED***;
}

function createMvcMigrationFile(Gear\Integration\Suite\Mvc\MvcMinorSuite $mvcMinorSuite)
{
    $migrationConfig = [***REMOVED***;
    $migrationConfig = array_merge($migrationConfig, createMigrationTable($mvcMinorSuite));
    
    if (!empty($mvcMinorSuite->getForeignKeys())) { 
        foreach ($mvcMinorSuite->getForeignKeys() as $foreignKey) {        
            $migrationConfig = array_merge($migrationConfig, createForeignKeyMigration($foreignKey));
        }
    }
    
    return createMigrationComponent($mvcMinorSuite, $migrationConfig);    
}

function createMigrationComponent($mvcMinorSuite, $migrationConfig)
{
    $migrationName = getMigrationName($mvcMinorSuite->getTableName());

    $migration = $mvcMinorSuite->getLocationKey().'/'.$migrationName;
    
    $arrayService = new Gear\Util\Vector\ArrayService();
    
    $template = file_get_contents(__DIR__.'/migration-template.php');
    
    $tables = '    const TABLES = '.$arrayService->varExport54($migrationConfig, '    ').';';
    $migrate = preg_replace('#    const TABLES = \[\***REMOVED***;#', $tables, $template);
    $migrate = preg_replace('#MigrationName#', $mvcMinorSuite->getTableName(), $migrate);
    
    $location = new Gear\Integration\Util\Location\Location();
    $persist = new Gear\Integration\Util\Persist\Persist($location);
    $persist->save($mvcMinorSuite, $migrationName, $migrate);

    return $migrationName;    
}
 
//columns
runMvcSuite(
    'mvc-columns',
    [
        'mvc-complete',
        'mvc-basic',
        'mvc-varchar',
        'mvc-dates',
        'mvc-text',
        'mvc-numeric'
    ***REMOVED***,    
    ['all'***REMOVED***,
    [null***REMOVED***,
    [null***REMOVED***
);


//usertype
runMvcSuite(
    'mvc-usertypes',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['low-strict', 'strict'***REMOVED***,
    [null***REMOVED***,
    [null***REMOVED***
);

//constraints
runMvcSuite(
    'mvc-constraints',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['all'***REMOVED***,
    [['nullable'***REMOVED***, ['unique'***REMOVED***, ['nullable', 'unique'***REMOVED******REMOVED***,
    [null***REMOVED***
);

//constraints
runMvcSuite(
    'mvc-upload-image',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['all'***REMOVED***,
    [null***REMOVED***,
    ['upload_image'***REMOVED***
);     

//complete
//constraints
runMvcSuite(
    'mvc-complete',
    [
        'mvc-complete',
    ***REMOVED***,    
    ['strict'***REMOVED***,
    [['unique', 'nullable'***REMOVED******REMOVED***,
    ['upload_image'***REMOVED***
);     


#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require __DIR__.'/generate-functions';

function getBasicColumns()
{
    return [
            
    
    ***REMOVED***;
}

function getDateColumns()
{
    return [
        'time_time' => ['type' => 'time'***REMOVED***,
        'datetime_datetime' => ['type' => 'datetime'***REMOVED***,
        'datetime_datetime_pt_br' => ['type' => 'datetime', 'speciality' => 'datetime-pt-br'***REMOVED***,
        'date_date' => ['type' => 'date'***REMOVED***,
        'date_date_pt_br' => ['type' => 'date', 'speciality' => 'date-pt-br'***REMOVED***
    ***REMOVED***;
}

function getVarcharColumns()
{
    return [
        'varchar_password_verify' => ['type' => 'string', 'speciality' => 'password-verify'***REMOVED***,
        'varchar_upload_image' => ['type' => 'string', 'speciality' => 'upload-image'***REMOVED***,
        'varchar_url' => ['type' => 'string', 'speciality' => 'url'***REMOVED***,
        'varchar_varchar' => ['type' => 'string'***REMOVED***,
        'varchar_unique_id' => ['type' => 'string', 'speciality' => 'unique-id'***REMOVED***,
        'varchar_telephone' => ['type' => 'string', 'speciality' => 'telephone'***REMOVED***,
        'varchar_email' => ['type' => 'string', 'speciality' => 'email'***REMOVED***,
    ***REMOVED***;
}

function getTextColumns()
{
    return [
        'text_text' => ['type' => 'text'***REMOVED***,
        'text_html' => ['type' => 'text', 'speciality' => 'html'***REMOVED***,
    ***REMOVED***;
}

function getNumericColumns()
{
    return [
        'decimal_decimal' => ['type' => 'decimal'***REMOVED***,
        'decimal_money_pt_br' => ['type' => 'decimal', 'speciality' => 'money-pt-br'***REMOVED***,
        'boolean_int'  => ['type' => 'boolean'***REMOVED***,
        'boolean_checkbox' => ['type' => 'boolean', 'speciality' => 'checkbox'***REMOVED***,
        'int_int' => ['type' => 'integer'***REMOVED***,
        'int_checkbox' => ['type' => 'integer', 'speciality' => 'checkbox'***REMOVED***,
        'id_int_foreign_key' => ['type' => 'integer', 'properties' => ['foreignKey'***REMOVED******REMOVED***,
    ***REMOVED***;    
}

function getCompleteColumns()
{
    return array_merge(
        getTextColumns(),
        getNumericColumns(),
        getDateColumns(),
        getVarcharColumns()
    );
}

function listAvailableMvc()
{
    $availableTypes = ['column', 'usertype', 'constraints', 'table'***REMOVED***;


    $availableSubtypes = [
        'column' => [
            'all',
            'date',
            'varchar',
            'text',
            'numeric'
        ***REMOVED***,
        'constraints' => [
            '',
            'not-null',
            'null',
            'unique'
        ***REMOVED***,
        'table' => [
            '',
            'upload-image'
        ***REMOVED***,
        'usertype' => ['all', 'low-strict', 'strict'***REMOVED***,
    ***REMOVED***;


    $data = [***REMOVED***;

    foreach ($availableSubtypes['column'***REMOVED*** as $columnName) {

        foreach ($availableSubtypes['constraints'***REMOVED*** as $constraint) {
        
            foreach ($availableSubtypes['table'***REMOVED*** as $table) {
            
                foreach ($availableSubtypes['usertype'***REMOVED*** as $usertype) {
            
                    $string = $columnName;
                    
                    if (strlen($constraint)>0) {
                        $string .= '-'.$constraint;
                    }
                    
                    if (strlen($table)>0) {
                        $string .= '-'.$table;
                    }
                    
                    if (strlen($usertype)>0) {
                        $string .= '-'.$usertype;
                    }
                        
                    $data[***REMOVED*** = $string;
                    
                }
                
            }
            
        }
    }

    foreach ($data as $item) {
        echo $item."\n";
    }
    echo "Total ".count($data)."\n";

}


function createMigration($date, $name)
{
    $arrayService = new Gear\Util\Vector\ArrayService();
    
    $template = file_get_contents(__DIR__.'/migration-template.php');
    
    $tables = '    const TABLES = '.$arrayService->varExport54(['test' => true***REMOVED***, '    ').';';
    
    
    $template = preg_replace('#    const TABLES = \[\***REMOVED***;#', $tables, $template);
    

    $migrationName = getMigrationName($date, $name);
    
    file_put_contents(__DIR__.'/'.$migrationName, $template);
    //var_dump($template); 
}

function getMigrationName($date, $name)
{
    $string = new GearBase\Util\String\StringService();
    $name = $string->str('uline', $name);
    return sprintf(
        '%s.php', 
        //'%s_%s.php',        
        //$date, 
        $name
    );
}

function updateTestFile($location, $migrations)
{
    //echo "$location/test.sh"."\n";
    //var_dump($migrations);

    //$template = file_get_contents(__DIR__.'/test.sh');
    
    //$text = sprintf('migration="%s"', $migrationName);
    
    //$newFile = preg_replace('#migration="[0-9a-z_***REMOVED****\.php"#', $text, $template);
    
    //file_put_contents(__DIR__.'/test.sh', $newFile);
}


  
function generateMvc()
{
    $string = new GearBase\Util\String\StringService();
    $expectedColumns = [
        'mvc-columns' => [
            'mvc-complete',
            'mvc-basic',
            'mvc-varchar',
            'mvc-dates',
            'mvc-text',
            'mvc-numeric'
        ***REMOVED***,
    ***REMOVED***;
    
    $configColumns = [
        'usertype' => ['all'***REMOVED***, //add low-strict and strict
        'constraints' => [null***REMOVED*** //add not-null, unique, not-null/unique
    ***REMOVED***;
    
    $migrations = [***REMOVED***;
    
    foreach ($expectedColumns as $superType => $types) {
        foreach ($types as $type) {
        
            foreach ($configColumns['usertype'***REMOVED*** as $usertype) {
                foreach ($configColumns['constraints'***REMOVED*** as $constraint) {
                
                    $location = "$superType/$type";
                    
                    $columnType = $string->str('class', str_replace('mvc-', '', $type));
                    
                    $tableName = sprintf(
                        '%s%s%s%s',
                        'Mvc',
                        $columnType,
                        ($usertype == 'all') ? '' : $usertype,
                        (!empty($constraint)) ? $constraint : ''
                    );
                    
                    generateMvcGearfile($tableName, $type, $columnType, $usertype, $constraint, $location);
                    $migration = generateMvcMigration($tableName, $type, $columnType, $constraint, $location);
                    //updateTestfile($location, $migration);
                    //$migrations[$type***REMOVED*** = $migration;                
                }
            }
            
        }

        //echo "$superType"."\n";
        //updateTestfile("$superType", $migrations);
    }
}

function generateMvcGearfile($tableName, $type, $columnType, $usertype, $constraint, $location)
{
    
    //echo $location."/".$type.".yml"."\n";
    
    echo "$tableName, $type, $columnType, $usertype, $constraint, $location"."\n";
    
    
    $db = [
        'table' => $tableName,
        'user' => $usertype,
        'namespace' => $tableName,
        'service' => 'factories',
        'columns' => factoryGearfileColumns($columnType)
    ***REMOVED***;
    
    outputMvc(['db' => [$db***REMOVED******REMOVED***, $location, $type);
}


function generateMvcMigration($tableName, $type, $columnType, $constraint, $location)
{
    $string = new GearBase\Util\String\StringService();
    $date = (new DateTime('now'))->format('YmdHis');
    
    $migrationName = getMigrationName($date, $type);
    //sleep(1.5);
    
    $migration = "$location/".$migrationName;
    echo $migration."\n";
    
    /*
    foreach ($constraint as $const) {
        if (is_array($const)) {
        
            foreach ($const as $cont) {
            
                 if ($cont == 
            }
        
        }
    
    }
    */
    
    $nullable = true;
    $unique = true;
    $tables = [***REMOVED***;
    $columns = [***REMOVED***;
    
    $migrationConfig = [
        $string->str('uline', $tableName) => [
            'nullable' => $nullable,
            'unique' => $unique,
            'tables' => $tables,
            'columns' => $columns
        ***REMOVED***
    ***REMOVED***;
    
    $arrayService = new Gear\Util\Vector\ArrayService();
    
    $template = file_get_contents(__DIR__.'/migration-template.php');
    
    $tables = '    const TABLES = '.$arrayService->varExport54($migrationConfig, '    ').';';
    $migrate = preg_replace('#    const TABLES = \[\***REMOVED***;#', $tables, $template);
    
    
    $constructorIntegration = realpath((new Gear\Module())->getLocation().'/../../test/integration/main/constructors/mvc');
    $template = sprintf($constructorIntegration.'/'.$location);
    
    $path =  sprintf('%s/%s', $template, $migrationName);

    file_put_contents($path, $migrate);
    
    return $migration;

}



function factoryColumns($columnType) 
{
    $columns = [***REMOVED***;
    switch  ($columnType) {
        case 'Basic':
            $columns = getBasicColumns();
            break;
        case 'Complete':
            $columns = getCompleteColumns();
            break;
        case 'Varchar':
            $columns = getVarcharColumns();
            break;
        case 'Dates':
            $columns = getDateColumns();
            break;
        case 'Text':
            $columns = getTextColumns();
            break;                        
        case 'Numeric':
            $columns = getNumericColumns();
            break;
        default:
            throw new Exception('Type not found: '.$columnType);
            break;                        
    }

    return $columns;    
}

function factoryGearfileColumns($columnType)
{
    $columns = factoryColumns($columnType);
    $columnsGearfile = extractGearfileColumns($columns);
    return $columnsGearfile;
}

function factoryMigrationColumns($columnType, $constraints, $table)
{
    $columns = factoryColumns($columnType);
    $columnsGearfile = extractMigrationColumns($columns);
    return $columnsGearfile;
}

function extractGearfileColumns($columns)
{
    $gearfileColumns = [***REMOVED***;
    foreach ($columns as $columnName => $columnOptions) {
        if (isset($columnOptions['speciality'***REMOVED***)) {
            $gearfileColumns[$columnName***REMOVED*** = $columnOptions['speciality'***REMOVED***;
        }
    }
    return $gearfileColumns;
}

function extractMigrationsColumns($columns)
{
    return [***REMOVED***;
}


generateMvc();
    
//generateMigration($date, $name);
//updateMigration($date, $name);
#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require __DIR__.'/generate-functions';

function getBasicColumns($constraints)
{

}

function getDateColumns($constraints)
{

}

function getVarcharColumns($constraints)
{

}

function getTextColumn($constraints)
{

}

function getNumericColumns($constraints)
{
    
}

function getCompleteColumns($constraints)
{
    return array_merge(
        getTextColumns($constraints),
        getNumericColumns($constraints),
        getDateColumns($constraints),
        getVarcharColumns($constraints)
    );
}

function listAvailableMvc()
{
    $availableTypes = ['column', 'usertype', 'constraints', 'table'***REMOVED***;


    $availableSubtypes = [
        'column' => [
            'all',
            'date',
            'varchar',
            'text',
            'numeric'
        ***REMOVED***,
        'constraints' => [
            '',
            'not-null',
            'null',
            'unique'
        ***REMOVED***,
        'table' => [
            '',
            'upload-image'
        ***REMOVED***,
        'usertype' => ['all', 'low-strict', 'strict'***REMOVED***,
    ***REMOVED***;


    $data = [***REMOVED***;

    foreach ($availableSubtypes['column'***REMOVED*** as $columnName) {

        foreach ($availableSubtypes['constraints'***REMOVED*** as $constraint) {
        
            foreach ($availableSubtypes['table'***REMOVED*** as $table) {
            
                foreach ($availableSubtypes['usertype'***REMOVED*** as $usertype) {
            
                    $string = $columnName;
                    
                    if (strlen($constraint)>0) {
                        $string .= '-'.$constraint;
                    }
                    
                    if (strlen($table)>0) {
                        $string .= '-'.$table;
                    }
                    
                    if (strlen($usertype)>0) {
                        $string .= '-'.$usertype;
                    }
                        
                    $data[***REMOVED*** = $string;
                    
                }
                
            }
            
        }
    }

    foreach ($data as $item) {
        echo $item."\n";
    }
    echo "Total ".count($data)."\n";

}


function createMigration($date, $name)
{
    $arrayService = new Gear\Util\Vector\ArrayService();
    
    $template = file_get_contents(__DIR__.'/migration-template.php');
    
    $tables = '    const TABLES = '.$arrayService->varExport54(['test' => true***REMOVED***, '    ').';';
    
    
    $template = preg_replace('#    const TABLES = \[\***REMOVED***;#', $tables, $template);
    

    $migrationName = getMigrationName($date, $name);
    
    file_put_contents(__DIR__.'/'.$migrationName, $template);
    //var_dump($template); 
}

function getMigrationName($date, $name)
{
    $string = new GearBase\Util\String\StringService();
    $name = $string->str('uline', $name);
    return sprintf('%s_%s.php', $date, $name);
}

function updateTestFile($location, $migrations)
{
    //echo "$location/test.sh"."\n";
    //var_dump($migrations);

    //$template = file_get_contents(__DIR__.'/test.sh');
    
    //$text = sprintf('migration="%s"', $migrationName);
    
    //$newFile = preg_replace('#migration="[0-9a-z_***REMOVED****\.php"#', $text, $template);
    
    //file_put_contents(__DIR__.'/test.sh', $newFile);
}


  
function generateMvc()
{
    $string = new GearBase\Util\String\StringService();
    $expectedColumns = [
        'mvc-columns' => [
            'mvc-complete',
            'mvc-basic',
            'mvc-varchar',
            'mvc-dates',
            'mvc-text',
            'mvc-numeric'
        ***REMOVED***,
    ***REMOVED***;
    
    $configColumns = [
        'usertype' => ['all'***REMOVED***, //add low-strict and strict
        'constraints' => [null***REMOVED*** //add not-null, unique, not-null/unique
    ***REMOVED***;
    
    $migrations = [***REMOVED***;
    
    foreach ($expectedColumns as $superType => $types) {
        foreach ($types as $type) {
        
            foreach ($configColumns['usertype'***REMOVED*** as $usertype) {
                foreach ($configColumns['constraints'***REMOVED*** as $constraint) { 
                
                    $location = "$superType/$type";
                    
                    $columnType = $string->str('class', str_replace('mvc-', '', $type));
                    
                    $tableName = sprintf(
                        '%s%s%s%s',
                        'Mvc',
                        $columnType,
                        ($usertype == 'all') ? '' : $usertype,
                        (!empty($constraint)) ? $constraint : ''
                    );
                    
                    generateMvcGearfile($tableName, $type, $columnType, $usertype, $constraint, $location);
                    $migration = generateMvcMigration($location, $type);
                    updateTestfile($location, $migration);
                    $migrations[$type***REMOVED*** = $migration;                
                }
            }
            
        }

        //echo "$superType"."\n";
        updateTestfile("$superType", $migrations);
    }
}

function generateMvcGearfile($tableName, $type, $columnType, $usertype, $constraint, $location)
{
    
    //echo $location."/".$type.".yml"."\n";
    
    echo "$tableName, $type, $columnType, $usertype, $constraint, $location"."\n";
    
    
    $db = [
        'table' => $tableName,
        'user' => $usertype,
        'namespace' => $tableName,
        'service' => 'factories',
        'columns' => factoryColumns($columnType)
    ***REMOVED***;
    
    outputMvc(['db' => [$db***REMOVED******REMOVED***, $location, $type);
}

function factoryColumns($columnType)
{
    return [***REMOVED***;
}

function generateMvcMigration($location, $name)
{
    $date = (new DateTime('now'))->format('YmdHis');
    
    $migrationName = getMigrationName($date, $name);
    //sleep(1.5);
    
    $migration = "$location/".$migrationName;
    echo $migration."\n";
    
    return $migration;

}



generateMvc();
    
//generateMigration($date, $name);
//updateMigration($date, $name);
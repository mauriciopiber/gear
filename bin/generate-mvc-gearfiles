#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require __DIR__.'/generate-functions';
require __DIR__.'/generate-columns';


/*
function listAvailableMvc()
{
    $availableTypes = ['column', 'usertype', 'constraints', 'table'***REMOVED***;


    $availableSubtypes = [
        'column' => [
            'all',
            'date',
            'varchar',
            'text',
            'numeric'
        ***REMOVED***,
        'constraints' => [
            '',
            'not-null',
            'null',
            'unique'
        ***REMOVED***,
        'table' => [
            '',
            'upload-image'
        ***REMOVED***,
        'usertype' => ['all', 'low-strict', 'strict'***REMOVED***,
    ***REMOVED***;


    $data = [***REMOVED***;

    foreach ($availableSubtypes['column'***REMOVED*** as $columnName) {

        foreach ($availableSubtypes['constraints'***REMOVED*** as $constraint) {
        
            foreach ($availableSubtypes['table'***REMOVED*** as $table) {
            
                foreach ($availableSubtypes['usertype'***REMOVED*** as $usertype) {
            
                    $string = $columnName;
                    
                    if (strlen($constraint)>0) {
                        $string .= '-'.$constraint;
                    }
                    
                    if (strlen($table)>0) {
                        $string .= '-'.$table;
                    }
                    
                    if (strlen($usertype)>0) {
                        $string .= '-'.$usertype;
                    }
                        
                    $data[***REMOVED*** = $string;
                    
                }
                
            }
            
        }
    }

    foreach ($data as $item) {
        echo $item."\n";
    }
    echo "Total ".count($data)."\n";

}


function createMigration($date, $name)
{
    $arrayService = new Gear\Util\Vector\ArrayService();
    
    $template = file_get_contents(__DIR__.'/migration-template.php');
    
    $tables = '    const TABLES = '.$arrayService->varExport54(['test' => true***REMOVED***, '    ').';';
    
    
    $template = preg_replace('#    const TABLES = \[\***REMOVED***;#', $tables, $template);
    

    $migrationName = getMigrationName($date, $name);
    
    file_put_contents(__DIR__.'/'.$migrationName, $template);
    ////var_dump($template); 
}
*/



function getMigrationName($date, $name)
{
    $string = new GearBase\Util\String\StringService();
    $name = $string->str('uline', $name);
    return sprintf(
        '%s.php', 
        $name
    );
}

function getConstraintLabel($constraint)
{
    if  (!empty($constraint)) {
                 
        if (is_array($constraint)) {
            $const = implode('-', $constraint);
        } else {
            $const = $constraint;
        }
    } else {
        $const = '';
    }
    
    return $const;
}

 
function generateMvc($suiteName, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    $string = new GearBase\Util\String\StringService();
    $expectedColumns = [
        $suiteName => $suiteColumns,
    ***REMOVED***;
    
    $configColumns = [
        'usertype' => $suiteUserTypes, 
        'constraints' => $suiteConstraints,
        'tables' => $suiteTables
    ***REMOVED***;
    
    $migrations = [***REMOVED***;
    
    foreach ($expectedColumns as $superType => $types) {
        foreach ($types as $type) {
        
            foreach ($configColumns['usertype'***REMOVED*** as $usertype) {
                foreach ($configColumns['constraints'***REMOVED*** as $constraint) {
                
                    foreach ($configColumns['tables'***REMOVED*** as $tables) {
                    
                        
                        $columnType = $string->str('class', str_replace('mvc-', '', $type));
                        
                        $columnSuffix = [***REMOVED***;
                        $columnSuffix[***REMOVED*** = $string->str('url', $columnType);
                    
                        $locationKey = sprintf("%s/%s", $superType, $type);
                    
                        if ($usertype != 'all') {
                            $locationKey .= '-'.$usertype;
                            $columnSuffix[***REMOVED*** = $usertype;
                        }
                    
                        $const = getConstraintLabel($constraint);
                    
                        if ($constraint != '') {
                            $locationKey .= '-'.$const;
                            
                            $colmConst = explode('-', $const);
                            
                            foreach ($colmConst as $it) {
                                $columnSuffix[***REMOVED*** = $it;
                            }
                            //$columnSuffix[***REMOVED*** = array_merge($columnSuffix, $colmConst);
                        }
                        
                        if ($tables !== null) {
                            $columnSuffix[***REMOVED*** = $tables;
                        
                        }
                    
                        $tableName = sprintf(
                            '%s%s%s%s',
                            'Mvc',
                            $columnType,
                            ($usertype == 'all') ? '' : $string->str('class', $usertype),
                            $string->str('class', $const)
                        );
                    
                        if ($tables !== null) { 
                            $tableName .= $string->str('class', $tables);                                                               
                            $locationKey .= '-'.$string->str('url', $tables);
                        }
                    
                        $migrations[$type***REMOVED*** = generateTest(
                            $tableName, 
                            $type, 
                            $columnType, 
                            $usertype, 
                            $constraint, 
                            $tables, 
                            $columnSuffix, 
                            $locationKey
                        );
                    
                        //$migrations[$type***REMOVED*** = array_merge([$locationKey***REMOVED***, $migration);
                        
                    }                
                }
            }
            
        }
        
        updateSuperTestFile("$superType", $migrations);
    }
    
    
}

function updateSuperTestFile($superType, $migrations)
{
    $string = new GearBase\Util\String\StringService();
    
    //$migName = array_values(array_slice(explode('/', $migration), -1))[0***REMOVED***;

    $testFile = file_get_contents(__DIR__.'/test-super-template.sh');
    
    $constructTemplate = 'construct+=("%s/%s:%s/%s")'.PHP_EOL;
    
    $construct = '';
    
    foreach ($migrations as $key => $config) {
        $locationKey = $config['key'***REMOVED***;
        
        $folder = array_values(array_slice(explode('/', $locationKey), -1))[0***REMOVED***;
        
        $gearfile = $config['gearfile'***REMOVED***;
        $migration = $config['migration'***REMOVED***;
        
        $construct .= sprintf($constructTemplate, $folder, $gearfile, $folder, $migration); 
        
        //echo "$locationKey $gearfile $migration"."\n";
    }

    
    $newFile = str_replace('construct+=("")', $construct, $testFile);
    $newFile = preg_replace('#(module=")(")#', '$1Pbr'.$string->str('class', $superType).'$2', $newFile);
    
    $template = getMvcLocation($superType);
    
    $path =  sprintf('%s/%s', $template, 'test.sh');
    
    file_put_contents($path, $newFile);
        
    //echo $construct;
    
    //var_dump($superType, $migrations);

}

function generateTest($tableName, $type, $columnType, $usertype, $constraint, $tables, array $columnSuffix, $locationKey)
{
    $config = [***REMOVED***;
    $gearfile = generateMvcGearfile($tableName, $type, $columnType, $usertype, $constraint, $tables, $columnSuffix, $locationKey);
    $migration = generateMvcMigration($tableName, $type, $columnType, $constraint, $tables, $columnSuffix, $locationKey);
    updateTestFile($tableName, $gearfile, $migration, $locationKey);
    
    $config['key'***REMOVED*** = $locationKey;
    $config['gearfile'***REMOVED*** = $gearfile;
    $config['migration'***REMOVED*** = $migration;
    return $config;
}


function generateMvcGearfile($tableName, $type, $columnType, $usertype, $constraint, $tables, $columnSuffix, $location)
{
    $db = [
        'table' => $tableName,
        'user' => $usertype,
        'namespace' => $tableName,
        'service' => 'factories',
        'columns' => factoryGearfileColumns($columnType, $columnSuffix)
    ***REMOVED***;
    

    $src = [***REMOVED***;
    
    if (($foreignKeys = getForeignKeys($columnType)) !== null) {
    
        foreach ($foreignKeys as $foreignKey) { 
        
            $src = array_merge($src, createForeignKeyGearfile($foreignKey));
        }
    }
    
    if (!empty($tables)) {
        $src = array_merge($src, createForeignKeyGearfile($tables));
    }
       
    return outputMvc($tableName, ['db' => [$db***REMOVED***, 'src' => $src***REMOVED***, $location);
}

function createForeignKeyGearfile($tableId)
{
    $string = new GearBase\Util\String\StringService();
    $table = $string->str('class', str_replace('id_', '', $tableId));
    
    return [
        [
            'name' => $table,
            'type' => 'Entity',
            'db' => $table,
        ***REMOVED***,
        [
            'name' => sprintf('%sFixture', $table),
            'type' => 'Fixture',
            'db' => $table,
        ***REMOVED***,        
    ***REMOVED***;
}


function updateTestFile($tableName, $gearfile, $migration, $location)
{
    $string = new GearBase\Util\String\StringService();
    
    //$migName = array_values(array_slice(explode('/', $migration), -1))[0***REMOVED***;

    $testFile = file_get_contents(__DIR__.'/test-template.sh');
    
    $text = sprintf('construct[1***REMOVED***="%s;%s"', $gearfile, $migration);
    
    $newFile = preg_replace('#construct\[1\***REMOVED***=""#', $text, $testFile);
    $newFile = preg_replace('#(module=")(")#', '$1Pbr'.$string->str('class', $tableName).'$2', $newFile);
    
    $template = getMvcLocation($location);
    
    $path =  sprintf('%s/%s', $template, 'test.sh');
    
    file_put_contents($path, $newFile);
}

function getForeignKeys($columnType)
{
    $columns = factoryColumns($columnType);
    
    $foreignKeys = [***REMOVED***;
    
    foreach ($columns as $name => $config) {
        if (isset($config['properties'***REMOVED***) && in_array('foreignKey', $config['properties'***REMOVED***)) {
            $foreignKeys[***REMOVED*** = $name;
        }
    }
    
    return empty($foreignKeys) ? null : $foreignKeys;
}

function createForeignKeyMigration($tableId)
{
    $string = new GearBase\Util\String\StringService();
    $table = $string->str('uline', str_replace('id_', '', $tableId));
    
    return [
        $table => [
            'nullable' => true,
            'unique' => false,
            'columns' => [
                sprintf('%s_name', $string->str('uline', $table)) => ['type' => 'string'***REMOVED***
            ***REMOVED***,
            'table' => [***REMOVED***
        ***REMOVED***,
    ***REMOVED***;
}

function generateMvcMigration($tableName, $type, $columnType, $constraint, $tables, $columnSuffix, $location)
{
    $string = new GearBase\Util\String\StringService();
    $date = (new DateTime('now'))->format('YmdHis');
    
    $migrationName = getMigrationName($date, $tableName);
    

    //sleep(1.5);
    
    $migration = "$location/".$migrationName;
    $unique = false;
    $nullable = false;

    if (is_array($constraint)) {
        foreach($constraint as $const) {
        
            if ($const == 'nullable') {
                $nullable = true;
            }
            
            if ($const == 'unique') {
                $unique = true;
            }
        }
    }
   
    $tables = (!empty($tables) ? [$tables***REMOVED*** : [***REMOVED***);
    $columns = factoryMigrationColumns($columnType, $columnSuffix);
    
    $migrationConfig = [
        $string->str('uline', $tableName) => [
            'nullable' => $nullable,
            'unique' => $unique,
            'table' => $tables,
            'columns' => $columns
        ***REMOVED***
    ***REMOVED***;

    if (($foreignKeys = getForeignKeys($columnType)) !== null) {
        
        foreach ($foreignKeys as $foreignKey) { 
        
            $migrationConfig = array_merge($migrationConfig, createForeignKeyMigration($foreignKey));
        }
    }    

    
    $arrayService = new Gear\Util\Vector\ArrayService();
    
    $template = file_get_contents(__DIR__.'/migration-template.php');
    
    $tables = '    const TABLES = '.$arrayService->varExport54($migrationConfig, '    ').';';
    $migrate = preg_replace('#    const TABLES = \[\***REMOVED***;#', $tables, $template);
    $migrate = preg_replace('#MigrationName#', $tableName, $migrate);
    
    $template = getMvcLocation($location);
    
    $path =  sprintf('%s/%s', $template, $migrationName);

    file_put_contents($path, $migrate);
    
    return $migrationName;
}
 
//columns
generateMvc(
    'mvc-columns',
    [
        'mvc-complete',
        'mvc-basic',
        'mvc-varchar',
        'mvc-dates',
        'mvc-text',
        'mvc-numeric'
    ***REMOVED***,    
    ['all'***REMOVED***,
    [null***REMOVED***,
    [null***REMOVED***
);


//usertype
generateMvc(
    'mvc-usertypes',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['low-strict', 'strict'***REMOVED***,
    [null***REMOVED***,
    [null***REMOVED***
);

//constraints
generateMvc(
    'mvc-constraints',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['all'***REMOVED***,
    [['nullable'***REMOVED***, ['unique'***REMOVED***, ['nullable', 'unique'***REMOVED******REMOVED***,
    [null***REMOVED***
);

//constraints
generateMvc(
    'mvc-upload-image',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['all'***REMOVED***,
    [null***REMOVED***,
    ['upload_image'***REMOVED***
);     

//complete
//constraints
generateMvc(
    'mvc-complete',
    [
        'mvc-complete',
    ***REMOVED***,    
    ['strict'***REMOVED***,
    [['unique', 'nullable'***REMOVED******REMOVED***,
    ['upload_image'***REMOVED***
);     


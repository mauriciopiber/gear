<?php

function getForeignKeys($columnType)
{
    $columns = factoryColumns($columnType);
    
    $foreignKeys = [***REMOVED***;
    
    foreach ($columns as $name => $config) {
        if (isset($config['properties'***REMOVED***) && in_array('foreignKey', $config['properties'***REMOVED***)) {
            $foreignKeys[***REMOVED*** = $name;
        }
    }
    
    return empty($foreignKeys) ? null : $foreignKeys;
}

function factoryColumns($columnType) 
{
    $columns = [***REMOVED***;
    switch  ($columnType) {
        case 'Basic':
            $columns = Gear\Integration\Columns\BasicColumnsInterface::COLUMNS;
            break;
        case 'Complete':
            $columns = array_merge(
                Gear\Integration\Columns\TextColumnsInterface::COLUMNS,
                Gear\Integration\Columns\NumericColumnsInterface::COLUMNS,
                Gear\Integration\Columns\DatesColumnsInterface::COLUMNS,
                Gear\Integration\Columns\VarcharColumnsInterface::COLUMNS
            );
            break;
        case 'Varchar':
            $columns = Gear\Integration\Columns\VarcharColumnsInterface::COLUMNS;
            break;
        case 'Dates':
            $columns = Gear\Integration\Columns\DatesColumnsInterface::COLUMNS;
            break;
        case 'Text':
            $columns = Gear\Integration\Columns\TextColumnsInterface::COLUMNS;
            break;                        
        case 'Numeric':
            $columns = Gear\Integration\Columns\NumericColumnsInterface::COLUMNS;
            break;
        default:
            throw new Exception('Type not found: '.$columnType);
            break;                        
    }

    return $columns;    
}

function createColumnSuffix($columnSuffix)
{

    $label = [
        'nullable' => 'nul',
        'unique' => 'uni',
        'upload-image' => 'upl',
        'complete' => 'cmp',
        'basic' => 'bsc',
        'dates' => 'dts',
        'numeric' => 'nmr',
        'varchar' => 'vrc',
        'text' => 'txt',
        'low-strict' => 'lws',
        'strict' => 'str'
    ***REMOVED***;
    
    $text = [***REMOVED***;

    foreach ($columnSuffix as $option) {
        $text[***REMOVED*** = $label[$option***REMOVED***; 
    }

        
    return implode('_', $text);
}

function addSuffixToColumns($columns, $columnSuffix)
{
    if (empty($columnSuffix)) {
        return $columns;
    }
    
    $fixed = [***REMOVED***;
    
    $columnSuffix = createColumnSuffix($columnSuffix);

    foreach ($columns as $name => $column) {
        $newName = $name.'_'.$columnSuffix;
        $fixed[$newName***REMOVED*** = $column;
    }
    
    return $fixed;
}

function getColumns($columnType, $columnSuffix)
{
    $columns = factoryColumns($columnType);
    $columns = addSuffixToColumns($columns, $columnSuffix);
    return $columns;
}

/**
 * Gearfile
 */
function factoryGearfileColumns($columns)
{
    $gearfileColumns = [***REMOVED***;
    foreach ($columns as $columnName => $columnOptions) {
        if (isset($columnOptions['speciality'***REMOVED***)) {
            $gearfileColumns[$columnName***REMOVED*** = $columnOptions['speciality'***REMOVED***;
        }
    }
    return $gearfileColumns;
}

/**
 * Migration
 */
function factoryMigrationColumns($columns)
{
    $gearfileColumns = [***REMOVED***;
    foreach ($columns as $columnName => $columnOptions) {
        if (isset($columnOptions['speciality'***REMOVED***)) {
            unset($columnOptions['speciality'***REMOVED***);
        }
        $gearfileColumns[$columnName***REMOVED*** = $columnOptions;
    }
    return $gearfileColumns;
}

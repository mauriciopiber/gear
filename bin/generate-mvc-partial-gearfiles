#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require __DIR__.'/generate-functions';
require __DIR__.'/generate-columns';


function MvcDependency()
{
    return [
        'Entity' => null,
        'Fixture' => ['Entity'***REMOVED***,
        'Repository' => ['Entity'***REMOVED***,
        'Service' => ['Entity', 'Repository'***REMOVED***,
        'Filter' => ['Entity'***REMOVED***,
        'Form' => ['Filter', 'Entity'***REMOVED***,
        'SearchForm' => ['Entity'***REMOVED***,
        'Controller' => ['Entity', 'Fixture', 'Repository', 'Service', 'Filter', 'Form', 'SearchForm'***REMOVED***
    ***REMOVED***;
}

function generateSrcMvc($suiteType, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    
    $string = new GearBase\Util\String\StringService();
    $suiteSupertype = 'src-mvc';
    
    $suiteName = sprintf('%s/src-mvc-%s', $suiteSupertype, $string->str('url', $suiteType));
    
    echo "$suiteName"."\n";
    
    if ($suiteType === 'Entity') {
        createSrcMvcMigration($suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables);
    }
    
    createSrcMvcGearfile($suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables);
    
    createSrcMvcTestfile($suiteName);
}

function createSrcMvcMigrationFile($tableName, $column, $userType, $constraint, $table)
{
    return [
    
    ***REMOVED***;

}

function createSrcMvcMigration($columns, $userTypes, $constraints, $tables)
{
    $resolveNames = createResolveNames();
    
    $i = 0;
    
    $migrationsTables = [***REMOVED***;

    
    foreach ($columns as $column) {
        foreach ($userTypes as $usertype) {
            foreach ($constraints as $constraint) {
                foreach ($tables as $table) {
                    $tableName = sprintf(
                        '%s%s',
                        'SrcMvc',
                        implode('', $resolveNames->createTableAliase($column, $usertype, $constraint, $table))
                    );
                    $migrationsTables[$tableName***REMOVED*** = createSrcMvcMigrationFile($tableName, $userTypes, $column, $constraint, $table);
                         
                
                }
            }
        }
    }
    
    var_dump($migrationsTables);
    

    //how many tables combinations this will have?
    
    //will use the same library as MVC.

}

function createSrcMvcGearfile()
{

}
function createSrcMvcTestfile($suiteName)
{
    
}

function generateMvcControllerTest($superType, $suiteType, $type, $usertype, $constraint, $tables)
{
    $resolveNames = createResolveNames();
    $locationKey = sprintf("%s/%s", $superType, $type);
       
    
    $tableName = sprintf(
        '%s%s',
        'ControllerMvc',
        implode('', $resolveNames->createTableAliase($type, $usertype, $constraint, $tables))
    );
    
    $locationKey = sprintf(
        '%s/mvc-%s',
        $superType, 
        implode('-', $resolveNames->createTableUrl($type, $usertype, $constraint, $tables))
    );
    
    echo "1. $tableName 3. $suiteType 2. $locationKey"."\n";
    
    //var_dump($superType, $type, $usertype, $constraint, $tables);
}

function generateSrcMvcTest($superType, $suiteType, $type, $usertype, $constraint, $tables)
{
    $resolveNames = createResolveNames();
    $locationKey = sprintf("%s/%s", $superType, $type);
    
    $tableName = sprintf(
        '%s%s',
        'SrcMvc',
        implode('', $resolveNames->createTableAliase($type, $usertype, $constraint, $tables))
    );
    
    $locationKey = sprintf(
        '%s/mvc-%s',
        $superType, 
        implode('-', $resolveNames->createTableUrl($type, $usertype, $constraint, $tables))
    );
    
    echo "1. $tableName 3. $suiteType 2. $locationKey"."\n";
}

function generateControllerMvc($suiteName, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    $expectedColumns = [
        $suiteName => $suiteColumns,
    ***REMOVED***;
    
    $configColumns = [
        'usertype' => $suiteUserTypes, 
        'constraints' => $suiteConstraints,
        'tables' => $suiteTables
    ***REMOVED***;
    
    $migrations = [***REMOVED***;
    
    foreach ($expectedColumns as $superType => $types) {
        foreach ($types as $type) {
            foreach ($configColumns['usertype'***REMOVED*** as $usertype) {
                foreach ($configColumns['constraints'***REMOVED*** as $constraint) {
                    foreach ($configColumns['tables'***REMOVED*** as $tables) {
                        generateMvcControllerTest($superType, $type, $usertype, $constraint, $tables);                    
                    }
                }
            }
        }
    }
}


function generateSrcMvcSuite()
{
    $types = ['Service', 'Repository', 'Form', 'Filter', 'SearchForm', 'Entity', 'Fixture'***REMOVED***;
    
    foreach ($types as $type) {
    
        generateSrcMvc(
            $type,
            [
                'complete',
                'basic',
            ***REMOVED***,    
            ['all', 'low-strict', 'strict'***REMOVED***,
            [null, ['unique'***REMOVED***, ['nullable'***REMOVED***, ['unique', 'nullable'***REMOVED******REMOVED***,
            [null, 'upload_image'***REMOVED***        
        );
    }
}


//columns
generateSrcMvcSuite();

/**
//columns
generateMvcController(
    'controller-mvc',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['all'***REMOVED***,
    [null***REMOVED***,
    [null, 'upload_image'***REMOVED***
);
*/

//create srcs

//create controller
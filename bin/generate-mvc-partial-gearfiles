#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require __DIR__.'/generate-functions';
require __DIR__.'/generate-columns';

function generateMvcSrc($suiteName, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    $expectedColumns = [
        $suiteName => $suiteColumns,
    ***REMOVED***;
    
    $configColumns = [
        'usertype' => $suiteUserTypes, 
        'constraints' => $suiteConstraints,
        'tables' => $suiteTables
    ***REMOVED***;
    
    $migrations = [***REMOVED***;
    
    foreach ($expectedColumns as $superType => $types) {
        foreach ($types as $type) {
            foreach ($configColumns['usertype'***REMOVED*** as $usertype) {
                foreach ($configColumns['constraints'***REMOVED*** as $constraint) {
                    foreach ($configColumns['tables'***REMOVED*** as $tables) {
                        generateMvcSrcTest($superType, $type, $usertype, $constraint, $tables);
                    }
                }
            }
        }
    }
}

function generateMvcControllerTest($superType, $type, $usertype, $constraint, $tables)
{
    $locationKey = sprintf("%s/%s", $superType, $type);
    
    $tableName = sprintf(
        '%s%s',
        'Mvc',
        implode('', createTableAliase($type, $usertype, $constraint, $tables))
    );
    
    $locationKey = sprintf(
        '%s/mvc-%s',
        $superType, 
        implode('-', createTableUrl($type, $usertype, $constraint, $tables))
    );
    
    echo "1. $tableName 2. $locationKey";
    
    //var_dump($superType, $type, $usertype, $constraint, $tables);
}

function generateMvcSrcTest($superType, $type, $usertype, $constraint, $tables)
{
    $locationKey = sprintf("%s/%s", $superType, $type);
    
    $tableName = sprintf(
        '%s%s',
        'Mvc',
        implode('', createTableAliase($type, $usertype, $constraint, $tables))
    );
    
    $locationKey = sprintf(
        '%s/mvc-%s',
        $superType, 
        implode('-', createTableUrl($type, $usertype, $constraint, $tables))
    );
    
    echo "1. $tableName 2. $locationKey";
}

function generateMvcController($suiteName, $suiteColumns, $suiteUserTypes, $suiteConstraints, $suiteTables)
{
    $expectedColumns = [
        $suiteName => $suiteColumns,
    ***REMOVED***;
    
    $configColumns = [
        'usertype' => $suiteUserTypes, 
        'constraints' => $suiteConstraints,
        'tables' => $suiteTables
    ***REMOVED***;
    
    $migrations = [***REMOVED***;
    
    foreach ($expectedColumns as $superType => $types) {
        foreach ($types as $type) {
            foreach ($configColumns['usertype'***REMOVED*** as $usertype) {
                foreach ($configColumns['constraints'***REMOVED*** as $constraint) {
                    foreach ($configColumns['tables'***REMOVED*** as $tables) {
                        generateMvcControllerTest($superType, $type, $usertype, $constraint, $tables);                    
                    }
                }
            }
        }
    }
}


//columns
generateMvcSrc(
    'src-mvc-service',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['all'***REMOVED***,
    [null***REMOVED***,
    [null***REMOVED***
);


//columns
generateMvcController(
    'controller-mvc',
    [
        'mvc-basic',
    ***REMOVED***,    
    ['all'***REMOVED***,
    [null***REMOVED***,
    [null***REMOVED***
);

//create srcs

//create controller
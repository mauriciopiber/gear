<?php
chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require 'init_autoloader.php';

use GearJson\Src\Src;
use Symfony\Component\Yaml\Yaml;
use Gear\Module;
use GearBase\Util\String\StringService;

$string = new StringService();

function createResolveNames()
{
    $string = new StringService();
    return new Gear\Integration\Util\ResolveNames\ResolveNames($string);
}


if (empty($argv[1***REMOVED***)) {
    return;
}

$type = $string->str('class', $argv[1***REMOVED***);
$repeat = (!isset($argv[2***REMOVED***)) ? 1 : (($argv[2***REMOVED*** > 10 ) ? 10 : $argv[2***REMOVED***);


function generateGearfiles($invokables, $config, $type, $repeat)
{
    $invokableFile = [***REMOVED***;

    foreach ($invokables as $invokable) {

        foreach ($config as $configName) {

            for ($i = 1; $i <= $repeat; $i++) {
  
                $invokableFile[***REMOVED*** = generateSource($invokable, $configName, $type, $i);
            }
        }
    }
    
    return $invokableFile;


}

function generateSource($invokable, $configName, $type, $repeat)
{
    $string = new StringService();
    
    $numberString = Gear\Integration\Util\Numbers\NumberToStringInterface::NUMBER_MAP[$repeat***REMOVED***;
    
    $name = sprintf($invokable['name'***REMOVED***, $type, $string->str('class', substr($configName, 0, 5)), $numberString);

    $entry = ['name' => $name, 'type' => $invokable['type'***REMOVED******REMOVED***;
        
    if (isset($invokable['extends'***REMOVED***)) {
        $entry['extends'***REMOVED*** = sprintf($invokable['extends'***REMOVED***, $type, $type, $string->str('class', substr($configName, 0, 5)), $numberString);
    }
    
    if (isset($invokable['namespace'***REMOVED***)) {
        $entry['namespace'***REMOVED*** = createNamespace($type, $repeat);
    
    }
    
    if (isset($invokable['implements'***REMOVED***)) {
    
        if (is_array($invokable['implements'***REMOVED***)) {
        
           $entry['implements'***REMOVED*** = [***REMOVED***;
           
           foreach ($invokable['implements'***REMOVED*** as $invokDep) {
               $entry['implements'***REMOVED***[***REMOVED*** = sprintf($invokDep, $type, $numberString);
           }
        
        } else {
            $entry['implements'***REMOVED*** = sprintf($invokable['implements'***REMOVED***, $type, $numberString);
        }
    }        
                    
    if ($configName !== 'abstract' && $invokable['type'***REMOVED*** !== 'Interface') {
        $entry['service'***REMOVED*** = $configName;
    } elseif ($invokable['type'***REMOVED*** !== 'Interface') {
        $entry['abstract'***REMOVED*** = true;
    }
    
    
    if (isset($invokable['dependency'***REMOVED***)) {
        if (is_array($invokable['dependency'***REMOVED***)) {
        
           $entry['dependency'***REMOVED*** = [***REMOVED***;
           
           foreach ($invokable['dependency'***REMOVED*** as $invokDep) {
               $entry['dependency'***REMOVED***[***REMOVED*** = sprintf($invokDep, $type, $type, $numberString);
           }
        
        } else {
            $entry['dependency'***REMOVED*** = sprintf($invokable['dependency'***REMOVED***, $type, $type, $numberString);
        }
    }
    
    return $entry;
}

function createNamespace($type, $number)
{
    $textName = '';
    
    for ($x = 1; $x <= $number; $x++) {
    
        if (!empty($textName)) {
            $textName .= '\\';
        }
        $textName .= sprintf('%s%s', substr($type, 0, 5), Gear\Integration\Util\Numbers\NumberToStringInterface::NUMBER_MAP[$x***REMOVED***);
    
    }


    return $textName;
}

function createMultiplesInterfaces($type, $repeat)
{
    $interfaceString = 'Interfaces\%sImpl%s';
    
    if ($repeat == 1) {
        return sprintf($interfaceString, $type, Gear\Integration\Util\Numbers\NumberToStringInterface::NUMBER_MAP[1***REMOVED***);
    }
    
    $interfaces = [***REMOVED***;

    for ($z = 1; $z <= $repeat; $z++) {
        $interfaces[***REMOVED*** = sprintf($interfaceString, $type, Gear\Integration\Util\Numbers\NumberToStringInterface::NUMBER_MAP[$z***REMOVED***);
    }
    
    return $interfaces;
}


function srcType()
{
    return ['Interface', 'Repository', 'Service', 'Filter', 'Form', 'ViewHelper', 'ControllerPlugin', 'ValueObject'***REMOVED***;
}

function controllerType()
{
    return ['Action', 'Console'***REMOVED***;
}
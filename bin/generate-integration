#!/usr/bin/env php
<?php


chdir(dirname(__DIR__));

// Decline static file requests back to the PHP built-in webserver
if (php_sapi_name() === 'cli-server') {
    $path = realpath(__DIR__ . parse_url($_SERVER['REQUEST_URI'***REMOVED***, PHP_URL_PATH));
    if (__FILE__ !== $path && is_file($path)) {
        return false;
    }
    unset($path);
}

require 'init_autoloader.php';

use GearBase\Util\String\StringService;
use Gear\Integration\Util;
use Gear\Integration\Component;
use Gear\Integration\Util\Columns\Columns;
use Gear\Integration\Util\ResolveNames\ResolveNames;
use Gear\Integration\Util\Location\Location;
use Gear\Integration\Util\Persist\Persist;
use Gear\Integration\Component\MigrationFile\MigrationFile;
use Gear\Integration\Component\GearFile\GearFile;
use Gear\Integration\Component\TestFile\TestFile;
use Gear\Integration\Component\SuperTestFile\SuperTestFile;
use Gear\Integration\Suite\Mvc\MvcSuite\MvcSuite;
use Gear\Integration\Suite\Mvc\MvcGenerator\MvcGenerator;
use Gear\Integration\Suite\Src\SrcSuite\SrcSuite;
use Gear\Integration\Suite\Src\SrcGenerator\SrcGenerator;
use Gear\Integration\Suite\Controller\ControllerSuite\ControllerSuite;
use Gear\Integration\Suite\Controller\ControllerGenerator\ControllerGenerator;
use Gear\Integration\Suite\SrcMvc\SrcMvcSuite\SrcMvcSuite;
use Gear\Integration\Suite\SrcMvc\SrcMvcGenerator\SrcMvcGenerator;
use Gear\Integration\Suite\ControllerMvc\ControllerMvcSuite\ControllerMvcSuite;
use Gear\Integration\Suite\ControllerMvc\ControllerMvcGenerator\ControllerMvcGenerator;
use Gear\Integration\Suite\Integration\Integration;
use Gear\Util\Vector\ArrayService;

$string   = new StringService();
$column   = new Columns();
$names    = new ResolveNames($string);
$location = new Location();
$persist  = new Persist($location);

$arrayService = new ArrayService();
    
$migrationFile = new MigrationFile(
    $persist,
    $string,
    $arrayService    
);

$gearfile = new GearFile(
    $persist,
    $string
);
        
$testFile = new TestFile($persist, $string);

$superTestFile = new SuperTestFile($persist, $string);
 
$mvcGenerator = new MvcGenerator(
    $gearfile, 
    $testFile, 
    $migrationFile, 
    $names, 
    $column
);

$srcGenerator = new SrcGenerator(
    $gearfile, 
    $testFile
);

$controllerGenerator = new ControllerGenerator(
    $gearfile, 
    $testFile
);

$srcMvcGenerator = new SrcMvcGenerator(
    $gearfile, 
    $testFile, 
    $migrationFile, 
    $names, 
    $column
);

$controllerMvcGenerator = new ControllerMvcGenerator(
    $gearfile, 
    $testFile,
    $names, 
    $column
);

$mvcSuite = new MvcSuite($mvcGenerator, $superTestFile);
$srcSuite = new SrcSuite($srcGenerator, $superTestFile);
$controllerSuite = new ControllerSuite($controllerGenerator, $superTestFile);
$srcMvcSuite = new SrcMvcSuite($srcMvcGenerator, $superTestFile);
$controllerMvcSuite = new ControllerMvcSuite($controllerMvcGenerator, $superTestFile);

$integration = new Integration($srcSuite, $srcMvcSuite, $controllerSuite, $controllerMvcSuite, $mvcSuite);


function getParam($type, $argv)
{
    $preset = [
        'longname' => false,
        'min' => false,
        'count' => 4,
        'type' => null
    ***REMOVED***;
    
    $params = $argv;
    unset($params[0***REMOVED***);
    $params = array_values($params);
    
    foreach ($params as $param) {
        $paramSet = explode('=', $param);
        
        $paramName = str_replace('--', '', $paramSet[0***REMOVED***);
        
        if (!in_array($paramName, array_keys($preset))) {
            throw new \Exception('Parameter not valid');
        }
        
        if ($paramName != $type) {
            continue;
        }
                
        if (count($paramSet) == 1 && in_array($paramName, ['longname', 'min'***REMOVED***)) {    
            return true;
        }
        
        if ($paramName == 'count') {
            return intval($paramSet[1***REMOVED***);
        }
        return $paramSet[1***REMOVED***;
    }
    
    return $preset[$type***REMOVED***;
}

$integration->integrate(getParam('type', $argv), getParam('count', $argv), getParam('longname', $argv), getParam('min', $argv)); 
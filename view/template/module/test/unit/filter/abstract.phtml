namespace <?php echo $this->module; ?>\<?php echo $this->module; ?>Test\RepositoryTest;

/**
use PHPUnit\Framework\TestCase;
 * @group Filter
 */
class AbstractFilterTest extends TestCase
{
    protected $pais;

    protected function setUp() : void
    {
        $this->bootstrap = new \<?php echo $this->module; ?>\ZendServiceLocator();
    }

    protected function tearDown() : void
    {
        unset($this->bootstrap);
    }

    public function testEmailAdressValidator()
    {

        $abstract = $this->getMockBuilder('<?php echo $this->module; ?>\Filter\AbstractFilter')
        ->disableOriginalConstructor()
        ->getMockForAbstractClass();

        $abstract->setTranslate($this->bootstrap->get('MvcTranslator'));


        $validator = $abstract->getEmailAddressValidator('E-mail');

        $this->assertArrayHasKey('name', $validator);
        $this->assertArrayHasKey('options', $validator);
        $this->assertArrayHasKey('break_chain_on_failure', $validator);
        $this->assertContains('EmailAddress', $validator);

    }


    public function testNoEmptyValidator()
    {
        $abstract = $this->getMockBuilder('<?php echo $this->module; ?>\Filter\AbstractFilter')
        ->disableOriginalConstructor()
        ->getMockForAbstractClass();

        $abstract->setTranslate($this->bootstrap->get('MvcTranslator'));


        $validator = $abstract->getEmailAddressValidator('E-mail');

        $this->assertArrayHasKey('name', $validator);
        $this->assertArrayHasKey('options', $validator);
        $this->assertArrayHasKey('break_chain_on_failure', $validator);
        $this->assertContains('NotEmpty', $validator);
    }
}

namespace <?php echo $this->module;?>\Service;

use GearBase\Service\AbstractService;
<?php echo $this->use;?>

class <?php echo $this->class;?> extends <?php echo $this->extends.PHP_EOL;?>
{
<?php echo $this->attribute;?>

    protected $sessionName;

    protected $authService;

    public function getTableHead()
    {
        $map = $this->get<?php echo $this->repository;?>()->getMapReferences();
        return $this->getTableHeadFromMap($map);
    }

    public function getSessionName()
    {
        if (!isset($this->sessionName)) {
            $this->sessionName = '<?= $this->nameVar;?>Session';
        }
        return $this->sessionName;
    }

    public function selectOneBy(array $data)
    {
        return $this->get<?php echo $this->repository;?>()->selectOneBy($data);
    }

<?php echo $this->functions;?>
<?php //echo $this->authadapter;?>
<?php //echo $this->selectbyid;?>
<?php //echo $this->selectviewbyid;?>
<?php //echo $this->overwrite;?>

    public function selectAll($select = array())
    {
        $cache      = $this->getCache();
        $repository = $this->get<?php echo $this->repository;?>();

        if ($select == null) {
            $select = array();
        }

        $selectCache  = $this->cacheCompare(sprintf('%sSelect', $this->getSessionName()), $select);
        $orderByCache = $this->cacheCompare(sprintf('%sOrderBy', $this->getSessionName()), $this->getOrderBy());
        $orderCache   = $this->cacheCompare(sprintf('%sOrder', $this->getSessionName()), $this->getOrder());

        if ($selectCache && $orderByCache && $orderCache) {
            if ($cache->hasItem(sprintf('%sResult', $this->getSessionName()))) {
                $resultSet = $cache->getItem(sprintf('%sResult', $this->getSessionName()));
            }
        }
<?php echo $this->selectall[0***REMOVED***;?>
<?php //echo $this->selectall;?>

        return $this->setSelectAllCache($resultSet);
    }



    public function create($data)
    {
        $repository = $this->get<?php echo $this->repository;?>();
<?php echo $this->create[0***REMOVED***;?>
<?php echo $this->create[1***REMOVED***;?>
<?php //echo $this->preImageCreate;?>
<?php //echo $this->insertColumns;?>
        $<?= $this->nameVar;?> = $repository->insert($data);
        if ($<?= $this->nameVar;?>) {
<?php echo $this->create[2***REMOVED***;?>
<?php// echo $this->imageCreate;?>
            $this->clearCache();
        }
        return $<?= $this->nameVar;?>;
    }


    public function update($idTable, $data = array())
    {
        $repository = $this->get<?php echo $this->repository;?>();
<?php echo $this->update[0***REMOVED***;?>
<?php echo $this->update[1***REMOVED***;?>
<?php //echo $this->preImageUpdate;?>
<?php //echo $this->updateColumns;?>
        $<?= $this->nameVar;?> = $repository->update($idTable, $data);
        if ($<?= $this->nameVar;?>) {
<?php echo $this->update[2***REMOVED***;?>
<?php //echo $this->imageUpdate;?>
            $this->clearCache();
        }
        return $<?= $this->nameVar;?>;
    }

    public function delete($idTable)
    {
        $entity = $this->selectById($idTable);

        if (!$entity) {
            return false;
        }

        $repository = $this->get<?php echo $this->repository;?>();
        $<?= $this->nameVar;?> = $repository->delete($entity);


        if ($<?= $this->nameVar;?>) {
<?php echo (isset($this->delete[0***REMOVED***) ? $this->delete[0***REMOVED*** : '');?>
<?php //if ($this->imagemService) :?>
            $this->getImageService()->deleteImages($idTable, '<?= $this->str('url', $this->baseName)?>');
<?php //endif;?>
<?php echo (isset($this->delete[1***REMOVED***) ? $this->delete[1***REMOVED*** : '');?>
<?php //echo $this->imageDelete;?>
            $this->clearCache();
        }
        return $<?= $this->nameVar;?>;
    }

    public function extract(\<?php echo $this->module;?>\Entity\<?= $this->str('class', $this->baseName)?> $data)
    {
        $repository = $this->get<?php echo $this->repository;?>();
        return $repository->extract($data);
    }
<?php if ($this->imagemService) :?>

    public function getImageService()
    {
        if (!isset($this->imagemService)) {
            $this->imagemService =
            $this->getServiceLocator()->get('GearImage\Service\ImagemService');
        }
        return $this->imagemService;
    }
<?php endif;?>
}

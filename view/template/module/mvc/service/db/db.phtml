namespace <?php echo $this->namespace;?>;

use GearBase\Service\AbstractService;
use <?php echo $this->entity;?>;
<?php echo $this->use;?>

/**
 * Interaction between <?php echo $this->table;?>Controller and Services
 *
 * PHP Version 5
 *
 * @category Service
 * @package <?php echo $this->package.PHP_EOL;?>
 * @author Mauricio Piber <mauriciopiber@gmail.com>
 * @license GPL3-0 http://www.gnu.org/licenses/gpl-3.0.en.html
 * @link http://pibernetwork.com
 */
class <?php echo $this->class;?> extends <?php echo $this->extends.PHP_EOL;?>
{
<?php echo $this->attribute;?>
    protected $sessionName;

    protected $authService;

<?php echo $this->authadapter;?>
<?php echo ($this->constructor) ? $this->constructor.PHP_EOL : '';?>
    /**
     * Get the values used to generate Html Table on List Action.
     *
     * @return array
     */
    public function getTableHead()
    {
        $map = $this->get<?php echo $this->repository;?>()->getMapReferences();
        return $this->getTableHeadFromMap($map);
    }

    /**
     * Get the Service session name.
     *
     * @return string
     */
    public function getSessionName()
    {
        if (!isset($this->sessionName)) {
            $this->sessionName = '<?php echo $this->var;?>Session';
        }
        return $this->sessionName;
    }

    /**
     * Select one row based on criteria.
     *
     * @param array $data Criteria
     *
     * @return null|<?php echo $this->entity.PHP_EOL;?>
     */
    public function selectOneBy(array $data)
    {
        return $this->get<?php echo $this->repository;?>()->selectOneBy($data);
    }
<?php echo $this->selectviewbyid;?>

    /**
     * Select All Rows from <?php echo $this->tableLabel;?> table.
     *
     * Use cache to store data until change.
     *
     * @param array $select Criteria
     *
     * @return array
     */
    public function selectAll($select = array())
    {
        $this->cache      = $this->getCache();
        $this->repository = $this->get<?php echo $this->repository;?>();

<?php echo $this->selectall;?>
    }
<?php echo $this->overwrite;?>

    /**
     * Create a new <?php echo $this->tableLabel;?> on database.
     *
     * Apply additional logic and then send forward to Repository. Clear Service Cache if successful created.
     *
     * @param array $data Valid $_POST
     *
     * @return null|<?php echo $this->entity.PHP_EOL;?>
     */
    public function create($data)
    {
        $repository = $this->get<?php echo $this->repository;?>();

<?php echo isset($this->create[0***REMOVED***) ? $this->create[0***REMOVED*** : PHP_EOL;?>

        $<?php echo $this->var;?> = $repository->insert($data);
        if ($<?php echo $this->var;?>) {
<?php echo isset($this->create[1***REMOVED***) ? $this->create[1***REMOVED*** : PHP_EOL;?>
            $this->clearCache();
        }
        return $<?php echo $this->var;?>;
    }

    /**
     * Update a existing <?php echo $this->tableLabel;?> on database.
     *
     * Apply additional logic and then send forward to Repository. Clear Service Cache if successful updated.
     *
     * @param integer $idTable Id
     * @param array   $data    Valid $_POST
     *
     * @return null|<?php echo $this->entity.PHP_EOL;?>
     */
    public function update($idTable, $data = array())
    {
        $repository = $this->get<?php echo $this->repository;?>();

<?php echo isset($this->update[0***REMOVED***) ? $this->update[0***REMOVED*** : PHP_EOL;?>

        $<?php echo $this->var;?> = $repository->update($idTable, $data);
        if ($<?php echo $this->var;?>) {
<?php echo isset($this->update[1***REMOVED***) ? $this->update[1***REMOVED*** : PHP_EOL;?>
            $this->clearCache();
        }
        return $<?php echo $this->var;?>;
    }

    /**
     * Delete a existing <?php echo $this->tableLabel;?> by Id.
     *
     * @param integer $idTable Id
     *
     * @return array
     */
    public function delete($idTable)
    {
        $entity = $this->selectById($idTable);

        if (!$entity) {
            return ['success' => false, 'error' => 'EntityNotFound'***REMOVED***;
        }

        $repository = $this->get<?php echo $this->repository;?>();
        $<?php echo $this->var;?> = $repository->deleteSafe($entity);


        if ($<?php echo $this->var;?>) {
<?php if ($this->tableUploadImage) :?>
            $this->getImageService()->deleteImages($idTable, '<?php echo $this->var;?>');
<?php endif;?>
<?php echo (isset($this->delete[0***REMOVED***) ? $this->delete[0***REMOVED*** : PHP_EOL);?>
            $this->clearCache();
        }
        return $<?php echo $this->var;?>;
    }

    /**
     * Convert Entity to Array.
     *
     * @param <?php echo $this->entityFile;?> $data <?php echo $this->tableLabel;?> Entity
     *
     * @return array
     */
    public function extract(<?php echo $this->entityFile;?> $data)
    {
        $repository = $this->get<?php echo $this->repository;?>();
        return $repository->extract($data);
    }

<?php echo $this->selectbyid;?>
<?php echo $this->functions;?>
}

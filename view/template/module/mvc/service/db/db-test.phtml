namespace <?php echo $this->module;?>Test\ServiceTest;

use GearBaseTest\AbstractTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
 * @group Service
 */
class <?php echo $this->serviceNameClass;?>Test extends AbstractTestCase
{
    protected $<?php echo $this->uline;?>;
<?php echo $this->static;?>

    public function setUp()
    {
        parent::setUp();
        $this->cache = $this->prophesize('Zend\Cache\Storage\Adapter\Memcached');
    }

    public function get<?php echo $this->serviceNameClass;?>()
    {
        if (!isset($this-><?php echo $this->uline;?>)) {
            $this-><?php echo $this->uline;?> =
                $this->bootstrap->getServiceLocator()->get(
                    '<?php echo $this->module;?>\Service\<?php echo $this->serviceNameClass;?>'
                );
        }
        return $this-><?php echo $this->uline;?>;
    }

    /**
     * @group <?php echo $this->module.PHP_EOL;?>
     * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
     */
    public function testServiceLocator()
    {
        $serviceLocator = $this->get<?php echo $this->serviceNameClass;?>()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    /**
     * @group <?php echo $this->module.PHP_EOL;?>
     * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
    */
    public function testCallUsingServiceLocator()
    {
        $<?php echo $this->uline;?> = $this->get<?php echo $this->serviceNameClass;?>();
        $this->assertInstanceOf('<?php echo $this->module;?>\Service\<?php echo $this->serviceNameClass;?>', $<?php echo $this->uline;?>);
    }
<?php echo $this->injection;?>

<?php echo $this->extraColumns;?>

    public function testSetSelectAllCache()
    {
        $this->get<?php echo $this->serviceNameClass;?>()->setSessionName('testing');

        $cache = $this->bootstrap->getServiceLocator()->get('memcached');

        if ($cache->hasItem('testingResult')) {
            $cache->removeItem('testingResult');
        }

        $data = $this->get<?php echo $this->serviceNameClass;?>()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
        $data = $this->get<?php echo $this->serviceNameClass;?>()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
    }

    public function testSelectAllCacheWithCache()
    {
        $this->get<?php echo $this->serviceNameClass;?>()->setRouteMatch($this->getRouteMatch(1, '<?php echo $this->firstString;?>', 'DESC'));

        $this->assertEquals('<?php echo $this->firstString;?>', $this->get<?php echo $this->serviceNameClass;?>()->getOrderBy());
        $this->assertEquals('DESC', $this->get<?php echo $this->serviceNameClass;?>()->getOrder());

        $this->get<?php echo $this->serviceNameClass;?>()->selectAll();

        $this->get<?php echo $this->serviceNameClass;?>()->setRouteMatch($this->getRouteMatch(1, '<?php echo $this->firstString;?>', 'ASC'));

        $this->assertEquals('<?php echo $this->firstString;?>', $this->get<?php echo $this->serviceNameClass;?>()->getOrderBy());
        $this->assertEquals('ASC', $this->get<?php echo $this->serviceNameClass;?>()->getOrder());

        $cache = $this->bootstrap->getServiceLocator()->get('memcached');

        if ($cache->hasItem($this->get<?php echo $this->serviceNameClass;?>()->getSessionName())) {
            $cache->removeItem($this->get<?php echo $this->serviceNameClass;?>()->getSessionName());
        }

        $this->get<?php echo $this->serviceNameClass;?>()->setRouteMatch(
            $this->getRouteMatch(1, 'id<?php echo $this->class;?>', 'DESC')
        );

        $this->assertEquals(
            'id<?php echo $this->class;?>',
            $this->get<?php echo $this->serviceNameClass;?>()->getOrderBy()
        );
        $this->assertEquals('DESC', $this->get<?php echo $this->serviceNameClass;?>()->getOrder());
    }

    public function testGetMappingInfo()
    {
        $<?php echo $this->serviceNameVar;?> = $this->get<?php echo $this->serviceNameClass;?>();
        $resultSet = $<?php echo $this->serviceNameVar;?>->getTableHead();
        $this->assertTrue(is_array($resultSet));
    }

    public function testSelectById()
    {
        $<?php echo $this->serviceNameVar;?> = $this->get<?php echo $this->serviceNameClass;?>();
<?php echo $this->mockauthadapter.PHP_EOL;?>
        $resultSet = $<?php echo $this->serviceNameVar;?>->selectById(1);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(1, $resultSet->getId<?php echo $this->class;?>());
    }
<?php echo $this->selectbyidnull;?>

<?php echo $this->oneBy;?>

    /**
     * @group service.create
     */
    public function testCreate()
    {
        $entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $data = array(
        );

        $this->repository = $this->prophesize('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository');
        $this->repository->insert($data)->willReturn($entity)->shouldBeCalled();

        $this->get<?php echo $this->serviceNameClass;?>()->set<?php echo $this->class;?>Repository($this->repository->reveal());

<?php echo ($this->createMock !== null) ? $this->createMock.PHP_EOL : '';?>
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->create($data);

        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(31, $resultSet->getId<?php echo $this->class;?>());

        return $resultSet;
    }

    /**
     * @group service.update
     */
    public function testUpdate()
    {
        $entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $data = array(
        );

        $this->repository = $this->prophesize('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository');
        $this->repository->update(31, $data)->willReturn($entity)->shouldBeCalled();

        $this->get<?php echo $this->serviceNameClass;?>()->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $this->get<?php echo $this->serviceNameClass;?>()->setCache($this->cache->reveal());

<?php echo ($this->updateMock !== null) ? $this->updateMock.PHP_EOL : '';?>
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()
            ->update(31, $data);


        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(31, $resultSet->getId<?php echo $this->class;?>());

        return $resultSet;
    }

    /**
     * @group service.delete
     */
    public function testDelete()
    {
        $entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $this->repository = $this->prophesize('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository');
        $this->repository->selectById(31)->willReturn($entity->reveal())->shouldBeCalled();
        $this->repository->deleteSafe($entity->reveal())->willReturn(true)->shouldBeCalled();

        $this->get<?php echo $this->serviceNameClass;?>()->setCache($this->cache->reveal());
        $this->get<?php echo $this->serviceNameClass;?>()->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $<?php echo $this->serviceNameVar;?> = $this->get<?php echo $this->serviceNameClass;?>();

        $resultSet = $<?php echo $this->serviceNameVar;?>->delete(31);
        $this->assertTrue($resultSet);
    }

    /**
     * @group service.delete
     */
    public function testDeleteWithoutExistingData()
    {

        $this->repository = $this->prophesize('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository');
        $this->repository->selectById(31)->willReturn(false)->shouldBeCalled();

        $this->get<?php echo $this->serviceNameClass;?>()->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $<?php echo $this->uline;?> = $this->get<?php echo $this->serviceNameClass;?>();

        $resultSet = $<?php echo $this->uline;?>->delete(31);
        $this->assertFalse($resultSet['success'***REMOVED***);
        $this->assertEquals('EntityNotFound', $resultSet['error'***REMOVED***);
    }

    /**
     * @group service.extract
     */
    public function testExtract()
    {
        $entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $data = ['id<?php echo $this->serviceNameClass;?>' => 31***REMOVED***;
        $this->repository = $this->prophesize('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository');
        $this->repository->extract($entity)->willReturn($data)->shouldBeCalled();


        $this->get<?php echo $this->serviceNameClass;?>()->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $<?php echo $this->uline;?> = $this->get<?php echo $this->serviceNameClass;?>();

        $resultSet = $<?php echo $this->uline;?>->extract($entity->reveal());
        $this->assertEquals($data, $resultSet);
    }

    public function getRouteMatch($page, $orderBy = 'id<?php echo $this->class;?>', $order = 'DESC')
    {
        $routeMatch = new \Zend\Mvc\Router\Http\RouteMatch(array(
            'controller' => '<?php echo $this->module;?>\Controller\<?php echo $this->class;?>',
            'action'     => 'list',
            'page' => $page,
            'orderBy' => $orderBy,
            'order' => $order
        ));

        $routeMatch->setMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->classUrl;?>');
        return $routeMatch;
    }
}

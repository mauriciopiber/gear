namespace <?php echo $this->module;?>Test\<?php echo $this->namespaceFile;?>;

use PHPUnit\Framework\TestCase;
use Zend\Mvc\Router\Http\RouteMatch;
use <?php echo $this->module;?>\<?php echo $this->namespace;?>\<?php echo $this->serviceNameClass;?>;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
 * @group Service
 */
class <?php echo $this->serviceNameClass;?>Test extends TestCase
{
<?php echo $this->static;?>
    public function setUp()
    {
        parent::setUp();
<?php echo $this->constructor;?>
    }
<?php echo $this->extraColumns;?>
<?php echo $this->selectall;?>

    public function testSetSelectAllCache()
    {
        $this->service->setSessionName('testing');

        $data = ['data' => true***REMOVED***;

        $this->cache->hasItem('testingResult')->willReturn(null);
        $this->cache->addItem('testingResult', $data)->willReturn(null);
        $this->cache->getItem('testingResult')->willReturn($data);

        $selected = $this->service->setSelectAllCache($data);
        $this->assertEquals($data, $selected);
        $selected = $this->service->setSelectAllCache($data);
        $this->assertEquals($data, $selected);
    }

    public function testSelectAllCacheWithCache()
    {
        $this->service->setRouteMatch($this->getRouteMatch(1, '<?php echo $this->firstString;?>', 'DESC'));

        $this->assertEquals('<?php echo $this->firstString;?>', $this->service->getOrderBy());
        $this->assertEquals('DESC', $this->service->getOrder());

        $this->service->selectAll();

        $this->service->setRouteMatch($this->getRouteMatch(1, '<?php echo $this->firstString;?>', 'ASC'));

        $this->assertEquals('<?php echo $this->firstString;?>', $this->service->getOrderBy());
        $this->assertEquals('ASC', $this->service->getOrder());

        $this->service->setRouteMatch(
            $this->getRouteMatch(1, 'id<?php echo $this->class;?>', 'DESC')
        );

        $this->assertEquals(
            'id<?php echo $this->class;?>',
            $this->service->getOrderBy()
        );
        $this->assertEquals('DESC', $this->service->getOrder());
    }

    public function testTableHead()
    {
        $this->repository = $this->prophesize('<?php echo $this->repository;?>');
        $this->repository->getMapReferences()->willReturn([***REMOVED***)->shouldBeCalled();

        $this->service->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $resultSet = $this->service->getTableHead();
        $this->assertTrue(is_array($resultSet));
    }
<?php echo $this->selectviewbyid;?>
<?php echo $this->selectbyidinvalid;?>
<?php echo $this->selectbyid;?>

    public function testSelectOne()
    {
        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $this->entity->getId<?php echo $this->class;?>()->willReturn(30);

        $this->repository = $this->prophesize('<?php echo $this->repository;?>');
        $this->repository->selectOneBy(['id<?php echo $this->class;?>' => 30***REMOVED***)->willReturn($this->entity->reveal())->shouldBeCalled();

        $this->service->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $resultSet = $this->service->selectOneBy(
            array(
                'id<?php echo $this->class;?>' =>
                    30
            )
        );
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(
            30,
            $resultSet->getId<?php echo $this->class;?>()
        );
    }
<?php echo $this->selectbyidnull;?>

    /**
     * @group service.create
     */
    public function testCreate()
    {
        $entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $data = array(
<?php echo $this->create[1***REMOVED***;?>
        );

        $this->repository = $this->prophesize('<?php echo $this->repository;?>');
        $this->repository->insert($data)->willReturn($entity)->shouldBeCalled();

        $this->service->set<?php echo $this->class;?>Repository($this->repository->reveal());

<?php echo ($this->create[0***REMOVED*** !== null) ? $this->create[0***REMOVED***.PHP_EOL : '';?>
        $resultSet = $this->service->create($data);

        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(31, $resultSet->getId<?php echo $this->class;?>());

        return $resultSet;
    }

    /**
     * @group service.update
     */
    public function testUpdate()
    {
        $entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $data = array(
<?php echo $this->update[1***REMOVED***;?>
        );

        $this->repository = $this->prophesize('<?php echo $this->repository;?>');
        $this->repository->update(31, $data)->willReturn($entity)->shouldBeCalled();

        $this->service->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $this->service->setCache($this->cache->reveal());

<?php echo ($this->update[0***REMOVED*** !== null) ? $this->update[0***REMOVED***.PHP_EOL : '';?>
        $resultSet = $this->service->update(31, $data);


        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(31, $resultSet->getId<?php echo $this->class;?>());

        return $resultSet;
    }
<?php echo $this->delete;?>

    /**
     * @group service.delete
     */
    public function testDeleteWithoutExistingData()
    {
        $this->repository->selectById(31)->willReturn(false)->shouldBeCalled();

        $resultSet = $this->service->delete(31);
        $this->assertFalse($resultSet['success'***REMOVED***);
        $this->assertEquals('EntityNotFound', $resultSet['error'***REMOVED***);
    }

    /**
     * @group service.extract
     */
    public function testExtract()
    {
        $entity = $this->prophesize('<?php echo $this->entity;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $data = ['id<?php echo $this->serviceNameClass;?>' => 31***REMOVED***;
        $this->repository = $this->prophesize('<?php echo $this->repository;?>');
        $this->repository->extract($entity)->willReturn($data)->shouldBeCalled();

        $this->service->set<?php echo $this->class;?>Repository($this->repository->reveal());

        $resultSet = $this->service->extract($entity->reveal());
        $this->assertEquals($data, $resultSet);
    }

    public function getRouteMatch($page, $orderBy = 'id<?php echo $this->class;?>', $order = 'DESC')
    {
        $routeMatch = new RouteMatch(array(
            'controller' => '<?php echo $this->module;?>\Controller\<?php echo $this->class;?>',
            'action'     => 'list',
            'page' => $page,
            'orderBy' => $orderBy,
            'order' => $order
        ));

        $routeMatch->setMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->classUrl;?>');
        return $routeMatch;
    }
}

namespace <?php echo $this->module;?>Test\<?php echo $this->namespace; ?>;

use PHPUnit\Framework\TestCase;
use Interop\Container\ContainerInterface;
use <?php echo $this->module?>\<?php echo $this->testNamespace;?>\<?php echo $this->class;?>Factory;
use <?php echo $this->module?>\<?php echo $this->testNamespace;?>\<?php echo $this->class;?>;
use <?php echo $this->filter;?>;
use Zend\Db\Adapter\Adapter;
use Zend\Mvc\I18n\Translator;
use Doctrine\ORM\EntityManager;
use Zend\Http\Request;
use Zend\Uri\Uri;

/**
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->class.PHP_EOL;?>
 * @group Form
 */
class <?php echo $this->class;?>FactoryTest extends TestCase
{
    public function setUp() : void
    {
        parent::setUp();

        $this->container = $this->prophesize(ContainerInterface::class);
        $this->entityManager = $this->prophesize(EntityManager::class);
        $this->filter = $this->prophesize(<?php echo $this->filterFile;?>::class);
        $this->request = $this->prophesize(Request::class);
        $this->translator = $this->prophesize(Translator::class);
        $this->uri = $this->prophesize(Uri::class);
        $this->adapter = $this->prophesize(Adapter::class);
    }

    public function test<?php echo $this->class;?>Factory()
    {
        $this->uri->getPath()->willReturn('<?php echo $this->moduleUrl;?>/<?php echo $this->classUrl;?>/edit/30');
        $this->request->getUri()->willReturn($this->uri->reveal());

        $this->filter->setAdapter($this->adapter->reveal())->shouldNotBeCalled();
        $this->filter->getInputFilter(30)->willReturn($this->filter->reveal());

        $this->container->get('doctrine.entitymanager.orm_default')
          ->willReturn($this->entityManager->reveal())
          ->shouldBeCalled();

        $this->container->get(<?php echo $this->filterFile;?>::class)
          ->willReturn($this->filter->reveal())
          ->shouldBeCalled();

        $this->container->get(Adapter::class)->willReturn($this->adapter->reveal());
        $this->container->get('Request')->willReturn($this->request->reveal())->shouldBeCalled();
        $this->container->get('Translator')->willReturn($this->translator->reveal())->shouldBeCalled();

        $factory = new <?php echo $this->class;?>Factory();

        $instance = $factory->__invoke($this->container->reveal(), null);

        $this->assertInstanceOf(<?php echo $this->class;?>::class, $instance);
    }
}

namespace <?php echo $this->module;?>Test\ControllerTest;

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase as TestCase;
use <?php echo $this->module?>\Controller\<?php echo $this->controllerName; ?>;
use Zend\Http\Request;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;

/**
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->tableName.PHP_EOL;?>
 * @group Controller
 */
class <?php echo $this->controllerName; ?>Test extends TestCase
{
<?php echo $this->extraColumns;?>
<?php echo $this->extraFilter;?>
<?php echo $this->static;?>

    public function setUp()
    {
        $this->setApplicationConfig(
            include \GearBase\Module::getProjectFolder().'/config/application.config.php'
        );
        parent::setUp();

        $this->controller = new <?php echo $this->controllerName; ?>();
        $this->request    = new Request();
        $this->routeMatch = new RouteMatch(array('controller' => '<?php echo $this->controllerName; ?>'));
        $this->event      = new MvcEvent();

        $this->event->setRouteMatch($this->routeMatch);
        $this->controller->setEvent($this->event);

        $this-><?php echo $this->tableVar;?>Form = $this->prophesize('<?php echo $this->module;?>\Form\<?php echo $this->tableName;?>Form');
<?php echo $this->setUp;?>
        $this-><?php echo $this->tableVar;?>SearchForm = $this->prophesize('<?php echo $this->module;?>\Form\Search\<?php echo $this->tableName;?>SearchForm');
        $this-><?php echo $this->tableVar;?>Service = $this->prophesize('<?php echo $this->module;?>\Service\<?php echo $this->tableName;?>Service');

        $requestPlugin = new \GearBase\Controller\Plugin\RequestPlugin();
        $this->controller->getPluginManager()->setService('getRequestPlugin', $requestPlugin);

        $this->url = $this->prophesize('Zend\Mvc\Controller\Plugin\Url');
        $this->controller->getPluginManager()->setService('url', $this->url->reveal());

        $this->controller->set<?php echo $this->tableName;?>Form($this-><?php echo $this->tableVar;?>Form->reveal());
        $this->controller->set<?php echo $this->tableName;?>Service($this-><?php echo $this->tableVar;?>Service->reveal());
        $this->controller->set<?php echo $this->tableName;?>SearchForm($this-><?php echo $this->tableVar;?>SearchForm->reveal());
    }

    protected function tearDown()
    {
        $refl = new \ReflectionObject($this);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() && 0 !== strpos($prop->getDeclaringClass()->getName(), 'PHPUnit_')) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
    }

    /**
     * @group controller.create
     */
    public function testEnterCreatePage()
    {
        $this->routeMatch->setParam('action', 'create');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
    public function testSendPostToCreatePageRedirectToGet()
    {
        $this->url->fromRoute(<?php echo $this->class;?>Controller::CREATE)->willReturn(<?php echo $this->class;?>Controller::CREATE);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'create');
        $this->request->setMethod('POST');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(303, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group Controller.Create
     */
    public function testWhenCreateDisplaySuccessfulWithRedirect()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/criar', 'POST', array());
        $this->assertResponseStatusCode(303);
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/criar');
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('create');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/create');
    }
<?php echo $this->createReturnValidation;?>

    public function testWhenEditDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar/page//orderBy');
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }

    public function testWhenEditRedirectWithInvalidIdToListing()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/6000');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar/page//orderBy');
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }


    public function testWhenListDisplaySuccessful()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('<?php echo $this->module;?>\Service\<?php echo $this->class;?>Service');
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('list');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/list');
    }


    public function testWhenFilterWithoutData()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('<?php echo $this->module;?>\Service\<?php echo $this->class;?>Service');
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('list');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/list');
    }


    public function testWhenFilterWithoutDataWithPRG()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('<?php echo $this->module;?>\Service\<?php echo $this->class;?>Service');
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('list');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/list');
    }


    public function testDeleteSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/excluir/6000');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('delete');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/delete');
    }


    public function testWhenDeleteDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/excluir');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('delete');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/delete');
    }


    public function testViewSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/visualizar/6000');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar/page//orderBy');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('view');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/view');
    }

    public function testWhenViewDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/visualizar');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('view');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/view');
    }

    /**
     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
     * @group Controller.Create
     */
    // enviar submit da tela com dados completo,
    // ser adicionado o elemento e redirecionado para página de editar com sucesso = 1.
    public function testCreateSuccess()
    {
        $newData = array(
<?php echo $this->insertArray;?>
        );
        $this->mockUser();
<?php echo $this->mockPRG;?>
<?php echo $this->extraInsert; ?>
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/criar', 'POST', $newData);
        $this->assertResponseStatusCode(302);

        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('create');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/create');


        $resultSet =  $this->bootstrap
            ->getEntityManager()
            ->getRepository('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>')
            ->findOneBy(
                array(
<?php echo $this->insertSelect;?>
                ),
                array('id<?php echo $this->class;?>' => 'DESC')
            );

        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);

        $this->assertRedirectTo(
            sprintf(
                '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/%d/1',
                $resultSet->getId<?php echo $this->class;?>()
            )
        );

<?php echo $this->insertAssert;?>

        return $resultSet;
    }

   /**
     * @depends testCreateSuccess
     */
    public function testWhenListDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();

        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenViewDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/visualizar/'.$resultSet->getId<?php echo $this->class;?>()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('view');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/view');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenListRedirectSuccessfulPRGWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>(),
            'POST'
        );

        $this->assertResponseStatusCode(303);
        $this->assertRedirectTo(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>()
        );
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }
<?php echo $this->editReturnValidation;?>

    /**
     * @depends testCreateSuccess
     */
    public function testEditAfterCreateOk($resultSet)
    {

        $newData = array(
<?php echo $this->updateArray;?>
        );
        $this->mockUser();
<?php echo $this->mockPRG;?>
<?php echo $this->extraUpdate; ?>
        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>(),
            'POST',
            $newData
        );
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');

        $this->assertRedirectTo(
            sprintf(
                '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/%d/1',
                $resultSet->getId<?php echo $this->class;?>()
            )
        );
    }
<?php echo (!empty($this->functions)) ? $this->functions : '';?>
     /**
     * @depends testCreateSuccess
     */
    public function testDeleteAfterEditOk($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            sprintf(
                '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/excluir/%d',
                $resultSet->getId<?php echo $this->class;?>()
            )
        );
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('delete');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/delete');
    }
}

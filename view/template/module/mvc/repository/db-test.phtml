namespace <?php echo $this->module;?>Test\RepositoryTest;

use GearBaseTest\AbstractTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->class.PHP_EOL;?>
 * @group Repository
 */
class <?php echo $this->class;?>RepositoryTest extends AbstractTestCase
{
    protected $<?php echo $this->varLenght;?>;
<?php echo $this->static;?>

    public function get<?php echo $this->class;?>()
    {
        if (!isset($this-><?php echo $this->varLenght;?>)) {
            $this-><?php echo $this->varLenght;?> =
                $this->bootstrap->getServiceLocator()->get('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository');
        }
        return $this-><?php echo $this->varLenght;?>;
    }

    public function testServiceLocator()
    {
        $serviceLocator = $this->get<?php echo $this->class;?>()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    public function testCallUsingServiceLocator()
    {
        $<?php echo $this->varLenght;?> = $this->get<?php echo $this->class;?>();
        $this->assertInstanceOf('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository', $<?php echo $this->varLenght;?>);
    }


    public function testSelectAll()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll();
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(<?php echo $this->fixtureSize;?>, count($resultSet));
    }


    public function testSelectAllWithBasicFilter()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll(array('likeField' => ''));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(<?php echo $this->fixtureSize;?>, count($resultSet));
    }

    public function testSelectAllWithBasicFilterFoundNone()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll(array('likeField' => 'abcdefAhauhsdfguagdfaf'));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(0, count($resultSet));
    }

    public function testSelectByIdReturnEntity()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectById(1);
        $this->assertNotNull($resultSet);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);

        $this->assertEquals(1, $resultSet->getId<?php echo $this->class;?>());
    }

    public function testSelectByIdReturnNull()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectById(60000);
        $this->assertNull($resultSet);
    }

    public function testDeleteNoExistData()
    {
        $this->mockIdentity();
        $resultSet = $this->get<?php echo $this->class;?>()->delete(6000);
        $this->assertFalse($resultSet);
    }


<?php echo $this->oneBy;?>

<?php echo $this->order;?>


    public function testCreateNewData()
    {
        $this->mockIdentity();
        $data = array(
<?php echo $this->insertArray;?>
        );
        $resultSet = $this->get<?php echo $this->class;?>()->insert($data);
        $this->bootstrap->getEntityManager()->refresh($resultSet);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(is_null($resultSet->getUpdated()));
<?php echo $this->insertAssert;?>
        return $resultSet;
    }

    /**
     * @depends testCreateNewData
     */
    public function testUpdateExistData($entityToUpdate)
    {
        $this->mockIdentity();
        $data = array(
<?php echo $this->updateArray; ?>
        );

        $resultSet = $this->get<?php echo $this->class;?>()
          ->update($entityToUpdate->getId<?php echo $this->class;?>(), $data);

        $this->bootstrap->getEntityManager()->refresh($resultSet);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(!is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(!is_null($resultSet->getUpdated()));
<?php echo $this->updateAssert;?>
        return $resultSet;
    }


    /**
     * @depends testUpdateExistData
     */
    public function testDeleteExistData($entityToDelete)
    {
        $entity = $this->get<?php echo $this->class;?>()
          ->selectById($entityToDelete->getId<?php echo $this->class;?>());

        $this->mockIdentity();
        $resultSet = $this->get<?php echo $this->class;?>()->delete($entity);
        $this->assertTrue($resultSet);
    }
}

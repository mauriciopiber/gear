namespace <?php echo $this->module;?>Test\RepositoryTest;

use GearBaseTest\AbstractTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->class.PHP_EOL;?>
 * @group Repository
 */
class <?php echo $this->class;?>RepositoryTest extends AbstractTestCase
{
    protected $<?php echo $this->varLenght;?>;
<?php echo $this->static;?>

    public function get<?php echo $this->class;?>()
    {
        if (!isset($this-><?php echo $this->varLenght;?>)) {
            $this-><?php echo $this->varLenght;?> =
                $this->bootstrap->getServiceLocator()->get('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository');
        }
        return $this-><?php echo $this->varLenght;?>;
    }

    public function testServiceLocator()
    {
        $serviceLocator = $this->get<?php echo $this->class;?>()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    public function testCallUsingServiceLocator()
    {
        $<?php echo $this->varLenght;?> = $this->get<?php echo $this->class;?>();
        $this->assertInstanceOf('<?php echo $this->module;?>\Repository\<?php echo $this->class;?>Repository', $<?php echo $this->varLenght;?>);
    }


    public function testSelectAll()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll();
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(<?php echo $this->fixtureSize;?>, count($resultSet));
    }


    public function testSelectAllWithBasicFilter()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll(array('likeField' => ''));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(<?php echo $this->fixtureSize;?>, count($resultSet));
    }

    public function testSelectAllWithBasicFilterFoundNone()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll(array('likeField' => 'abcdefAhauhsdfguagdfaf'));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(0, count($resultSet));
    }

    public function testSelectByIdReturnEntity()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectById(1);
        $this->assertNotNull($resultSet);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);

        $this->assertEquals(1, $resultSet->getId<?php echo $this->class;?>());
    }

    public function testSelectByIdReturnNull()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectById(60000);
        $this->assertNull($resultSet);
    }

    public function testSelectOneByIdMyController()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectOneBy(
            array(
                '<?php echo $this->idTableVar;?>' =>
                    15
            )
        );
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(
            15,
            $resultSet->get<?php echo $this->idTable;?>()
        );
    }

    public function testSelectAllOrderByIdMyControllerASC()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll(
            array(),
            '<?php echo $this->idTableVar;?>',
            'ASC'
        );
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
        $data = array_shift($resultSet);
        $this->assertEquals(
            '1',
            $data['<?php echo $this->idTableVar;?>'***REMOVED***
        );
    }

    public function testSelectAllOrderByIdMyControllerDESC()
    {
        $resultSet = $this->get<?php echo $this->class;?>()->selectAll(
            array(),
            '<?php echo $this->idTableVar;?>',
            'DESC'
        );
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
        $data = array_shift($resultSet);
        $this->assertEquals(
            '30',
            $data['<?php echo $this->idTableVar;?>'***REMOVED***
        );
    }

    public function testCreateNewData()
    {
        $entity = new \<?php echo $this->module;?>\Entity\<?php echo $this->class;?>;

        $data = array();

        $entityManager = $this->prophesize('Doctrine\ORM\EntityManager');

        $hydrator = $this->prophesize('GearBase\Hydrator\DateHydrator');
        $hydrator->hydrate($data, $entity)->willReturn($entity);

        $this->get<?php echo $this->class;?>()->setGearAdminHydrator($hydrator->reveal());
        $this->get<?php echo $this->class;?>()->setEntityManager($entityManager->reveal());

        $resultSet = $this->get<?php echo $this->class;?>()->insert($data);

        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(null, $resultSet->getId<?php echo $this->class;?>());
    }

    public function testUpdateExistData()
    {
        $entity = $this->getMockBuilder('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', ['getId<?php echo $this->class;?>'***REMOVED***)->getMock();
        $entity->expects($this->any())->method('getId<?php echo $this->class;?>')->willReturn(31);

        $data = array(
        );

        $entityManager = $this->prophesize('Doctrine\ORM\EntityManager');
        $entityManager->persist($entity)->willReturn(true);
        $entityManager->flush()->willReturn(true);
        $this->get<?php echo $this->class;?>()->setEntityManager($entityManager->reveal());

        $hydrator = $this->prophesize('GearBase\Hydrator\DateHydrator');
        $hydrator->hydrate($data, $entity)->willReturn($entity);
        $this->get<?php echo $this->class;?>()->setGearAdminHydrator($hydrator->reveal());


        $entityRepository = $this->prophesize('Doctrine\\ORM\\EntityRepository');
        $entityRepository->findOneBy(['id<?php echo $this->class;?>' => 31***REMOVED***)->willReturn($entity);
        $this->get<?php echo $this->class;?>()->setRepository($entityRepository->reveal());


        $resultSet = $this->get<?php echo $this->class;?>()->update(31, $data);

        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);
        $this->assertEquals(31, $resultSet->getId<?php echo $this->class;?>());
    }

    public function testDeleteNoExistData()
    {
        $entityRepository = $this->prophesize('Doctrine\ORM\EntityRepository');
        $entityRepository->findOneBy(['id<?php echo $this->class;?>' => 6000***REMOVED***)->willReturn(null);

        $this->get<?php echo $this->class;?>()->setRepository($entityRepository->reveal());

        $resultSet = $this->get<?php echo $this->class;?>()->delete(6000);
        $this->assertFalse($resultSet);
    }

    public function testDeleteExistData()
    {
        $data = [***REMOVED***;

        $entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>');
        $entity->getId<?php echo $this->class;?>()->willReturn(31);

        $entityRepository = $this->prophesize('Doctrine\ORM\EntityRepository');
        $entityRepository->findOneBy(['id<?php echo $this->class;?>' => 31***REMOVED***)->willReturn($entity->reveal());

        $this->get<?php echo $this->class;?>()->setRepository($entityRepository->reveal());

        $entityManager = $this->prophesize('Doctrine\ORM\EntityManager');
        $entityManager->remove($entity)->willReturn(true);
        $entityManager->flush()->willReturn(true);

        $this->get<?php echo $this->class;?>()->setEntityManager($entityManager->reveal());

        $resultSet = $this->get<?php echo $this->class;?>()->delete($entity);
        $this->assertTrue($resultSet);
    }
}

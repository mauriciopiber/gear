namespace <?php echo $this->module;?>Test\<?php echo $this->namespace;?>;

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;
use <?php echo $this->module?>\<?php echo $this->testNamespace;?>\<?php echo $this->controllerName; ?>;
use Zend\Http\Request;
use Zend\Mvc\MvcEvent;
use Zend\Router\RouteMatch;

/**
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->tableName.PHP_EOL;?>
 * @group Controller
 * @group <?php echo $this->tableName;?>Controller
 */
class <?php echo $this->controllerName; ?>Test extends TestCase
{

<?php echo $this->extraColumns;?>
<?php echo $this->extraFilter;?>
<?php echo $this->static;?>

    public function setUp() : void
    {
        parent::setUp();
<?php echo ($this->constructor) ? $this->constructor.PHP_EOL : '';?>
    }

    protected function tearDown() : void
    {
        $refl = new \ReflectionObject($this);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() && 0 !== strpos($prop->getDeclaringClass()->getName(), 'PHPUnit_')) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
    }

    /**
     * @group controller.create
     */
    public function testEnterCreatePage()
    {
        $this->routeMatch->setParam('action', 'create');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
<?php echo $this->createPrg;?>

    /**
     * @group controller.create
     */
<?php echo $this->createValidate;?>

    /**
     * @group controller.create
     */
<?php echo $this->createSuccessful;?>

<?php echo $this->createReturnValidation;?>
    /**
     * @group controller.edit
     */
    public function testWhenEditDisplaySuccessful()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'edit');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditRedirectWithInvalidIdToListing()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this-><?php echo $this->tableVar;?>Service->selectById(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 6000);
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testDisplayEditSuccessful()
    {
        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->table;?>');

        $this-><?php echo $this->tableVar;?>Service->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.edit
     */
<?php echo $this->editPrg;?>

    /**
     * @group controller.edit
     */
<?php echo $this->editValidate;?>

    /**
     * @group controller.edit
     */
<?php echo $this->editSuccessful;?>

    /**
     * @group controller.list
     */
    public function testWhenListDisplaySuccessful()
    {
        $this-><?php echo $this->tableVar;?>Service->selectAll()->willReturn([***REMOVED***)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'list');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.view
     */
    public function testWhenViewDisplaySuccessfulWithValidId()
    {
        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->table;?>');
        //$this->entity->getId<?php echo $this->table;?>()->willReturn(31)->shouldBeCalled();

        $this-><?php echo $this->tableVar;?>Service-><?php echo $this->selectView;?>(31)->willReturn($this->entity->reveal());
        $this-><?php echo $this->tableVar;?>Service->extract($this->entity->reveal())->willReturn([***REMOVED***);

        $this->routeMatch->setParam('action', 'view');
        $this->routeMatch->setParam('id', 31);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.view
     */
    public function testViewSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this-><?php echo $this->tableVar;?>Service-><?php echo $this->selectView;?>(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'view');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.view
     */
    public function testWhenViewDisplaySuccessful()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'view');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.delete
     */
    public function testDeleteSucessfullAndRedirectToListWithFailNotFound()
    {
        $this-><?php echo $this->tableVar;?>Service->delete(6000)->willReturn(['success' => false, 'error' => 'EntityNotFound'***REMOVED***);

        $this->routeMatch->setParam('action', 'delete');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $result);
    }

    /**
     * @group controller.delete
     */
    public function testDeleteSucessfullAndRedirectToListWithSuccessful()
    {
        $this-><?php echo $this->tableVar;?>Service->delete(6000)->willReturn(['success' => true***REMOVED***);

        $this->routeMatch->setParam('action', 'delete');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $result);
    }

    /**
     * @group controller.delete
     */
    public function testWhenDeleteDisplaySuccessful()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'delete');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }
<?php echo (!empty($this->functions)) ? $this->functions : '';?>
}

namespace <?php echo $this->module;?>Test\ControllerTest;

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase as TestCase;
use <?php echo $this->module?>\Controller\<?php echo $this->controllerName; ?>;
use Zend\Http\Request;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;

/**
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->tableName.PHP_EOL;?>
 * @group Controller
 * @group <?php echo $this->tableName;?>Controller
 */
class <?php echo $this->controllerName; ?>Test extends TestCase
{
<?php echo $this->extraColumns;?>
<?php echo $this->extraFilter;?>
<?php echo $this->static;?>

    public function setUp()
    {
        $this->setApplicationConfig(
            include \GearBase\Module::getProjectFolder().'/config/application.config.php'
        );
        parent::setUp();

        $this->controller = new <?php echo $this->controllerName; ?>();
        $this->request    = new Request();
        $this->routeMatch = new RouteMatch(array('controller' => '<?php echo $this->controllerName; ?>'));
        $this->event      = new MvcEvent();

        $this->event->setRouteMatch($this->routeMatch);
        $this->controller->setEvent($this->event);

        $this-><?php echo $this->tableVar;?>Form = $this->prophesize('<?php echo $this->module;?>\Form\<?php echo $this->tableName;?>Form');
<?php echo $this->setUp;?>
        $this-><?php echo $this->tableVar;?>SearchForm = $this->prophesize('<?php echo $this->module;?>\Form\Search\<?php echo $this->tableName;?>SearchForm');
        $this-><?php echo $this->tableVar;?>Service = $this->prophesize('<?php echo $this->module;?>\Service\<?php echo $this->tableName;?>Service');

        $requestPlugin = new \GearBase\Controller\Plugin\RequestPlugin();
        $this->controller->getPluginManager()->setService('getRequestPlugin', $requestPlugin);

        $this->url = $this->prophesize('Zend\Mvc\Controller\Plugin\Url');
        $this->controller->getPluginManager()->setService('url', $this->url->reveal());

        $this->controller->set<?php echo $this->tableName;?>Form($this-><?php echo $this->tableVar;?>Form->reveal());
        $this->controller->set<?php echo $this->tableName;?>Service($this-><?php echo $this->tableVar;?>Service->reveal());
        $this->controller->set<?php echo $this->tableName;?>SearchForm($this-><?php echo $this->tableVar;?>SearchForm->reveal());
    }

    protected function tearDown()
    {
        $refl = new \ReflectionObject($this);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() && 0 !== strpos($prop->getDeclaringClass()->getName(), 'PHPUnit_')) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
    }

    /**
     * @group controller.create
     */
    public function testEnterCreatePage()
    {
        $this->routeMatch->setParam('action', 'create');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.create
     */
<?php echo $this->createPrg;?>

    /**
     * @group controller.create
     */
<?php echo $this->createValidate;?>

    /**
     * @group controller.create
     */
<?php echo $this->createSuccessful;?>

<?php echo $this->createReturnValidation;?>
    /**
     * @group controller.edit
     */
    public function testWhenEditDisplaySuccessful()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'edit');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenEditRedirectWithInvalidIdToListing()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this-><?php echo $this->tableVar;?>Service->selectById(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 6000);
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testDisplayEditSuccessful()
    {
        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->table;?>');

        $this-><?php echo $this->tableVar;?>Service->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenListRedirectSuccessfulPRGWithValidId()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::EDIT, ['id' => 31***REMOVED***)->willReturn(<?php echo $this->table;?>Controller::EDIT);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->table;?>');

        $this-><?php echo $this->tableVar;?>Service->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $this->request->setMethod('POST');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(303, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.edit
     */
    public function testWhenListRedirectSuccessfulPRGWithValidIdReturnValidation()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::EDIT, ['id' => 31***REMOVED***)->willReturn(<?php echo $this->table;?>Controller::EDIT.'/31');
        $this->url->setController($this->controller)->shouldBeCalled();

        $prg = $this->prophesize('Zend\Mvc\Controller\Plugin\PostRedirectGet');
        $prg->setController($this->controller)->shouldBeCalled();
        $prg->__invoke('<?php echo $this->moduleUrl;?>/<?php echo $this->tableUrl;?>/edit/31', true)->willReturn([***REMOVED***);

        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->table;?>');

        $this->controller->getPluginManager()->setService('postredirectget', $prg->reveal());

        $this-><?php echo $this->tableVar;?>Service->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $this->request->setMethod('POST');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.edit
     */
    public function testEditSuccessfull()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::EDIT, ['id' => 31***REMOVED***)->willReturn(<?php echo $this->table;?>Controller::EDIT);
        $this->url->fromRoute("<?php echo $this->moduleUrl;?>/<?php echo $this->tableUrl;?>/edit", ["id" => 31, "success" => 1***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::EDIT.'/31/1');
        $this->url->setController($this->controller)->shouldBeCalled();

        $data = array(
        );

        $this->prg = $this->prophesize('Zend\Mvc\Controller\Plugin\PostRedirectGet');
        $this->prg->setController($this->controller)->shouldBeCalled();

        $this->prg->__invoke('<?php echo $this->moduleUrl;?>/<?php echo $this->tableUrl;?>/edit', true)->willReturn($data);

        $this->controller->getPluginManager()->setService('postredirectget', $this->prg->reveal());

        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->table;?>');
        $this->entity->getId<?php echo $this->table;?>()->willReturn(31)->shouldBeCalled();

        $this-><?php echo $this->tableVar;?>Form->setData($data)->shouldBeCalled();
        $this-><?php echo $this->tableVar;?>Form->isValid()->willReturn(true)->shouldBeCalled();
        $this-><?php echo $this->tableVar;?>Form->getData()->willReturn($data)->shouldBeCalled();
        $this-><?php echo $this->tableVar;?>Service->update(31, $data)->willReturn($this->entity)->shouldBeCalled();
        $this-><?php echo $this->tableVar;?>Service->selectById(31)->willReturn($this->entity);

        $this->routeMatch->setParam('action', 'edit');
        $this->routeMatch->setParam('id', 31);

        $this->request->setMethod('POST');

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.list
     */
    public function testWhenListDisplaySuccessful()
    {
        $this-><?php echo $this->tableVar;?>Service->selectAll()->willReturn([***REMOVED***)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'list');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.view
     */
    public function testWhenViewDisplaySuccessfulWithValidId()
    {
        $this->entity = $this->prophesize('<?php echo $this->module;?>\Entity\<?php echo $this->table;?>');
        //$this->entity->getId<?php echo $this->table;?>()->willReturn(31)->shouldBeCalled();

        $this-><?php echo $this->tableVar;?>Service->selectById(31)->willReturn($this->entity->reveal());
        $this-><?php echo $this->tableVar;?>Service->extract($this->entity->reveal())->willReturn([***REMOVED***);

        $this->routeMatch->setParam('action', 'view');
        $this->routeMatch->setParam('id', 31);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\ViewModel', $result);
    }

    /**
     * @group controller.view
     */
    public function testViewSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this-><?php echo $this->tableVar;?>Service->selectById(6000)->willReturn(null);

        $this->routeMatch->setParam('action', 'view');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.view
     */
    public function testWhenViewDisplaySuccessful()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'view');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }

    /**
     * @group controller.delete
     */
    public function testDeleteSucessfullAndRedirectToListWithFailNotFound()
    {
        $this-><?php echo $this->tableVar;?>Service->delete(6000)->willReturn(['success' => false, 'error' => 'EntityNotFound'***REMOVED***);

        $this->routeMatch->setParam('action', 'delete');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $result);
    }

    /**
     * @group controller.delete
     */
    public function testDeleteSucessfullAndRedirectToListWithSuccessful()
    {
        $this-><?php echo $this->tableVar;?>Service->delete(6000)->willReturn(['success' => true***REMOVED***);

        $this->routeMatch->setParam('action', 'delete');
        $this->routeMatch->setParam('id', 6000);

        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $result);
    }

    /**
     * @group controller.delete
     */
    public function testWhenDeleteDisplaySuccessful()
    {
        $this->url->fromRoute(<?php echo $this->table;?>Controller::LISTS, [***REMOVED***, [***REMOVED***, false)->willReturn(<?php echo $this->table;?>Controller::LISTS);
        $this->url->setController($this->controller)->shouldBeCalled();

        $this->routeMatch->setParam('action', 'delete');
        $result = $this->controller->dispatch($this->request);
        $response = $this->controller->getResponse();
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $result);
    }
<?php echo (!empty($this->functions)) ? $this->functions : '';?>
}

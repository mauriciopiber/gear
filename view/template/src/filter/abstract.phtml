namespace <?php echo $this->module;?>\Filter;

use Zend\ServiceManager\ServiceLocatorAwareInterface;
use Zend\ServiceManager\ServiceLocatorInterface;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

abstract class AbstractFilter extends InputFilter implements
    ServiceLocatorAwareInterface
{
    protected $serviceLocator;

    protected $translate;

    public function getTranslate()
    {
        if (!isset($this->translate)) {
            $this->translate = $this->getServiceLocator()->get('translator');
        }
        return $this->translate;
    }

    public function getNotEmptyValidator($entity)
    {
        return array(
            'name' => 'NotEmpty',
            'options' => array(
                'messages' => array(
                    \Zend\Validator\NotEmpty::IS_EMPTY =>
                    sprintf(
                        $this->getTranslate()->translate('%s é obrigatório, por favor preencha para continuar.'),
                        $this->getTranslate()->translate($entity)
                    )
                ),
            ),
            'break_chain_on_failure' => true
        );
    }


    public function __construct()
    {
        parent::__construct();
    }

    public function setServiceLocator(ServiceLocatorInterface $serviceLocator)
    {
        $this->serviceLocator = $serviceLocator;
    }

    public function getServiceLocator()
    {
        return $this->serviceLocator;
    }
}

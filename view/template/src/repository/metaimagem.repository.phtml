namespace <?php echo $this->module;?>\Repository;

use <?php echo $this->module;?>\Repository\AbstractRepository;

class <?php echo $this->class;?> extends AbstractRepository
{
    public function getMapReferences()
    {
        return array(
<?php echo $this->map;?>
        );
    }

    public function getRepositoryName()
    {
        return '<?= $this->module;?>\Entity\<?= $this->baseClass;?>';
    }

    public function getAliase()
    {
        return '<?php echo $this->aliase;?>';
    }

    public function selectById($id<?= $this->baseClassCut;?>)
    {
        return $this->getRepository()->findOneBy(
            array('id<?= $this->baseClass;?>' => $id<?= $this->baseClassCut;?>)
        );
    }

    public function update($idTable, $data)
    {
        $entity = $this->selectById($idTable);
        $entity->setUpdated(new \DateTime('now'));
        $entity->setUpdatedBy($this->getUser());
        $this->hydrate($data, $entity);
        $this->persist($entity);
        return $entity;
    }

    public function insert($data)
    {
        $entity = new \<?= $this->module;?>\Entity\<?= $this->baseClass;?>();
        $entity->setCreated(new \DateTime('now'));
        $entity->setCreatedBy($this->getUser());
        $this->hydrate($data, $entity);
        $this->persist($entity);
        return $entity;
    }

    public function getUploadSize($name)
    {
        $config = $this->getServiceLocator()->get('config');

        if (!isset($config['fileUpload'***REMOVED***['size'***REMOVED***[$name***REMOVED***)) {
            throw new \Exception(sprintf('Size not found for %s', $name));
        }

        return $config['fileUpload'***REMOVED***['size'***REMOVED***[$name***REMOVED***;
    }

    public function getUploadDir($contexto)
    {
        $config = $this->getServiceLocator()->get('config');

        if (!isset($config['fileUpload'***REMOVED***) || !isset($config['fileUpload'***REMOVED***['uploadDir'***REMOVED***)) {
            throw new \Exception('File Upload was not ready to use');
        }

        $uploadDir = $config['fileUpload'***REMOVED***['uploadDir'***REMOVED***.$contexto;


        if (!is_dir($uploadDir)) {
            mkdir($uploadDir);
        }

        return $uploadDir;
    }

    public function getRefDir($contexto)
    {
        $config = $this->getServiceLocator()->get('config');

        if (!isset($config['fileUpload'***REMOVED***) || !isset($config['fileUpload'***REMOVED***['refDir'***REMOVED***)) {
            throw new \Exception('File Upload was not ready to use');
        }

        return $config['fileUpload'***REMOVED***['refDir'***REMOVED***.'/'.$contexto;
    }

    public function getImagemService()
    {
        if (!isset($this->imagemService)) {
            $this->imagemService =
            $this->getServiceLocator()->get('GearImage\Service\ImagemService');
        }
        return $this->imagemService;
    }
}

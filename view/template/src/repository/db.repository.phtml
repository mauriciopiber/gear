namespace <?php echo $this->module;?>\Repository;

use <?php echo $this->module;?>\Repository\AbstractRepository;

class <?php echo $this->class;?>Repository extends AbstractRepository
{
    public function selectAll()
    {
        return $this->getEntityManager()->getRepository('<?= $this->module;?>\Entity\<?= $this->baseClass;?>')->findAll();
    }

    public function getRepository()
    {
        return $this->getEntityManager()->getRepository('<?= $this->module;?>\Entity\<?= $this->baseClass;?>');
    }

    public function selectByid($id<?= $this->baseClass;?>)
    {
        return $this->getEntityManager()->getRepository('<?= $this->module;?>\Entity\<?= $this->baseClass;?>')->findOneBy(
            array('id<?= $this->baseClass;?>' => $id<?= $this->baseClass;?>)
        );
    }

    public function update($idTable, $data)
    {
        $entity = $this->selectByid($idTable);
        $entity->setUpdated(new \DateTime('now'));
        $this->hydrate($data, $entity);
        $this->persist($entity);
        return $entity;
    }

    public function insert($data)
    {
        $entity = new \<?= $this->module;?>\Entity\<?= $this->baseClass;?>();
        $entity->setCreated(new \DateTime('now'));
        $this->hydrate($data, $entity);
        $this->persist($entity);
        return $entity;
    }

    public function delete($idTable)
    {
        $entity = $this->selectByid($idTable);
        if ($entity !== null) {
            $this->getEntityManager()->remove($entity);
            $this->getEntityManager()->flush();
        }
        return $entity;
    }
}

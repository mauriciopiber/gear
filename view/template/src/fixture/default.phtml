namespace <?php echo $this->module;?>\Fixture;

use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\DataFixtures\FixtureInterface;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;
<?php echo $this->use;?>

class <?php echo $this->name;?> extends AbstractFixture implements
    FixtureInterface,
    OrderedFixtureInterface
{
<?php echo $this->attribute;?>
    public function load(ObjectManager $manager)
    {
        $this->manager = $manager;

        foreach ($this->getFixture() as $i => $fixture) {
            $reference = $i+1;
            $<?php echo $this->str('var', str_replace('Fixture', '', $this->name));?> = new \<?php echo $this->module?>\Entity\<?php echo str_replace('Fixture', '', $this->name);?>();
<?php foreach ($this->fields as $field):?>
<?php echo $field.PHP_EOL;?>
<?php endforeach;?>
            $userReferenced = $this->getReferenceToEntity($reference);
            $<?php echo $this->str('var', str_replace('Fixture', '', $this->name));?>->setCreated(new \DateTime('now'));
            $<?php echo $this->str('var', str_replace('Fixture', '', $this->name));?>->setCreatedBy($userReferenced);
            $this->manager->persist($<?php echo $this->str('var', str_replace('Fixture', '', $this->name));?>);
            $this->manager->flush();
            $this->addReference("<?php echo $this->str('url', str_replace('Fixture', '', $this->name)); ?>-$reference", $<?php echo $this->str('var', str_replace('Fixture', '', $this->name))?>);
        }

    }

/**
 * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
 */

    public function getFixture()
    {
<?php echo $this->getFixture;?>
        return array(
<?php foreach ($this->data as $item):?>
<?php echo $item;?>
<?php endforeach;?>

        );

    }

/**
 * @SuppressWarnings(PHPMD.CyclomaticComplexity)
 */
    public function getReferenceToEntity($referenced = 1)
    {
<?php echo $this->userlaw.PHP_EOL;?>
        $userId = $this->getReference($referencedName);
        return $this->manager
          ->getRepository('Security\Entity\User')
          ->findOneBy(array('idUser' => $userId->getIdUser()));
    }

    public function getOrder()
    {
        return <?php echo $this->order;?>;
    }
}

namespace <?php echo $this->module;?>\<?php echo $this->module;?>Test\RepositoryTest;

class <?php echo $this->serviceNameClass;?>Test extends \PHPUnit_Framework_TestCase
{
    protected $<?php echo $this->serviceNameUline;?>;

    protected function setUp()
    {
        $this->bootstrap = new \<?php echo $this->module;?>\ZendServiceLocator();
    }

    protected function tearDown()
    {
        $entityManager = $this->bootstrap->getEntityManager();
        $connection = $entityManager->getConnection();
        $connection->close();
        $refl = new \ReflectionObject($this);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() && 0 !== strpos($prop->getDeclaringClass()->getName(), 'PHPUnit_')) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
        unset($this->bootstrap);
    }

    public function get<?php echo $this->serviceNameClass;?>()
    {
        if (!isset($this-><?php echo $this->serviceNameUline;?>)) {
            $this-><?php echo $this->serviceNameUline;?> =
                $this->bootstrap->getServiceLocator()->get('<?php echo $this->module;?>\Repository\<?php echo $this->serviceNameClass;?>Repository');
        }
        return $this-><?php echo $this->serviceNameUline;?>;
    }

    /**
     * @group <?php echo $this->module.PHP_EOL;?>
     * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
     */
    public function testServiceLocator()
    {
        $serviceLocator = $this->get<?php echo $this->serviceNameClass;?>()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }


    /**
     * @group <?php echo $this->module.PHP_EOL;?>
     * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
     */
    public function testCallUsingServiceLocator()
    {
        $<?php echo $this->serviceNameUline;?> = $this->get<?php echo $this->serviceNameClass;?>();
        $this->assertInstanceOf('<?php echo $this->module;?>\Repository\<?php echo $this->serviceNameClass;?>Repository', $<?php echo $this->serviceNameUline;?>);
    }


    public function testSelectAll()
    {
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->selectAll();
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(30, count($resultSet));
    }


    public function testSelectAllWithBasicFilter()
    {
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->selectAll(array('likeField' => '3'));
        $this->assertTrue(is_array($resultSet));
        $this->assertEquals(4, count($resultSet));
    }


    public function testSelectByIdReturnEntity()
    {
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->selectById(1);
        $this->assertNotNull($resultSet);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->serviceNameClass;?>', $resultSet);

        $this->assertEquals(1, $resultSet->getId<?php echo $this->serviceNameClass;?>());
    }

    public function testSelectByIdReturnNull()
    {
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->selectById(60000);
        $this->assertNull($resultSet);
    }

    public function testDeleteNoExistData()
    {
        $this->mockIdentity();
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->delete(6000);
        $this->assertFalse($resultSet);
    }
    <?php echo $this->partialLoop('template/test/unit/repository/one-by.phtml', $this->oneBy);?>

    <?php echo $this->partialLoop('template/test/unit/repository/order.phtml', $this->order);?>


    public function testCreateNewData()
    {
        $this->mockIdentity();
        $data = array(
<?php foreach ($this->insertArray as $column) : ?>
<?php echo $column;?>
<?php endforeach;?>
        );
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->insert($data);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->serviceNameClass;?>', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(is_null($resultSet->getUpdated()));
<?php foreach ($this->insertAssert as $column) : ?>
<?php echo $column;?>
<?php endforeach;?>
        return $resultSet;
    }

    /**
     * @depends testCreateNewData
     */
    public function testUpdateExistData($entityToUpdate)
    {
        $this->mockIdentity();
        $data = array(
<?php foreach ($this->updateArray as $column) : ?>
<?php echo $column;?>
<?php endforeach;?>
        );

        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->update($entityToUpdate->getId<?php echo $this->serviceNameClass;?>(), $data);
        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->serviceNameClass;?>', $resultSet);

        $this->assertTrue(!is_null($resultSet->getCreatedBy()));
        $this->assertTrue(!is_null($resultSet->getCreated()));
        $this->assertTrue(!is_null($resultSet->getUpdatedBy()));
        $this->assertTrue(!is_null($resultSet->getUpdated()));
<?php foreach ($this->updateAssert as $column) : ?>
<?php echo $column;?>
<?php endforeach;?>
        return $resultSet;
    }

    /**
     * @depends testUpdateExistData
     */
    public function testDeleteExistData($entityToDelete)
    {
        $this->mockIdentity();
        $resultSet = $this->get<?php echo $this->serviceNameClass;?>()->delete($entityToDelete->getId<?php echo $this->serviceNameClass;?>());
        $this->assertTrue($resultSet);
    }

    public function mockIdentity()
    {
        $this->bootstrap
        ->getServiceManager()
        ->setAllowOverride(true);

        $zfcUserMock =  $this->bootstrap
          ->getEntityManager()
          ->getRepository('Security\Entity\User')
          ->findOneBy(array('email' => 'mauriciopiber@gmail.com'));

        $authMock = $this->getMock('ZfcUser\Controller\Plugin\ZfcUserAuthentication');

        $autenticationService = $this->getMock('Zend\Authentication\AuthenticationService');
        $autenticationService->expects($this->any())
        ->method('resetAdapter')
        ->will($this->returnValue(true));

        $autenticationService->expects($this->any())
        ->method('logoutAdapters')
        ->will($this->returnValue(true));


        $autenticationService->expects($this->any())
        ->method('getIdentity')
        ->will($this->returnValue($zfcUserMock));

        $authAdapterMock = $this->getMock('ZfcUser\Authentication\Adapter\AdapterChain');

        $authAdapterMock->expects($this->any())
        ->method('clearIdentity')
        ->will($this->returnValue(true));

        $authMock->expects($this->any())
        ->method('hasIdentity')
        -> will($this->returnValue(true));

        $authMock->expects($this->any())
        ->method('getIdentity')
        ->will($this->returnValue($zfcUserMock));

        $authMock->expects($this->any())
        ->method('getAuthAdapter')
        ->will($this->returnValue($authAdapterMock));

        $authMock->expects($this->any())
        ->method('getAuthService')
        ->will($this->returnValue($autenticationService));

        $this->bootstrap
        ->getServiceManager()
        ->get('ControllerPluginManager')->setService('zfcUserAuthentication', $authMock);

        $this->bootstrap
        ->getServiceManager()
        ->get('ServiceManager')->setService('zfcuser_auth_service', $autenticationService);
    }
}

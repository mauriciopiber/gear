namespace <?php echo $this->module;?>\<?php echo $this->module;?>Test\ServiceTest;

class <?php echo $this->serviceNameClass;?>Test extends \PHPUnit_Framework_TestCase
{
    protected $<?php echo $this->serviceNameUline;?>;

    protected function setUp()
    {
        $this->bootstrap = new \<?php echo $this->module;?>\ZendServiceLocator();
    }

    protected function tearDown()
    {
        $this->get<?php echo $this->serviceNameClass;?>()->unsetSessionName();
        unset($this->bootstrap);
    }

    public function get<?php echo $this->serviceNameClass;?>()
    {
        if (!isset($this-><?php echo $this->serviceNameUline;?>)) {
            $this-><?php echo $this->serviceNameUline;?> =
                $this->bootstrap->getServiceLocator()->get(
                    '<?php echo $this->module;?>\Service\<?php echo $this->serviceNameClass;?>'
                );
        }
        return $this-><?php echo $this->serviceNameUline;?>;
    }

    /**
     * @group <?php echo $this->module.PHP_EOL;?>
     * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
     */
    public function testServiceLocator()
    {
        $serviceLocator = $this->get<?php echo $this->serviceNameClass;?>()->getServiceLocator();
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
    }

    /**
     * @group <?php echo $this->module.PHP_EOL;?>
     * @group <?php echo $this->serviceNameClass.PHP_EOL;?>
    */
    public function testCallUsingServiceLocator()
    {
        $<?php echo $this->serviceNameUline;?> = $this->get<?php echo $this->serviceNameClass;?>();
        $this->assertInstanceOf('<?php echo $this->module;?>\Service\<?php echo $this->serviceNameClass;?>', $<?php echo $this->serviceNameUline;?>);
    }

<?php echo $this->partialLoop('template/miscellaneous/test-injection-partial.phtml', $this->injection);?>


    public function testSetSelectAllCache()
    {
        $this->mockIdentity();

        $this->get<?php echo $this->serviceNameUline;?>()->setSessionName('testing');

        $cache = $this->bootstrap->getServiceLocator()->get('memcached');

        if ($cache->hasItem('testingResult')) {
            $cache->removeItem('testingResult');
        }

        $data = $this->get<?php echo $this->serviceNameUline;?>()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
        $data = $this->get<?php echo $this->serviceNameUline;?>()->setSelectAllCache(array('data' => true));
        $this->assertEquals(array('data' => true), $data);
    }

    public function mockIdentity()
    {
        $this->bootstrap
        ->getServiceManager()
        ->setAllowOverride(true);

        $zfcUserMock =  $this->bootstrap->getEntityManager()->getRepository('Security\Entity\User')->findOneBy(array('idUser' => 5));

        $authMock = $this->getMock('ZfcUser\Controller\Plugin\ZfcUserAuthentication');

        $autenticationService = $this->getMock('Zend\Authentication\AuthenticationService');
        $autenticationService->expects($this->any())
        ->method('resetAdapter')
        ->will($this->returnValue(true));

        $autenticationService->expects($this->any())
        ->method('logoutAdapters')
        ->will($this->returnValue(true));


        $autenticationService->expects($this->any())
        ->method('getIdentity')
        ->will($this->returnValue($zfcUserMock));

        $authAdapterMock = $this->getMock('ZfcUser\Authentication\Adapter\AdapterChain');

        $authAdapterMock->expects($this->any())
        ->method('clearIdentity')
        ->will($this->returnValue(true));

        $authMock->expects($this->any())
        ->method('hasIdentity')
        -> will($this->returnValue(true));

        $authMock->expects($this->any())
        ->method('getIdentity')
        ->will($this->returnValue($zfcUserMock));

        $authMock->expects($this->any())
        ->method('getAuthAdapter')
        ->will($this->returnValue($authAdapterMock));

        $authMock->expects($this->any())
        ->method('getAuthService')
        ->will($this->returnValue($autenticationService));

        $this->bootstrap
        ->getServiceManager()
        ->get('ControllerPluginManager')->setService('zfcUserAuthentication', $authMock);

        $this->bootstrap
        ->getServiceManager()
        ->get('ServiceManager')->setService('zfcuser_auth_service', $autenticationService);
    }

    public function getRouteMatch($page, $orderBy = 'id<?php echo $this->class;?>', $order = 'DESC')
    {
        $routeMatch = new \Zend\Mvc\Router\Http\RouteMatch(array(
            'controller' => '<?php echo $this->module;?>\Controller\<?php echo $this->class;?>',
            'action'     => 'list',
            'page' => $page,
            'orderBy' => $orderBy,
            'order' => $order
        ));

        $routeMatch->setMatchedRouteName('<?php echo $this->str('url', $this->module)?>/<?php echo $this->str('url', $this->class)?>');
        return $routeMatch;
    }
}

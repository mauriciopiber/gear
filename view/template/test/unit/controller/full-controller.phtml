namespace <?php echo $this->module;?>Test\ControllerTest;

use <?php echo $this->module?>Test\ControllerTest\AbstractControllerTestCase;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * @group <?php echo $this->module.PHP_EOL;?>
 * @group <?php echo $this->tableName.PHP_EOL;?>
 * @group Controller
 */
class <?php echo $this->controllerName; ?>Test extends AbstractControllerTestCase
{
<?php echo $this->extraColumns;?>
<?php echo $this->extraFilter;?>
<?php echo $this->static;?>

    public function testSetService()
    {
        $controller = $this->bootstrap
          ->getServiceLocator()
          ->get('ControllerManager')
          ->get('<?php echo $this->module;?>\Controller\<?php echo $this->class; ?>');

        $abstract = $this->getMockBuilder('<?php echo $this->module;?>\Service\<?php echo $this->class; ?>Service')
        ->disableOriginalConstructor()
        ->getMock();

        $controller->set<?php echo $this->class; ?>Service($abstract);

    }

    public function testSetForm()
    {
        $controller = $this->bootstrap
          ->getServiceLocator()
          ->get('ControllerManager')
          ->get('<?php echo $this->module;?>\Controller\<?php echo $this->class; ?>');

        $abstract = $this->getMockBuilder('<?php echo $this->module;?>\Form\<?php echo $this->class; ?>Form')
        ->disableOriginalConstructor()
        ->getMock();

        $controller->set<?php echo $this->class; ?>Form($abstract);
    }

    /**
     * @group Controller.Create
     */
    public function testWhenCreateDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/criar');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('create');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/create');
    }

    /**
     * @group Controller.Create
     */
    public function testWhenCreateDisplaySuccessfulWithRedirect()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/criar', 'POST', array());
        $this->assertResponseStatusCode(303);
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/criar');
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('create');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/create');
    }
<?php echo $this->createReturnValidation;?>

    public function testWhenEditDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar/page//orderBy');
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }

    public function testWhenEditRedirectWithInvalidIdToListing()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/6000');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar/page//orderBy');
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }


    public function testWhenListDisplaySuccessful()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('<?php echo $this->module;?>\Service\<?php echo $this->class;?>Service');
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('list');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/list');
    }


    public function testWhenFilterWithoutData()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('<?php echo $this->module;?>\Service\<?php echo $this->class;?>Service');
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('list');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/list');
    }


    public function testWhenFilterWithoutDataWithPRG()
    {
        $this->mockUser();
        $this->mockServiceSelectAll('<?php echo $this->module;?>\Service\<?php echo $this->class;?>Service');
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar', 'POST', array());
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('list');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/list');
    }


    public function testDeleteSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/excluir/6000');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('delete');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/delete');
    }


    public function testWhenDeleteDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/excluir');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('delete');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/delete');
    }


    public function testViewSucessfullAndRedirectToListWithFailNotFound()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/visualizar/6000');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertRedirectTo('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/listar/page//orderBy');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('view');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/view');
    }

    public function testWhenViewDisplaySuccessful()
    {
        $this->mockUser();
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/visualizar');
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('view');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/view');
    }

    /**
     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
     * @group Controller.Create
     */
    // enviar submit da tela com dados completo,
    // ser adicionado o elemento e redirecionado para p√°gina de editar com sucesso = 1.
    public function testCreateSuccess()
    {
        $newData = array(
<?php foreach ($this->insertArray as $column) : ?>
<?php echo $column;?>
<?php endforeach;?>
        );
        $this->mockUser();
        $this->mockPluginPostRedirectGet($newData);
<?php echo $this->extraInsert;?>
        $this->dispatch('/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/criar', 'POST', $newData);
        $this->assertResponseStatusCode(302);

        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('create');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/create');


        $resultSet =  $this->bootstrap
            ->getEntityManager()
            ->getRepository('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>')
            ->findOneBy(
                array(
<?php foreach ($this->insertSelect as $column) : ?>
<?php echo '        '.$column;?>
<?php endforeach;?>
                ),
                array('id<?php echo $this->class;?>' => 'DESC')
            );

        $this->assertInstanceOf('<?php echo $this->module;?>\Entity\<?php echo $this->class;?>', $resultSet);

        $this->assertRedirectTo(
            sprintf(
                '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/%d/1',
                $resultSet->getId<?php echo $this->class;?>()
            )
        );

<?php foreach ($this->insertAssert as $column) : ?>
<?php echo $column;?>
<?php endforeach;?>

        return $resultSet;
    }

   /**
     * @depends testCreateSuccess
     */
    public function testWhenListDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();

        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenViewDisplaySuccessfulWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/visualizar/'.$resultSet->getId<?php echo $this->class;?>()
        );

        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('view');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/view');
    }

    /**
     * @depends testCreateSuccess
     */
    public function testWhenListRedirectSuccessfulPRGWithValidId($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>(),
            'POST'
        );

        $this->assertResponseStatusCode(303);
        $this->assertRedirectTo(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>()
        );
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');
    }
<?php echo $this->editReturnValidation;?>

    /**
     * @depends testCreateSuccess
     */
    public function testWhenListRedirectSuccessfulPRGWithValidIdReturnEdit($resultSet)
    {

        $newData = array(
<?php foreach ($this->updateArray as $column) : ?>
<?php echo $column;?>
<?php endforeach;?>
        );
        $this->mockUser();
        $this->mockPluginPostRedirectGet($newData);
<?php echo $this->extraUpdate;?>
        $this->dispatch(
            '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/'.$resultSet->getId<?php echo $this->class;?>(),
            'POST',
            $newData
        );
        $this->assertResponseStatusCode(302);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('edit');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/edit');

        $this->assertRedirectTo(
            sprintf(
                '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/editar/%d/1',
                $resultSet->getId<?php echo $this->class;?>()
            )
        );
    }
<?php echo (!empty($this->functions)) ? $this->functions : '';?>
     /**
     * @depends testCreateSuccess
     */
    public function testDeleteSucessfullAndRedirectToListWithSuccess($resultSet)
    {
        $this->mockUser();
        $this->dispatch(
            sprintf(
                '/<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/excluir/%d',
                $resultSet->getId<?php echo $this->class;?>()
            )
        );
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('<?php echo $this->module;?>');
        $this->assertControllerName('<?php echo $this->module;?>\Controller\<?php echo $this->class;?>');
        $this->assertActionName('delete');
        $this->assertControllerClass('<?php echo $this->class;?>Controller');
        $this->assertMatchedRouteName('<?php echo $this->moduleUrl;?>/<?php echo $this->controllerUrl;?>/delete');
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="2256" tokens="1825">
    <file path="/var/www/html/modules/module/Teste/test/functional/FunctionalTester.php" line="387"/>
    <file path="/var/www/html/modules/module/Teste/test/acceptance/AcceptanceTester.php" line="53"/>
    <codefragment>    public function amOnSubdomain($subdomain) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Condition('amOnSubdomain', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Takes a screenshot of the current window and saves it to `tests/_output/debug`.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;amOnPage('/user/edit');
     * $I-&gt;makeScreenshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.png
     * ?&gt;
     * ```
     *
     * @param $name
     * @see \Codeception\Module\WebDriver::makeScreenshot()
     */
    public function makeScreenshot($name) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('makeScreenshot', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Resize the current window.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;resizeWindow(800, 600);
     *
     * ```
     *
     * @param int $width
     * @param int $height
     * @see \Codeception\Module\WebDriver::resizeWindow()
     */
    public function resizeWindow($width, $height) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('resizeWindow', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeCookie('PHPSESSID');
     * ?&gt;
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeCookie()
     */
    public function canSeeCookie($cookie, $params = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeCookie', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeCookie('PHPSESSID');
     * ?&gt;
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeCookie()
     */
    public function seeCookie($cookie, $params = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeCookie', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeCookie()
     */
    public function cantSeeCookie($cookie, $params = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCookie', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeCookie()
     */
    public function dontSeeCookie($cookie, $params = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeCookie', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Sets a cookie with the given name and value.
     * You can set additional cookie params like `domain`, `path`, `expire`, `secure` in array passed as last argument.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;setCookie('PHPSESSID', 'el4ukv0kqbvoirg7nkp4dncpk3');
     * ?&gt;
     * ```
     *
     * @param $name
     * @param $val
     * @param array $params
     * @internal param $cookie
     * @internal param $value
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::setCookie()
     */
    public function setCookie($cookie, $value, $params = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('setCookie', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Unsets cookie with the given name.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::resetCookie()
     */
    public function resetCookie($cookie, $params = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('resetCookie', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a cookie value.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabCookie()
     */
    public function grabCookie($cookie, $params = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('grabCookie', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Open web page at the given absolute URL and sets its hostname as the base host.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;amOnUrl('http://codeception.com');
     * $I-&gt;amOnPage('/quickstart'); // moves to http://codeception.com/quickstart
     * ?&gt;
     * ```
     * @see \Codeception\Module\WebDriver::amOnUrl()
     */
    public function amOnUrl($url) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Condition('amOnUrl', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Opens the page for the given relative URI.
     *
     * ``` php
     * &lt;?php
     * // opens front page
     * $I-&gt;amOnPage('/');
     * // opens /register page
     * $I-&gt;amOnPage('/register');
     * ?&gt;
     * ```
     *
     * @param $page
     * @see \Codeception\Module\WebDriver::amOnPage()
     */
    public function amOnPage($page) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Condition('amOnPage', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string.
     * Specify a locator as the second parameter to match a specific region.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;see('Logout'); // I can suppose user is logged in
     * $I-&gt;see('Sign Up','h1'); // I can suppose it's a signup page
     * $I-&gt;see('Sign Up','//body/h1'); // with XPath
     * ?&gt;
     * ```
     *
     * @param      $text
     * @param null $selector
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::see()
     */
    public function canSee($text, $selector = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('see', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string.
     * Specify a locator as the second parameter to match a specific region.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;see('Logout'); // I can suppose user is logged in
     * $I-&gt;see('Sign Up','h1'); // I can suppose it's a signup page
     * $I-&gt;see('Sign Up','//body/h1'); // with XPath
     * ?&gt;
     * ```
     *
     * @param      $text
     * @param null $selector
     * @see \Codeception\Module\WebDriver::see()
     */
    public function see($text, $selector = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('see', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page doesn't contain the text specified.
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * &lt;?php
     * $I-&gt;dontSee('Login'); // I can suppose user is already logged in
     * $I-&gt;dontSee('Sign Up','h1'); // I can suppose it's not a signup page
     * $I-&gt;dontSee('Sign Up','//body/h1'); // with XPath
     * ?&gt;
     * ```
     *
     * @param      $text
     * @param null $selector
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSee()
     */
    public function cantSee($text, $selector = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSee', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page doesn't contain the text specified.
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * &lt;?php
     * $I-&gt;dontSee('Login'); // I can suppose user is already logged in
     * $I-&gt;dontSee('Sign Up','h1'); // I can suppose it's not a signup page
     * $I-&gt;dontSee('Sign Up','//body/h1'); // with XPath
     * ?&gt;
     * ```
     *
     * @param      $text
     * @param null $selector
     * @see \Codeception\Module\WebDriver::dontSee()
     */
    public function dontSee($text, $selector = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSee', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page source contains the given string.
     *
     * ```php
     * &lt;?php
     * $I-&gt;seeInPageSource('&lt;link rel="apple-touch-icon"');
     * ```
     *
     * @param $text
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeInPageSource()
     */
    public function canSeeInPageSource($text) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeInPageSource', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page source contains the given string.
     *
     * ```php
     * &lt;?php
     * $I-&gt;seeInPageSource('&lt;link rel="apple-touch-icon"');
     * ```
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::seeInPageSource()
     */
    public function seeInPageSource($text) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeInPageSource', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page source doesn't contain the given string.
     *
     * @param $text
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
     */
    public function cantSeeInPageSource($text) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInPageSource', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page source doesn't contain the given string.
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
     */
    public function dontSeeInPageSource($text) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeInPageSource', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Perform a click on a link or a button, given by a locator.
     * If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.
     * For buttons, the "value" attribute, "name" attribute, and inner text are searched.
     * For links, the link text is searched.
     * For images, the "alt" attribute and inner text of any parent links are searched.
     *
     * The second parameter is a context (CSS or XPath locator) to narrow the search.
     *
     * Note that if the locator matches a button of type `submit`, the form will be submitted.
     *
     * ``` php
     * &lt;?php
     * // simple link
     * $I-&gt;click('Logout');
     * // button of form
     * $I-&gt;click('Submit');
     * // CSS button
     * $I-&gt;click('#form input[type=submit***REMOVED***');
     * // XPath
     * $I-&gt;click('//form/*[@type=submit***REMOVED***');
     * // link in context
     * $I-&gt;click('Logout', '#nav');
     * // using strict locator
     * $I-&gt;click(['link' =&gt; 'Login'***REMOVED***);
     * ?&gt;
     * ```
     *
     * @param $link
     * @param $context
     * @see \Codeception\Module\WebDriver::click()
     */
    public function click($link, $context = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('click', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeLink('Logout'); // matches &lt;a href="#"&gt;Logout&lt;/a&gt;
     * $I-&gt;seeLink('Logout','/logout'); // matches &lt;a href="/logout"&gt;Logout&lt;/a&gt;
     * ?&gt;
     * ```
     *
     * @param      $text
     * @param null $url
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeLink()
     */
    public function canSeeLink($text, $url = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeLink', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeLink('Logout'); // matches &lt;a href="#"&gt;Logout&lt;/a&gt;
     * $I-&gt;seeLink('Logout','/logout'); // matches &lt;a href="/logout"&gt;Logout&lt;/a&gt;
     * ?&gt;
     * ```
     *
     * @param      $text
     * @param null $url
     * @see \Codeception\Module\WebDriver::seeLink()
     */
    public function seeLink($text, $url = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeLink', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeLink('Logout'); // I suppose user is not logged in
     * $I-&gt;dontSeeLink('Checkout now', '/store/cart.php');
     * ?&gt;
     * ```
     *
     * @param $text
     * @param null $url
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeLink()
     */
    public function cantSeeLink($text, $url = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeLink', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeLink('Logout'); // I suppose user is not logged in
     * $I-&gt;dontSeeLink('Checkout now', '/store/cart.php');
     * ?&gt;
     * ```
     *
     * @param $text
     * @param null $url
     * @see \Codeception\Module\WebDriver::dontSeeLink()
     */
    public function dontSeeLink($text, $url = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeLink', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current URI contains the given string.
     *
     * ``` php
     * &lt;?php
     * // to match: /home/dashboard
     * $I-&gt;seeInCurrentUrl('home');
     * // to match: /users/1
     * $I-&gt;seeInCurrentUrl('/users/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
     */
    public function canSeeInCurrentUrl($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeInCurrentUrl', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current URI contains the given string.
     *
     * ``` php
     * &lt;?php
     * // to match: /home/dashboard
     * $I-&gt;seeInCurrentUrl('home');
     * // to match: /users/1
     * $I-&gt;seeInCurrentUrl('/users/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
     */
    public function seeInCurrentUrl($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * &lt;?php
     * // to match root url
     * $I-&gt;seeCurrentUrlEquals('/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
     */
    public function canSeeCurrentUrlEquals($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * &lt;?php
     * // to match root url
     * $I-&gt;seeCurrentUrlEquals('/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
     */
    public function seeCurrentUrlEquals($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * &lt;?php
     * // to match root url
     * $I-&gt;seeCurrentUrlMatches('~$/users/(\d+)~');
     * ?&gt;
     * ```
     *
     * @param $uri
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
     */
    public function canSeeCurrentUrlMatches($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * &lt;?php
     * // to match root url
     * $I-&gt;seeCurrentUrlMatches('~$/users/(\d+)~');
     * ?&gt;
     * ```
     *
     * @param $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
     */
    public function seeCurrentUrlMatches($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeInCurrentUrl('/users/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
     */
    public function cantSeeInCurrentUrl($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInCurrentUrl', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeInCurrentUrl('/users/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
     */
    public function dontSeeInCurrentUrl($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * &lt;?php
     * // current url is not root
     * $I-&gt;dontSeeCurrentUrlEquals('/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
     */
    public function cantSeeCurrentUrlEquals($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * &lt;?php
     * // current url is not root
     * $I-&gt;dontSeeCurrentUrlEquals('/');
     * ?&gt;
     * ```
     *
     * @param $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
     */
    public function dontSeeCurrentUrlEquals($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * &lt;?php
     * // to match root url
     * $I-&gt;dontSeeCurrentUrlMatches('~$/users/(\d+)~');
     * ?&gt;
     * ```
     *
     * @param $uri
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
     */
    public function cantSeeCurrentUrlMatches($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * &lt;?php
     * // to match root url
     * $I-&gt;dontSeeCurrentUrlMatches('~$/users/(\d+)~');
     * ?&gt;
     * ```
     *
     * @param $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
     */
    public function dontSeeCurrentUrlMatches($uri) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Executes the given regular expression against the current URI and returns the first match.
     * If no parameters are provided, the full URI is returned.
     *
     * ``` php
     * &lt;?php
     * $user_id = $I-&gt;grabFromCurrentUrl('~$/user/(\d+)/~');
     * $uri = $I-&gt;grabFromCurrentUrl();
     * ?&gt;
     * ```
     *
     * @param null $uri
     *
     * @internal param $url
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabFromCurrentUrl()
     */
    public function grabFromCurrentUrl($uri = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('grabFromCurrentUrl', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I-&gt;seeCheckboxIsChecked('#signup_form input[type=checkbox***REMOVED***'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I-&gt;seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree***REMOVED***');
     * ?&gt;
     * ```
     *
     * @param $checkbox
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
     */
    public function canSeeCheckboxIsChecked($checkbox) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I-&gt;seeCheckboxIsChecked('#signup_form input[type=checkbox***REMOVED***'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I-&gt;seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree***REMOVED***');
     * ?&gt;
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
     */
    public function seeCheckboxIsChecked($checkbox) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I-&gt;seeCheckboxIsChecked('#signup_form input[type=checkbox***REMOVED***'); // I suppose user didn't check the first checkbox in form.
     * ?&gt;
     * ```
     *
     * @param $checkbox
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
     */
    public function cantSeeCheckboxIsChecked($checkbox) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I-&gt;seeCheckboxIsChecked('#signup_form input[type=checkbox***REMOVED***'); // I suppose user didn't check the first checkbox in form.
     * ?&gt;
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
     */
    public function dontSeeCheckboxIsChecked($checkbox) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given input field or textarea contains the given value. 
     * For fuzzy locators, fields are matched by label text, the "name" attribute, CSS, and XPath.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeInField('Body','Type your comment here');
     * $I-&gt;seeInField('form textarea[name=body***REMOVED***','Type your comment here');
     * $I-&gt;seeInField('form input[type=hidden***REMOVED***','hidden_value');
     * $I-&gt;seeInField('#searchform input','Search');
     * $I-&gt;seeInField('//form/*[@name=search***REMOVED***','Search');
     * $I-&gt;seeInField(['name' =&gt; 'search'***REMOVED***, 'Search');
     * ?&gt;
     * ```
     *
     * @param $field
     * @param $value
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeInField()
     */
    public function canSeeInField($field, $value) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeInField', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given input field or textarea contains the given value. 
     * For fuzzy locators, fields are matched by label text, the "name" attribute, CSS, and XPath.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeInField('Body','Type your comment here');
     * $I-&gt;seeInField('form textarea[name=body***REMOVED***','Type your comment here');
     * $I-&gt;seeInField('form input[type=hidden***REMOVED***','hidden_value');
     * $I-&gt;seeInField('#searchform input','Search');
     * $I-&gt;seeInField('//form/*[@name=search***REMOVED***','Search');
     * $I-&gt;seeInField(['name' =&gt; 'search'***REMOVED***, 'Search');
     * ?&gt;
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::seeInField()
     */
    public function seeInField($field, $value) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeInField', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeInField('Body','Type your comment here');
     * $I-&gt;dontSeeInField('form textarea[name=body***REMOVED***','Type your comment here');
     * $I-&gt;dontSeeInField('form input[type=hidden***REMOVED***','hidden_value');
     * $I-&gt;dontSeeInField('#searchform input','Search');
     * $I-&gt;dontSeeInField('//form/*[@name=search***REMOVED***','Search');
     * $I-&gt;dontSeeInField(['name' =&gt; 'search'***REMOVED***, 'Search');
     * ?&gt;
     * ```
     *
     * @param $field
     * @param $value
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeInField()
     */
    public function cantSeeInField($field, $value) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInField', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeInField('Body','Type your comment here');
     * $I-&gt;dontSeeInField('form textarea[name=body***REMOVED***','Type your comment here');
     * $I-&gt;dontSeeInField('form input[type=hidden***REMOVED***','hidden_value');
     * $I-&gt;dontSeeInField('#searchform input','Search');
     * $I-&gt;dontSeeInField('//form/*[@name=search***REMOVED***','Search');
     * $I-&gt;dontSeeInField(['name' =&gt; 'search'***REMOVED***, 'Search');
     * ?&gt;
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::dontSeeInField()
     */
    public function dontSeeInField($field, $value) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeInField', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Selects an option in a select tag or in radio button group.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;selectOption('form select[name=account***REMOVED***', 'Premium');
     * $I-&gt;selectOption('form input[name=payment***REMOVED***', 'Monthly');
     * $I-&gt;selectOption('//form/select[@name=account***REMOVED***', 'Monthly');
     * ?&gt;
     * ```
     *
     * Provide an array for the second argument to select multiple options:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;selectOption('Which OS do you use?', array('Windows','Linux'));
     * ?&gt;
     * ```
     *
     * @param $select
     * @param $option
     * @see \Codeception\Module\WebDriver::selectOption()
     */
    public function selectOption($select, $option) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('selectOption', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\WebDriver::unselectOption()
     */
    public function unselectOption($select, $option) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('unselectOption', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;checkOption('#agree');
     * ?&gt;
     * ```
     *
     * @param $option
     * @see \Codeception\Module\WebDriver::checkOption()
     */
    public function checkOption($option) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('checkOption', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Unticks a checkbox.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;uncheckOption('#notify');
     * ?&gt;
     * ```
     *
     * @param $option
     * @see \Codeception\Module\WebDriver::uncheckOption()
     */
    public function uncheckOption($option) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('uncheckOption', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Fills a text field or textarea with the given string.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;fillField("//input[@type='text'***REMOVED***", "Hello World!");
     * $I-&gt;fillField(['name' =&gt; 'email'***REMOVED***, 'jon@mail.com');
     * ?&gt;
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::fillField()
     */
    public function fillField($field, $value) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('fillField', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Attaches a file relative to the Codeception data directory to the given file upload field.
     *
     * ``` php
     * &lt;?php
     * // file is stored in 'tests/_data/prices.xls'
     * $I-&gt;attachFile('input[@type="file"***REMOVED***', 'prices.xls');
     * ?&gt;
     * ```
     *
     * @param $field
     * @param $filename
     * @see \Codeception\Module\WebDriver::attachFile()
     */
    public function attachFile($field, $filename) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('attachFile', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Grabs all visible text from the current page.
     *
     * @return string
     * @see \Codeception\Module\WebDriver::getVisibleText()
     */
    public function getVisibleText() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('getVisibleText', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Finds and returns the text contents of the given element.
     * If a fuzzy locator is used, the element is found using CSS, XPath, and by matching the full page source by regular expression.
     *
     * ``` php
     * &lt;?php
     * $heading = $I-&gt;grabTextFrom('h1');
     * $heading = $I-&gt;grabTextFrom('descendant-or-self::h1');
     * $value = $I-&gt;grabTextFrom('~&lt;input value=(.*?)***REMOVED***~sgi'); // match with a regex
     * ?&gt;
     * ```
     *
     * @param $cssOrXPathOrRegex
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabTextFrom()
     */
    public function grabTextFrom($cssOrXPathOrRegex) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('grabTextFrom', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Grabs the value of the given attribute value from the given element.
     * Fails if element is not found.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;grabAttributeFrom('#tooltip', 'title');
     * ?&gt;
     * ```
     *
     *
     * @param $cssOrXpath
     * @param $attribute
     * @internal param $element
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabAttributeFrom()
     */
    public function grabAttributeFrom($cssOrXpath, $attribute) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('grabAttributeFrom', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Finds the value for the given form field.
     * If a fuzzy locator is used, the field is found by field name, CSS, and XPath.
     *
     * ``` php
     * &lt;?php
     * $name = $I-&gt;grabValueFrom('Name');
     * $name = $I-&gt;grabValueFrom('input[name=username***REMOVED***');
     * $name = $I-&gt;grabValueFrom('descendant-or-self::form/descendant::input[@name = 'username'***REMOVED***');
     * $name = $I-&gt;grabValueFrom(['name' =&gt; 'username'***REMOVED***);
     * ?&gt;
     * ```
     *
     * @param $field
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabValueFrom()
     */
    public function grabValueFrom($field) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('grabValueFrom', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeElement('.error');
     * $I-&gt;seeElement('//form/input[1***REMOVED***');
     * $I-&gt;seeElement('input', ['name' =&gt; 'login'***REMOVED***);
     * $I-&gt;seeElement('input', ['value' =&gt; '123456'***REMOVED***);
     *
     * // strict locator in first arg, attributes in second
     * $I-&gt;seeElement(['css' =&gt; 'form input'***REMOVED***, ['name' =&gt; 'login'***REMOVED***);
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeElement()
     */
    public function canSeeElement($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeElement', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeElement('.error');
     * $I-&gt;seeElement('//form/input[1***REMOVED***');
     * $I-&gt;seeElement('input', ['name' =&gt; 'login'***REMOVED***);
     * $I-&gt;seeElement('input', ['value' =&gt; '123456'***REMOVED***);
     *
     * // strict locator in first arg, attributes in second
     * $I-&gt;seeElement(['css' =&gt; 'form input'***REMOVED***, ['name' =&gt; 'login'***REMOVED***);
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * @see \Codeception\Module\WebDriver::seeElement()
     */
    public function seeElement($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeElement', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeElement('.error');
     * $I-&gt;dontSeeElement('//form/input[1***REMOVED***');
     * $I-&gt;dontSeeElement('input', ['name' =&gt; 'login'***REMOVED***);
     * $I-&gt;dontSeeElement('input', ['value' =&gt; '123456'***REMOVED***);
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param array $attributes
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeElement()
     */
    public function cantSeeElement($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElement', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeElement('.error');
     * $I-&gt;dontSeeElement('//form/input[1***REMOVED***');
     * $I-&gt;dontSeeElement('input', ['name' =&gt; 'login'***REMOVED***);
     * $I-&gt;dontSeeElement('input', ['value' =&gt; '123456'***REMOVED***);
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::dontSeeElement()
     */
    public function dontSeeElement($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeElement', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page, even it is invisible.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeElementInDOM('//form/input[type=hidden***REMOVED***');
     * ?&gt;
     * ```
     *
     * @param $selector
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeElementInDOM()
     */
    public function canSeeElementInDOM($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeElementInDOM', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page, even it is invisible.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeElementInDOM('//form/input[type=hidden***REMOVED***');
     * ?&gt;
     * ```
     *
     * @param $selector
     * @see \Codeception\Module\WebDriver::seeElementInDOM()
     */
    public function seeElementInDOM($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeElementInDOM', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Opposite of `seeElementInDOM`.
     *
     * @param $selector
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
     */
    public function cantSeeElementInDOM($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElementInDOM', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Opposite of `seeElementInDOM`.
     *
     * @param $selector
     * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
     */
    public function dontSeeElementInDOM($selector, $attributes = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeElementInDOM', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there are a certain number of elements matched by the given locator on the page.
     * 
     * ``` php
     * &lt;?php
     * $I-&gt;seeNumberOfElements('tr', 10);
     * $I-&gt;seeNumberOfElements('tr', [0,10***REMOVED***); //between 0 and 10 elements
     * ?&gt;
     * ```
     * @param $selector
     * @param mixed $expected:
     * - string: strict number
     * - array: range of numbers [0,10***REMOVED***
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeNumberOfElements()
     */
    public function canSeeNumberOfElements($selector, $expected) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeNumberOfElements', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there are a certain number of elements matched by the given locator on the page.
     * 
     * ``` php
     * &lt;?php
     * $I-&gt;seeNumberOfElements('tr', 10);
     * $I-&gt;seeNumberOfElements('tr', [0,10***REMOVED***); //between 0 and 10 elements
     * ?&gt;
     * ```
     * @param $selector
     * @param mixed $expected:
     * - string: strict number
     * - array: range of numbers [0,10***REMOVED***
     * @see \Codeception\Module\WebDriver::seeNumberOfElements()
     */
    public function seeNumberOfElements($selector, $expected) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeNumberOfElements', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is selected.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeOptionIsSelected('#form input[name=payment***REMOVED***', 'Visa');
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
     */
    public function canSeeOptionIsSelected($selector, $optionText) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeOptionIsSelected', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is selected.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeOptionIsSelected('#form input[name=payment***REMOVED***', 'Visa');
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
     */
    public function seeOptionIsSelected($selector, $optionText) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is not selected.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeOptionIsSelected('#form input[name=payment***REMOVED***', 'Visa');
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
     */
    public function cantSeeOptionIsSelected($selector, $optionText) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeOptionIsSelected', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is not selected.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeOptionIsSelected('#form input[name=payment***REMOVED***', 'Visa');
     * ?&gt;
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
     */
    public function dontSeeOptionIsSelected($selector, $optionText) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title contains the given string.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeInTitle('Blog - Post #1');
     * ?&gt;
     * ```
     *
     * @param $title
     *
     * @return mixed
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeInTitle()
     */
    public function canSeeInTitle($title) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeInTitle', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title contains the given string.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeInTitle('Blog - Post #1');
     * ?&gt;
     * ```
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeInTitle()
     */
    public function seeInTitle($title) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeInTitle', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::dontSeeInTitle()
     */
    public function cantSeeInTitle($title) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInTitle', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeInTitle()
     */
    public function dontSeeInTitle($title) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeInTitle', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Accepts the active JavaScript native popup window, as created by `window.alert`|`window.confirm`|`window.prompt`.
     * Don't confuse popups with modal windows, as created by [various libraries***REMOVED***(http://jster.net/category/windows-modals-popups).
     * @see \Codeception\Module\WebDriver::acceptPopup()
     */
    public function acceptPopup() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('acceptPopup', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Dismisses the active JavaScript popup, as created by `window.alert`|`window.confirm`|`window.prompt`.
     * @see \Codeception\Module\WebDriver::cancelPopup()
     */
    public function cancelPopup() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('cancelPopup', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the active JavaScript popup, as created by `window.alert`|`window.confirm`|`window.prompt`, contains the given string.
     *
     * @param $text
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\WebDriver::seeInPopup()
     */
    public function canSeeInPopup($text) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeInPopup', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the active JavaScript popup, as created by `window.alert`|`window.confirm`|`window.prompt`, contains the given string.
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::seeInPopup()
     */
    public function seeInPopup($text) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeInPopup', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Enters text into a native JavaScript prompt popup, as created by `window.prompt`.
     *
     * @param $keys
     * @see \Codeception\Module\WebDriver::typeInPopup()
     */
    public function typeInPopup($keys) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('typeInPopup', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Reloads the current page.
     * @see \Codeception\Module\WebDriver::reloadPage()
     */
    public function reloadPage() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('reloadPage', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Moves back in history.
     * @see \Codeception\Module\WebDriver::moveBack()
     */
    public function moveBack() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('moveBack', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Moves forward in history.
     * @see \Codeception\Module\WebDriver::moveForward()
     */
    public function moveForward() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('moveForward', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Submits the given form on the page, optionally with the given form values.
     * Give the form fields values as an array. Note that hidden fields can't be accessed.
     *
     * Skipped fields will be filled by their values from the page.
     * You don't need to click the 'Submit' button afterwards.
     * This command itself triggers the request to form's action.
     *
     * You can optionally specify what button's value to include
     * in the request with the last parameter as an alternative to
     * explicitly setting its value in the second parameter, as
     * button values are not otherwise included in the request.
     * 
     * Examples:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;submitForm('#login', array('login' =&gt; 'davert', 'password' =&gt; '123456'));
     * // or
     * $I-&gt;submitForm('#login', array('login' =&gt; 'davert', 'password' =&gt; '123456'), 'submitButtonName');
     *
     * ```
     *
     * For example, given this sample "Sign Up" form:
     *
     * ``` html
     * &lt;form action="/sign_up"&gt;
     *     Login: &lt;input type="text" name="user[login***REMOVED***" /&gt;&lt;br/&gt;
     *     Password: &lt;input type="password" name="user[password***REMOVED***" /&gt;&lt;br/&gt;
     *     Do you agree to out terms? &lt;input type="checkbox" name="user[agree***REMOVED***" /&gt;&lt;br/&gt;
     *     Select pricing plan &lt;select name="plan"&gt;&lt;option value="1"&gt;Free&lt;/option&gt;&lt;option value="2" selected="selected"&gt;Paid&lt;/option&gt;&lt;/select&gt;
     *     &lt;input type="submit" name="submitButton" value="Submit" /&gt;
     * &lt;/form&gt;
     * ```
     *
     * You could write the following to submit it:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;submitForm('#userForm', array('user' =&gt; array('login' =&gt; 'Davert', 'password' =&gt; '123456', 'agree' =&gt; true)), 'submitButton');
     *
     * ```
     * Note that "2" will be the submitted value for the "plan" field, as it is the selected option.
     * 
     * You can also emulate a JavaScript submission by not specifying any buttons in the third parameter to submitForm.
     * 
     * ```php
     * &lt;?php
     * $I-&gt;submitForm('#userForm', array('user' =&gt; array('login' =&gt; 'Davert', 'password' =&gt; '123456', 'agree' =&gt; true)));
     * 
     * ```
     *
     * @param $selector
     * @param $params
     * @param $button
     * @see \Codeception\Module\WebDriver::submitForm()
     */
    public function submitForm($selector, $params, $button = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('submitForm', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given element to change.
     * Element "change" is determined by a callback function which is called repeatedly until the return value evaluates to true.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;waitForElementChange('#menu', function(\WebDriverElement $el) {
     *     return $el-&gt;isDisplayed();
     * }, 100);
     * ?&gt;
     * ```
     *
     * @param $element
     * @param \Closure $callback
     * @param int $timeout seconds
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::waitForElementChange()
     */
    public function waitForElementChange($element, $callback, $timeout = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('waitForElementChange', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for an element to appear on the page.
     * If the element doesn't appear, a timeout exception is thrown.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;waitForElement('#agree_button', 30); // secs
     * $I-&gt;click('#agree_button');
     * ?&gt;
     * ```
     *
     * @param $element
     * @param int $timeout seconds
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForElement()
     */
    public function waitForElement($element, $timeout = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('waitForElement', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given element to be visible on the page.
     * If element doesn't appear, a timeout exception is thrown.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;waitForElementVisible('#agree_button', 30); // secs
     * $I-&gt;click('#agree_button');
     * ?&gt;
     * ```
     *
     * @param $element
     * @param int $timeout seconds
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForElementVisible()
     */
    public function waitForElementVisible($element, $timeout = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('waitForElementVisible', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given element to become invisible.
     * If element stays visible, a timeout exception is thrown.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;waitForElementNotVisible('#agree_button', 30); // secs
     * ?&gt;
     * ```
     *
     * @param $element
     * @param int $timeout seconds
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForElementNotVisible()
     */
    public function waitForElementNotVisible($element, $timeout = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('waitForElementNotVisible', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given string to appear on the page.
     * Can also be passed a selector to search in.
     * If the given text doesn't appear, a timeout exception is thrown.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;waitForText('foo', 30); // secs
     * $I-&gt;waitForText('foo', 30, '.title'); // secs
     * ?&gt;
     * ```
     *
     * @param string $text
     * @param int $timeout seconds
     * @param null $selector
     * @throws \Exception
     * @internal param string $element
     * @see \Codeception\Module\WebDriver::waitForText()
     */
    public function waitForText($text, $timeout = null, $selector = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('waitForText', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Wait for $timeout seconds.
     *
     * @param int $timeout secs
     * @throws \Codeception\Exception\TestRuntime
     * @see \Codeception\Module\WebDriver::wait()
     */
    public function wait($timeout) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('wait', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Low-level API method.
     * If Codeception commands are not enough, this allows you to use Selenium WebDriver methods directly:
     *
     * ``` php
     * $I-&gt;executeInSelenium(function(\WebDriver $webdriver) {
     *   $webdriver-&gt;get('http://google.com');
     * });
     * ```
     *
     * This runs in the context of the [RemoteWebDriver class***REMOVED***(https://github.com/facebook/php-webdriver/blob/master/lib/remote/RemoteWebDriver.php).
     * Try not to use this command on a regular basis.
     * If Codeception lacks a feature you need, please implement it and submit a patch.
     *
     * @param callable $function
     * @see \Codeception\Module\WebDriver::executeInSelenium()
     */
    public function executeInSelenium($function) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('executeInSelenium', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Switch to another window identified by name.
     *
     * The window can only be identified by name. If the $name parameter is blank, the parent window will be used.
     *
     * Example:
     * ``` html
     * &lt;input type="button" value="Open window" onclick="window.open('http://example.com', 'another_window')"&gt;
     * ```
     *
     * ``` php
     * &lt;?php
     * $I-&gt;click("Open window");
     * # switch to another window
     * $I-&gt;switchToWindow("another_window");
     * # switch to parent window
     * $I-&gt;switchToWindow();
     * ?&gt;
     * ```
     *
     * If the window has no name, the only way to access it is via the `executeInSelenium()` method, like so:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;executeInSelenium(function (\Webdriver $webdriver) {
     *      $handles=$webdriver-&gt;getWindowHandles();
     *      $last_window = end($handles);
     *      $webdriver-&gt;switchTo()-&gt;window($last_window);
     * });
     * ?&gt;
     * ```
     *
     * @param string|null $name
     * @see \Codeception\Module\WebDriver::switchToWindow()
     */
    public function switchToWindow($name = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('switchToWindow', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Switch to another frame on the page.
     *
     * Example:
     * ``` html
     * &lt;iframe name="another_frame" src="http://example.com"&gt;
     *
     * ```
     *
     * ``` php
     * &lt;?php
     * # switch to iframe
     * $I-&gt;switchToIFrame("another_frame");
     * # switch to parent page
     * $I-&gt;switchToIFrame();
     *
     * ```
     *
     * @param string|null $name
     * @see \Codeception\Module\WebDriver::switchToIFrame()
     */
    public function switchToIFrame($name = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('switchToIFrame', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Executes JavaScript and waits up to $timeout seconds for it to return true.
     *
     * In this example we will wait up to 60 seconds for all jQuery AJAX requests to finish.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;waitForJS("return $.active == 0;", 60);
     * ?&gt;
     * ```
     *
     * @param string $script
     * @param int $timeout seconds
     * @see \Codeception\Module\WebDriver::waitForJS()
     */
    public function waitForJS($script, $timeout = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('waitForJS', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Executes custom JavaScript.
     *
     * This example uses jQuery to get a value and assigns that value to a PHP variable:
     *
     * ```php
     * &lt;?php
     * $myVar = $I-&gt;executeJS('return $("#myField").val()');
     * ?&gt;
     * ```
     *
     * @param $script
     * @return mixed
     * @see \Codeception\Module\WebDriver::executeJS()
     */
    public function executeJS($script) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('executeJS', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Maximizes the current window.
     * @see \Codeception\Module\WebDriver::maximizeWindow()
     */
    public function maximizeWindow() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('maximizeWindow', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Performs a simple mouse drag-and-drop operation.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dragAndDrop('#drag', '#drop');
     * ?&gt;
     * ```
     *
     * @param string $source (CSS ID or XPath)
     * @param string $target (CSS ID or XPath)
     * @see \Codeception\Module\WebDriver::dragAndDrop()
     */
    public function dragAndDrop($source, $target) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('dragAndDrop', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Move mouse over the first element matched by the given locator.
     * If the second and third parameters are given, then the mouse is moved to an offset of the element's top-left corner.
     * Otherwise, the mouse is moved to the center of the element.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;moveMouseOver(['css' =&gt; '.checkout'***REMOVED***, 20, 50);
     * ?&gt;
     * ```
     *
     * @param string $cssOrXPath css or xpath of the web element
     * @param int $offsetX
     * @param int $offsetY
     *
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::moveMouseOver()
     */
    public function moveMouseOver($cssOrXPath, $offsetX = null, $offsetY = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('moveMouseOver', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Performs contextual click with the right mouse button on an element.
     *
     * @param $cssOrXPath
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::clickWithRightButton()
     */
    public function clickWithRightButton($cssOrXPath) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('clickWithRightButton', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Pauses test execution in debug mode.
     * To proceed test press "ENTER" in console.
     *
     * This method is useful while writing tests, since it allows you to inspect the current page in the middle of a test case.
     * @see \Codeception\Module\WebDriver::pauseExecution()
     */
    public function pauseExecution() {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('pauseExecution', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Performs a double-click on an element matched by CSS or XPath.
     *
     * @param $cssOrXPath
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::doubleClick()
     */
    public function doubleClick($cssOrXPath) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('doubleClick', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Presses the given key on the given element. 
     * To specify a character and modifier (e.g. ctrl, alt, shift, meta), pass an array for $char with 
     * the modifier as the first element and the character as the second.
     * For special keys use key constants from \WebDriverKeys class.
     *
     * ``` php
     * &lt;?php
     * // &lt;input id="page" value="old" /&gt;
     * $I-&gt;pressKey('#page','a'); // =&gt; olda
     * $I-&gt;pressKey('#page',array('ctrl','a'),'new'); //=&gt; new
     * $I-&gt;pressKey('#page',array('shift','111'),'1','x'); //=&gt; old!!!1x
     * $I-&gt;pressKey('descendant-or-self::*[@id='page'***REMOVED***','u'); //=&gt; oldu
     * $I-&gt;pressKey('#name', array('ctrl', 'a'), WebDriverKeys::DELETE); //=&gt;''
     * ?&gt;
     * ```
     *
     * @param $element
     * @param $char Can be char or array with modifier. You can provide several chars.
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::pressKey()
     */
    public function pressKey($element, $char) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('pressKey', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Append the given text to the given element.
     * Can also add a selection to a select box.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;appendField('#mySelectbox', 'SelectValue');
     * $I-&gt;appendField('#myTextField', 'appended');
     * ?&gt;
     * ```
     *
     * @param string $field
     * @param string $value
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::appendField()
     */
    public function appendField($field, $value) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('appendField', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Inserts SQL record into database. This record will be erased after the test.
     *
     * ``` php
     * &lt;?php
     * $I-&gt;haveInDatabase('users', array('name' =&gt; 'miles', 'email' =&gt; 'miles@davis.com'));
     * ?&gt;
     * ```
     *
     * @param $table
     * @param array $data
     * @return integer $id
     * @see \Codeception\Module\Db::haveInDatabase()
     */
    public function haveInDatabase($table, $data) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('haveInDatabase', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks if a row with given column values exists.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeInDatabase('users', array('name' =&gt; 'Davert', 'email' =&gt; 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if no such user found.
     *
     * @param       $table
     * @param array $criteria
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Db::seeInDatabase()
     */
    public function canSeeInDatabase($table, $criteria = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('seeInDatabase', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Checks if a row with given column values exists.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;seeInDatabase('users', array('name' =&gt; 'Davert', 'email' =&gt; 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if no such user found.
     *
     * @param       $table
     * @param array $criteria
     * @see \Codeception\Module\Db::seeInDatabase()
     */
    public function seeInDatabase($table, $criteria = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('seeInDatabase', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Effect is opposite to -&gt;seeInDatabase
     *
     * Checks if there is no record with such column values in database.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeInDatabase('users', array('name' =&gt; 'Davert', 'email' =&gt; 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if such user was found.
     *
     * @param       $table
     * @param array $criteria
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Db::dontSeeInDatabase()
     */
    public function cantSeeInDatabase($table, $criteria = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInDatabase', func_get_args()));
    }
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Effect is opposite to -&gt;seeInDatabase
     *
     * Checks if there is no record with such column values in database.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * &lt;?php
     * $I-&gt;dontSeeInDatabase('users', array('name' =&gt; 'Davert', 'email' =&gt; 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if such user was found.
     *
     * @param       $table
     * @param array $criteria
     * @see \Codeception\Module\Db::dontSeeInDatabase()
     */
    public function dontSeeInDatabase($table, $criteria = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Assertion('dontSeeInDatabase', func_get_args()));
    }

 
    /**
     * [!***REMOVED*** Method is generated. Documentation taken from corresponding module.
     *
     * Fetches a single column value from a database.
     * Provide table name, desired column and criteria.
     *
     * Example:
     *
     * ``` php
     * &lt;?php
     * $mail = $I-&gt;grabFromDatabase('users', 'email', array('name' =&gt; 'Davert'));
     *
     * ```
     *
     * @version 1.1
     *
     * @param       $table
     * @param       $column
     * @param array $criteria
     *
     * @return mixed
     * @see \Codeception\Module\Db::grabFromDatabase()
     */
    public function grabFromDatabase($table, $column, $criteria = null) {
        return $this-&gt;scenario-&gt;runStep(new \Codeception\Step\Action('grabFromDatabase', func_get_args()));
</codefragment>
  </duplication>
</pmd-cpd>

<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="78" tokens="199">
    <file path="/var/www/gear-package/gear/src/Gear/Database/FixtureService.php" line="17"/>
    <file path="/var/www/gear-package/gear/src/Gear/Mvc/Fixture/FixtureService.php" line="422"/>
    <codefragment>    public function getLoadedFixtures()
    {
        return $this-&gt;loadedFixtures;
    }

    public function setLoadedFixtures($loadedFixtures)
    {
        $this-&gt;loadedFixtures = $loadedFixtures;
        return $this;
    }

    public function setEventManager(EventManagerInterface $events)
    {
        $events-&gt;setIdentifiers(array(
            __CLASS__,
            get_called_class()
        ));
        $this-&gt;event = $events;
        return $this;
    }

    public function getEventManager()
    {
        if (null === $this-&gt;event) {
            $this-&gt;setEventManager(new \Zend\EventManager\EventManager());
        }
        return $this-&gt;event;
    }


    public function importProject()
    {
        $reset = $this-&gt;getRequest()-&gt;getParam('reset-autoincrement');
        $append = $this-&gt;getRequest()-&gt;getParam('append');
        $this-&gt;getEventManager()-&gt;trigger('loadFixtures', $this);

        $loader = new Loader();

        foreach ($this-&gt;getLoadedFixtures() as $moduleName =&gt; $fixture) {
            $loader-&gt;loadFromDirectory(realpath($fixture));
        }


        if ($reset) {
            $this-&gt;getAutoincrementService()-&gt;autoincrementDatabase();
        }

        $purger = new ORMPurger();
        $executor = new ORMExecutor($this-&gt;getServiceLocator()-&gt;get('doctrine.entitymanager.orm_default'), $purger);
        $executor-&gt;execute($loader-&gt;getFixtures(), $append);
    }


    public function importModule()
    {

        $module = $this-&gt;getRequest()-&gt;getParam('module');
        $append = $this-&gt;getRequest()-&gt;getParam('append');
        $reset = $this-&gt;getRequest()-&gt;getParam('reset-autoincrement');

        $this-&gt;getEventManager()-&gt;trigger('loadFixtures', $this);

        $loader = new Loader();

        foreach ($this-&gt;getLoadedFixtures() as $moduleName =&gt; $fixture) {

            if ($module == $moduleName) {
                $loader-&gt;loadFromDirectory(realpath($fixture));
            }
        }

        if ($reset) {
            $this-&gt;getAutoincrementService()-&gt;autoincrementDatabase();
        }

        $purger = new ORMPurger();
        $executor = new ORMExecutor($this-&gt;getServiceLocator()-&gt;get('doctrine.entitymanager.orm_default'), $purger);
        $executor-&gt;execute($loader-&gt;getFixtures(), $append);
</codefragment>
  </duplication>
  <duplication lines="26" tokens="78">
    <file path="/var/www/gear-package/gear/src/Gear/Mvc/Controller/ControllerService.php" line="431"/>
    <file path="/var/www/gear-package/gear/src/Gear/Mvc/ConsoleController/ConsoleController.php" line="54"/>
    <codefragment>        $this-&gt;fileActions     = $this-&gt;getCode()-&gt;getFunctionsNameFromFile($this-&gt;controllerFile);

        //pega as funções que serão adicionadas
        $this-&gt;actionsToInject = $this-&gt;getActionsToInject($this-&gt;controller, $this-&gt;fileActions);

        //transforma as novas actions em funções
        $this-&gt;functions = $this-&gt;actionToController($this-&gt;actionsToInject);
        $this-&gt;fileCode = explode(PHP_EOL, file_get_contents($this-&gt;controllerFile));


        $lines = $this-&gt;getCode()-&gt;inject($this-&gt;fileCode, $this-&gt;functions);
        $lines = $this-&gt;createUse($this-&gt;controller, $lines);
        $lines = $this-&gt;createUseAttributes($this-&gt;controller, $lines);

/*      if ($this-&gt;controller-&gt;getService()-&gt;getService() == 'factories') {

            $this-&gt;getFactoryService()-&gt;createFactory($this-&gt;controller, $this-&gt;location);
            $arguments = $this-&gt;getCode()-&gt;getConstructorArguments($this-&gt;controller);
            var_dump($arguments);
            $params = $this-&gt;getCode()-&gt;getConstructorParams($this-&gt;controller);
            var_dump($params);
        } */


        $newFile = implode(PHP_EOL, $lines);

</codefragment>
  </duplication>
  <duplication lines="20" tokens="78">
    <file path="/var/www/gear-package/gear/src/Gear/Mvc/Repository/RepositoryTestService.php" line="35"/>
    <file path="/var/www/gear-package/gear/src/Gear/Mvc/Form/FormTestService.php" line="38"/>
    <codefragment>    public function createFromSrc(Src $src)
    {
        $this-&gt;src = $src;

        if ($this-&gt;src-&gt;getDb() !== null) {
            return $this-&gt;introspectFromTable($this-&gt;src-&gt;getDb());
        }

        $this-&gt;className = $this-&gt;src-&gt;getName();

        $this-&gt;dependency = $this-&gt;getSrcDependency()-&gt;setSrc($this-&gt;src);

        $this-&gt;functions  = $this-&gt;dependency-&gt;getTests();

        $location = $this-&gt;getCodeTest()-&gt;getLocation($this-&gt;src);


        $mock = $this-&gt;str('var-lenght', 'mock'.$this-&gt;src-&gt;getName());

        $this-&gt;getFileCreator()-&gt;createFile(
</codefragment>
  </duplication>
  <duplication lines="25" tokens="70">
    <file path="/var/www/gear-package/gear/src/Gear/Column/Text/Text.php" line="6"/>
    <file path="/var/www/gear-package/gear/src/Gear/Column/Text/Html.php" line="6"/>
    <codefragment>class Text extends AbstractColumn
{
    public function __construct($column)
    {
        if ($column-&gt;getDataType() !== 'text') {
            throw new \Gear\Exception\InvalidDataTypeColumnException();
        }
        parent::__construct($column);
    }

    /**
     * Função usada em \Gear\Service\Mvc\FormService::getFormInputValues
     */
    public function getFormElement()
    {
        $var         = $this-&gt;getColumnVar($this-&gt;column);
        $elementName = $this-&gt;str('var', $this-&gt;column-&gt;getName());
        $label       = $this-&gt;str('label', $this-&gt;column-&gt;getName());

        $element = &lt;&lt;&lt;EOS
        \${$var} = new Element\Textarea('$elementName');
        \${$var}-&gt;setLabel('$label');
        \${$var}-&gt;setAttributes(array(
            'name' =&gt; '$elementName',
            'id' =&gt; '$elementName',
</codefragment>
  </duplication>
  <duplication lines="51" tokens="86">
    <file path="/var/www/gear-package/gear/src/Gear/Column/Varchar/Url.php" line="36"/>
    <file path="/var/www/gear-package/gear/src/Gear/Column/Varchar/Email.php" line="89"/>
    <codefragment>    public function getInsertArrayByColumn()
    {
        $columnVar = $this-&gt;str('var', $this-&gt;column-&gt;getName());
        $columnValue = $this-&gt;getValueFormat(15);

        $insert = &lt;&lt;&lt;EOS
            '$columnVar' =&gt; '$columnValue',

EOS;
        return $insert;
    }

    /**
     * Usado nos testes unitários de Repository, Service,
     *  Controller para array de inserção de dados.
     * @param array $this-&gt;column Colunas válidas.
     * @return string Texto para inserir no template
     */
    public function getInsertSelectByColumn()
    {
        $columnVar = $this-&gt;str('var', $this-&gt;column-&gt;getName());
        $columnValue = $this-&gt;getValueFormat(15);

        $insert = &lt;&lt;&lt;EOS
            '$columnVar' =&gt; '$columnValue',

EOS;

        return $insert;
    }


    /**
     * Usado nos testes unitários de Repository, Service,
     *  Controller para assert com os dados do array de inserção de dados.
     * @param array $this-&gt;column Colunas válidas.
     * @return string Texto para inserir no template
     */
    public function getInsertAssertByColumn()
    {
        $columnClass = $this-&gt;str('class', $this-&gt;column-&gt;getName());
        $columnValue = $this-&gt;getValueFormat(15);

        $insertAssert = &lt;&lt;&lt;EOS
        \$this-&gt;assertEquals('$columnValue', \$resultSet-&gt;get$columnClass());

EOS;
        return $insertAssert;
    }


</codefragment>
  </duplication>
  <duplication lines="71" tokens="92">
    <file path="/var/www/gear-package/gear/src/Gear/Column/Varchar/Email.php" line="78"/>
    <file path="/var/www/gear-package/gear/src/Gear/Column/Varchar/Telephone.php" line="37"/>
    <codefragment>EOS;

        return $element;
    }

    /**
     * Usado nos testes unitários de Repository, Service,
     *  Controller para array de inserção de dados.
     * @param array $this-&gt;column Colunas válidas.
     * @return string Texto para inserir no template
     */
    public function getInsertArrayByColumn()
    {
        $columnVar = $this-&gt;str('var', $this-&gt;column-&gt;getName());
        $columnValue = $this-&gt;getValueFormat(15);

        $insert = &lt;&lt;&lt;EOS
            '$columnVar' =&gt; '$columnValue',

EOS;
        return $insert;
    }

    /**
     * Usado nos testes unitários de Repository, Service,
     *  Controller para array de inserção de dados.
     * @param array $this-&gt;column Colunas válidas.
     * @return string Texto para inserir no template
     */
    public function getInsertSelectByColumn()
    {
        $columnVar = $this-&gt;str('var', $this-&gt;column-&gt;getName());
        $columnValue = $this-&gt;getValueFormat(15);

        $insert = &lt;&lt;&lt;EOS
            '$columnVar' =&gt; '$columnValue',

EOS;

        return $insert;
    }


    /**
     * Usado nos testes unitários de Repository, Service,
     *  Controller para assert com os dados do array de inserção de dados.
     * @param array $this-&gt;column Colunas válidas.
     * @return string Texto para inserir no template
     */
    public function getInsertAssertByColumn()
    {
        $columnClass = $this-&gt;str('class', $this-&gt;column-&gt;getName());
        $columnValue = $this-&gt;getValueFormat(15);

        $insertAssert = &lt;&lt;&lt;EOS
        \$this-&gt;assertEquals('$columnValue', \$resultSet-&gt;get$columnClass());

EOS;
        return $insertAssert;
    }

    public function getValueFormat($number)
    {
        return sprintf('%s%02d%s', $this-&gt;str('point', $this-&gt;column-&gt;getName()), $number, '@gmail.com');
    }

    public function getFixture($numberReference)
    {
        $name = $this-&gt;str('uline', $this-&gt;column-&gt;getName());
        $value = $this-&gt;getValueFormat($numberReference);

</codefragment>
  </duplication>
  <duplication lines="19" tokens="75">
    <file path="/var/www/gear-package/gear/src/Gear/Column/Varchar/Email.php" line="21"/>
    <file path="/var/www/gear-package/gear/src/Gear/Column/AbstractColumn.php" line="261"/>
    <codefragment>    public function filterUniqueElement()
    {
        $elementName = $this-&gt;column-&gt;getName();
        $elementLabel = $this-&gt;str('label', $this-&gt;column-&gt;getName());

        $elementClass = $this-&gt;str('var-lenght', 'id'.$this-&gt;str('class', $this-&gt;column-&gt;getTableName()));

        $tableName  = $this-&gt;column-&gt;getTableName();
        $tableLabel = $this-&gt;str('label', $this-&gt;column-&gt;getTableName());

        $primaryKey = 'id_'.$this-&gt;str('uline', $this-&gt;column-&gt;getTableName());

        $required = ($this-&gt;column-&gt;isNullable()) ? 'false' : 'true';

        $element = &lt;&lt;&lt;EOS
        \$this-&gt;add(
            array(
                'name' =&gt; '$elementName',
                'required' =&gt; $required,
</codefragment>
  </duplication>
  <duplication lines="84" tokens="147">
    <file path="/var/www/gear-package/gear/src/Gear/Column/Date/AbstractDate.php" line="6"/>
    <file path="/var/www/gear-package/gear/src/Gear/Column/Datetime/AbstractDateTime.php" line="6"/>
    <codefragment>abstract class AbstractDate extends AbstractColumn
{
    protected $insertTime;

    protected $updateTime;

    const DATETIME_GLOBAL_FORMAT = 'Y-m-d H:i:s';

    const DATETIME_PTBR_FORMAT = 'd/m/Y H:i:s';

    const DATE_PTBR_FORMAT = 'd/m/Y';

    const DATE_GLOBAL_FORMAT = 'Y-m-d';

    const TIME_GLOBAL_FORMAT = 'H:i:s';

    public function __construct($column)
    {
        parent::__construct($column);
    }

    public function getUpdateTime()
    {
        if ($this-&gt;updateTime == null) {
            $this-&gt;updateTime = new \DateTime();
        }
        return $this-&gt;updateTime;
    }

    public function setUpdateTime($updateTime)
    {
        $this-&gt;updateTime = $updateTime;
        return $this;
    }

    public function getInsertTime()
    {
        if ($this-&gt;insertTime == null) {
            $this-&gt;insertTime = new \DateTime();
        }
        return $this-&gt;insertTime;
    }

    public function setInsertTime($insertTime)
    {
        $this-&gt;insertTime = $insertTime;
        return $this;
    }

    public function getDateTimeGlobalFormat()
    {
        return self::DATETIME_GLOBAL_FORMAT;
    }

    public function getDateTimePTBRFormat()
    {
        return self::DATETIME_PTBR_FORMAT;
    }

    public function getDatePTBRFormat()
    {
        return self::DATE_PTBR_FORMAT;
    }

    public function getDateGlobalFormat()
    {
        return self::DATE_GLOBAL_FORMAT;
    }

    public function getTimeGlobalFormat()
    {
        return self::TIME_GLOBAL_FORMAT;
    }


    public function getFixture($numberReference)
    {
        $name = $this-&gt;str('uline', $this-&gt;column-&gt;getName());
        $value = $this-&gt;getFixtureDefault($numberReference);

        return &lt;&lt;&lt;EOS
                '$name' =&gt; '$value',

EOS;
</codefragment>
  </duplication>
</pmd-cpd>
